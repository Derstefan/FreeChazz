{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //game\n      player1: {},\n      player2: {},\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      width: 16,\n      height: 16,\n      turn: \"Player1\",\n      // TODO: sth better than String switching?\n      round: 0,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      //consts\n      squareSize: 25,\n      boardTopx: 25,\n      boardTopy: 25,\n      updateInterval: 1500\n    };\n    this.loadGameData();\n    this.loadBoard();\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n    this.play = this.play.bind(this);\n    const loadTimer = setInterval(() => {\n      this.loadGameData();\n    }, this.state.updateInterval);\n  }\n\n  componentDidMount() {}\n\n  loadGameData() {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2,\n        turn: res.data.turn,\n        round: res.data.round\n      }); //when other player made his turn\n\n      if (turn !== res.data.turn) {\n        this.loadBoard();\n      }\n    });\n  }\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = res.data.board;\n      console.log(bv);\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (res.data.board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      }\n\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField,\n      me,\n      turn,\n      possibleMoves\n    } = this.state;\n    const isPlayerTurn = me === turn;\n    console.log(me, \"=?\", turn);\n    const isEmptyField = boardView[y][x].symbol === \"\";\n    const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n    if (sthSelected) {\n      const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n      const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n      const isOwnSelected = me == boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n      if (isAlreadySelected) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n        // move\n        const draw = {\n          fromPos: {\n            x: selectedField.x,\n            y: selectedField.y\n          },\n          toPos: {\n            x: x,\n            y: y\n          }\n        };\n        this.play(draw);\n      } else if (isEmptyField) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    } else {\n      if (!isEmptyField) {\n        // select new position\n        console.log(\"newPos2\");\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    }\n  }\n\n  play(draw) {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.play(gameId, draw).then(res => {\n      console.log(\"played\", turn);\n      const nextTurn = turn === \"Player1\" ? \"Player2\" : \"Player1\";\n      this.setState({\n        possibleMoves: [],\n        selectedField: {},\n        turn: nextTurn\n      });\n      this.loadGameData();\n      this.loadBoard();\n    });\n  }\n\n  clickOnCanvas(event) {\n    const {\n      squareSize,\n      boardTopy,\n      boardTopx\n    } = this.state;\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - boardTopx;\n    const y = event.clientY - rect.top - boardTopy; //console.log(\"x: \" + x + \" y: \" + y);\n\n    this.selectField((x - x % squareSize) / squareSize, (y - y % squareSize) / squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      squareSize,\n      boardView,\n      possibleMoves,\n      boardTopy,\n      boardTopx,\n      selectedField,\n      me\n    } = this.state;\n    var ctx = null;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        ctx.canvas.width = squareSize * (width + 1);\n        ctx.canvas.height = squareSize * (height + 1); //draw board\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 == 0 ? \"lightgray\" : \"gray\";\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize); //                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n          }\n        }\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.45;\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < possibleMoves.length; k++) {\n            let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0]) {\n          ctx.fillStyle = \"black\";\n          ctx.font = \"20px Arial\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let symbol = boardView[j][i].owner === \"Player1\" ? \"♖\" : \"♜\";\n                let xOffset = boardTopx + (i + 0.12) * squareSize;\n                let yOffset = boardTopy + (j + 0.8) * squareSize;\n                ctx.fillText(symbol, xOffset, yOffset);\n              }\n            }\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n      }\n    };\n\n    return draw;\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      boardView,\n      selectedField,\n      turn,\n      round\n    } = this.state;\n    var piece = \"\";\n\n    if (boardView[0] && selectedField.x) {\n      piece = boardView[selectedField.y][selectedField.x]; //console.log(piece);\n    } // TODO: aufteilen in GameData und PieceData ?\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inviteLink, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"here is the Game: Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Player2: \", player2.name]\n        }, void 0, true), \" next:\", turn, \" \", \" round:\", round]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawMethod(),\n        onClick: this.clickOnCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","player1","player2","boardData","boardView","width","height","turn","round","selectedField","possibleMoves","squareSize","boardTopx","boardTopy","updateInterval","loadGameData","loadBoard","selectField","bind","clickOnCanvas","drawMethod","play","loadTimer","setInterval","componentDidMount","getGameData","then","res","setState","data","getBoard","bv","board","console","log","i","length","j","symbol","owner","x","y","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","frameCount","canvas","fillStyle","xOffset","yOffset","fillRect","globalAlpha","k","font","fillText","strokeStyle","strokeRect","render","piece","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;AAEA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAsC;AAIlCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCJ,MADxC;AAETK,MAAAA,EAAE,EAACJ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCE,MAFnC;AAGTC,MAAAA,UAAU,EAAE,oCAAoCN,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCJ,MAHhF;AAKT;AACAQ,MAAAA,OAAO,EAAE,EANA;AAOTC,MAAAA,OAAO,EAAE,EAPA;AAQTC,MAAAA,SAAS,EAAE,EARF;AAQM;AACfC,MAAAA,SAAS,EAAE,EATF;AASM;AACfC,MAAAA,KAAK,EAAC,EAVG;AAWTC,MAAAA,MAAM,EAAC,EAXE;AAYTC,MAAAA,IAAI,EAAC,SAZI;AAYM;AACfC,MAAAA,KAAK,EAAC,CAbG;AAeT;AACAC,MAAAA,aAAa,EAAC,EAhBL;AAiBTC,MAAAA,aAAa,EAAC,EAjBL;AAmBT;AACAC,MAAAA,UAAU,EAAE,EApBH;AAqBTC,MAAAA,SAAS,EAAE,EArBF;AAsBTC,MAAAA,SAAS,EAAG,EAtBH;AAuBTC,MAAAA,cAAc,EAAE;AAvBP,KAAb;AAyBA,SAAKC,YAAL;AACA,SAAKC,SAAL;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,IAAL,GAAY,KAAKA,IAAL,CAAUH,IAAV,CAAe,IAAf,CAAZ;AAEA,UAAMI,SAAS,GAAGC,WAAW,CAAC,MAAM;AAChC,WAAKR,YAAL;AACH,KAF4B,EAE1B,KAAKvB,KAAL,CAAWsB,cAFe,CAA7B;AAGH;;AAELU,EAAAA,iBAAiB,GAAE,CAElB;;AAEGT,EAAAA,YAAY,GAAG;AACX,UAAM;AAAEtB,MAAAA,MAAF;AAASc,MAAAA;AAAT,QAAiB,KAAKf,KAA5B;AACAN,IAAAA,WAAW,CAACuC,WAAZ,CAAwBhC,MAAxB,EAAgCiC,IAAhC,CAAsCC,GAAD,IAAS;AAC1C,WAAKC,QAAL,CAAc;AAAE3B,QAAAA,OAAO,EAAE0B,GAAG,CAACE,IAAJ,CAAS5B,OAApB;AAA6BC,QAAAA,OAAO,EAAEyB,GAAG,CAACE,IAAJ,CAAS3B,OAA/C;AAAuDK,QAAAA,IAAI,EAACoB,GAAG,CAACE,IAAJ,CAAStB,IAArE;AAA0EC,QAAAA,KAAK,EAACmB,GAAG,CAACE,IAAJ,CAASrB;AAAzF,OAAd,EAD0C,CAE1C;;AACA,UAAGD,IAAI,KAAGoB,GAAG,CAACE,IAAJ,CAAStB,IAAnB,EAAwB;AAEpB,aAAKS,SAAL;AACH;AACJ,KAPD;AAQH;;AAIDA,EAAAA,SAAS,GAAE;AACP,UAAM;AAAEvB,MAAAA;AAAF,QAAa,KAAKD,KAAxB;AACAN,IAAAA,WAAW,CAAC4C,QAAZ,CAAqBrC,MAArB,EAA6BiC,IAA7B,CAAmCC,GAAD,IAAS;AACvC,UAAII,EAAE,GAACJ,GAAG,CAACE,IAAJ,CAASG,KAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACK,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,EAAE,CAAC,CAAD,CAAF,CAAMK,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,cAAGV,GAAG,CAACE,IAAJ,CAASG,KAAT,CAAeG,CAAf,EAAkBE,CAAlB,MAAuB,IAA1B,EAA+B;AAC3BN,YAAAA,EAAE,CAACI,CAAD,CAAF,CAAME,CAAN,IAAS;AACLC,cAAAA,MAAM,EAAE,EADH;AAELC,cAAAA,KAAK,EAAE,EAFF;AAGL7B,cAAAA,aAAa,EAAE;AAHV,aAAT;AAIH,WALD,MAKO;AACHqB,YAAAA,EAAE,CAACI,CAAD,CAAF,CAAME,CAAN,IAAS;AACTC,cAAAA,MAAM,EAAEP,EAAE,CAACI,CAAD,CAAF,CAAME,CAAN,EAASC,MADR;AAETC,cAAAA,KAAK,EAAER,EAAE,CAACI,CAAD,CAAF,CAAME,CAAN,EAASE,KAFP;AAGT7B,cAAAA,aAAa,EAAEqB,EAAE,CAACI,CAAD,CAAF,CAAME,CAAN,EAAS3B;AAHf,aAAT;AAIH;AACJ;AACJ;;AACD,WAAKkB,QAAL,CAAc;AAAEzB,QAAAA,SAAS,EAACwB,GAAG,CAACE,IAAhB;AAAqBzB,QAAAA,SAAS,EAAC2B,EAA/B;AAAkC1B,QAAAA,KAAK,EAAC0B,EAAE,CAAC,CAAD,CAAF,CAAMK,MAA9C;AAAqD9B,QAAAA,MAAM,EAACyB,EAAE,CAACK;AAA/D,OAAd;AAEH,KApBD;AAqBH;;AAEDnB,EAAAA,WAAW,CAACuB,CAAD,EAAGC,CAAH,EAAK;AACZ,UAAM;AAACrC,MAAAA,SAAD;AAAWK,MAAAA,aAAX;AAAyBX,MAAAA,EAAzB;AAA4BS,MAAAA,IAA5B;AAAiCG,MAAAA;AAAjC,QAAiD,KAAKlB,KAA5D;AACA,UAAMkD,YAAY,GAAG5C,EAAE,KAAKS,IAA5B;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAYpC,EAAZ,EAAe,IAAf,EAAoBS,IAApB;AACA,UAAMoC,YAAY,GAAGvC,SAAS,CAACqC,CAAD,CAAT,CAAaD,CAAb,EAAgBF,MAAhB,KAAyB,EAA9C;AACA,UAAMM,WAAW,GAAGlD,IAAI,CAACmD,SAAL,CAAepC,aAAf,MAAgC,IAApD;;AAEA,QAAGmC,WAAH,EAAe;AACX,YAAME,iBAAiB,GAAGrC,aAAa,CAAC+B,CAAd,KAAkBA,CAAlB,IAAuB/B,aAAa,CAACgC,CAAd,KAAkBA,CAAnE;AACA,YAAMM,cAAc,GAAGrC,aAAa,CAACsC,IAAd,CAAmBC,IAAI,IAAIA,IAAI,CAACT,CAAL,KAAWA,CAAX,IAAgBS,IAAI,CAACR,CAAL,KAASA,CAApD,CAAvB;AACA,YAAMS,aAAa,GAAGpD,EAAE,IAAEM,SAAS,CAACK,aAAa,CAACgC,CAAf,CAAT,CAA2BhC,aAAa,CAAC+B,CAAzC,EAA4CD,KAAtE,CAHW,CAKX;;AAEA,UAAGO,iBAAH,EAAqB;AACjB;AACA,aAAKlB,QAAL,CAAc;AAAClB,UAAAA,aAAa,EAAC,EAAf;AACdD,UAAAA,aAAa,EAAC;AADA,SAAd;AAEH,OAJD,MAIO,IAAGyC,aAAa,IAAIH,cAAjB,IAAmCL,YAAtC,EAAmD;AACtD;AACA,cAAMS,IAAI,GAAG;AAACC,UAAAA,OAAO,EAAC;AAACZ,YAAAA,CAAC,EAAC/B,aAAa,CAAC+B,CAAjB;AAAmBC,YAAAA,CAAC,EAAChC,aAAa,CAACgC;AAAnC,WAAT;AAA+CY,UAAAA,KAAK,EAAC;AAACb,YAAAA,CAAC,EAACA,CAAH;AAAKC,YAAAA,CAAC,EAACA;AAAP;AAArD,SAAb;AACA,aAAKpB,IAAL,CAAU8B,IAAV;AACH,OAJM,MAIA,IAAGR,YAAH,EAAgB;AACnB;AACA,aAAKf,QAAL,CAAc;AAAClB,UAAAA,aAAa,EAAC,EAAf;AACdD,UAAAA,aAAa,EAAC;AADA,SAAd;AAEH,OAJM,MAIA;AACH;AACA,aAAKmB,QAAL,CAAc;AAAClB,UAAAA,aAAa,EAACN,SAAS,CAACqC,CAAD,CAAT,CAAaD,CAAb,EAAgB9B,aAA/B;AACdD,UAAAA,aAAa,EAAC;AAAC+B,YAAAA,CAAC,EAACA,CAAH;AAAKC,YAAAA,CAAC,EAACA;AAAP;AADA,SAAd;AAEH;AACJ,KAxBD,MAwBO;AACH,UAAG,CAACE,YAAJ,EAAiB;AACb;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,aAAKN,QAAL,CAAc;AAAClB,UAAAA,aAAa,EAACN,SAAS,CAACqC,CAAD,CAAT,CAAaD,CAAb,EAAgB9B,aAA/B;AACVD,UAAAA,aAAa,EAAC;AAAC+B,YAAAA,CAAC,EAACA,CAAH;AAAKC,YAAAA,CAAC,EAACA;AAAP;AADJ,SAAd;AAEH;AACJ;AACJ;;AAEDpB,EAAAA,IAAI,CAAC8B,IAAD,EAAM;AACN,UAAM;AAAC1D,MAAAA,MAAD;AAAQc,MAAAA;AAAR,QAAgB,KAAKf,KAA3B;AACAN,IAAAA,WAAW,CAACmC,IAAZ,CAAiB5B,MAAjB,EAAwB0D,IAAxB,EAA8BzB,IAA9B,CAAoCC,GAAD,IAAS;AACxCM,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqB3B,IAArB;AACA,YAAM+C,QAAQ,GAAI/C,IAAI,KAAG,SAAR,GAAmB,SAAnB,GAA6B,SAA9C;AACA,WAAKqB,QAAL,CAAc;AAAClB,QAAAA,aAAa,EAAC,EAAf;AACVD,QAAAA,aAAa,EAAC,EADJ;AAEVF,QAAAA,IAAI,EAAC+C;AAFK,OAAd;AAII,WAAKvC,YAAL;AACJ,WAAKC,SAAL;AACH,KATD;AAUH;;AAKDG,EAAAA,aAAa,CAACoC,KAAD,EAAO;AAChB,UAAM;AAAC5C,MAAAA,UAAD;AAAYE,MAAAA,SAAZ;AAAsBD,MAAAA;AAAtB,QAAmC,KAAKpB,KAA9C;AACA,UAAMgE,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,qBAAb,EAAb;AACA,UAAMlB,CAAC,GAAGe,KAAK,CAACI,OAAN,GAAgBH,IAAI,CAACI,IAArB,GAA0BhD,SAApC;AACA,UAAM6B,CAAC,GAAGc,KAAK,CAACM,OAAN,GAAgBL,IAAI,CAACM,GAArB,GAA0BjD,SAApC,CAJgB,CAKhB;;AACA,SAAKI,WAAL,CAAiB,CAACuB,CAAC,GAAGA,CAAC,GAAG7B,UAAT,IAAsBA,UAAvC,EAAmD,CAAC8B,CAAC,GAAGA,CAAC,GAAG9B,UAAT,IAAsBA,UAAzE;AACH;;AAEDS,EAAAA,UAAU,GAAE;AACR,UAAM;AAACf,MAAAA,KAAD;AAAOC,MAAAA,MAAP;AAAcK,MAAAA,UAAd;AAAyBP,MAAAA,SAAzB;AAAmCM,MAAAA,aAAnC;AAAiDG,MAAAA,SAAjD;AAA2DD,MAAAA,SAA3D;AAAqEH,MAAAA,aAArE;AAAmFX,MAAAA;AAAnF,QAAyF,KAAKN,KAApG;AACA,QAAIuE,GAAG,GAAG,IAAV;;AAEA,UAAMZ,IAAI,GAAG,CAACY,GAAD,EAAMC,UAAN,KAAqB;AAElC,UAAG5D,SAAH,EAAa;AAET2D,QAAAA,GAAG,CAACE,MAAJ,CAAW5D,KAAX,GAAiBM,UAAU,IAAEN,KAAK,GAAC,CAAR,CAA3B;AACA0D,QAAAA,GAAG,CAACE,MAAJ,CAAW3D,MAAX,GAAkBK,UAAU,IAAEL,MAAM,GAAC,CAAT,CAA5B,CAHS,CAKT;;AACA,aAAI,IAAI6B,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC9B,KAAf,EAAsB8B,CAAC,EAAvB,EAA2B;AACzB,eAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC/B,MAAf,EAAuB+B,CAAC,EAAxB,EAA4B;AAC1B0B,YAAAA,GAAG,CAACG,SAAJ,GAAiB,CAAC/B,CAAC,GAACE,CAAH,IAAM,CAAN,IAAS,CAAV,GAAe,WAAf,GAA2B,MAA3C;AACA,gBAAI8B,OAAO,GAAGvD,SAAS,GAAGyB,CAAC,GAAC1B,UAA5B;AACA,gBAAIyD,OAAO,GAAGvD,SAAS,GAAGsB,CAAC,GAACxB,UAA5B;AACAoD,YAAAA,GAAG,CAACM,QAAJ,CAAaF,OAAb,EAAsBC,OAAtB,EAA+BzD,UAA/B,EAA2CA,UAA3C,EAJ0B,CAK1C;AACe;AACF;;AACD,YAAGjB,IAAI,CAACmD,SAAL,CAAepC,aAAf,MAAgC,IAAnC,EAAwC;AACxC;AACAsD,UAAAA,GAAG,CAACO,WAAJ,GAAkB,IAAlB;AACAP,UAAAA,GAAG,CAACG,SAAJ,GAAepE,EAAE,KAAGM,SAAS,CAACK,aAAa,CAACgC,CAAf,CAAT,CAA2BhC,aAAa,CAAC+B,CAAzC,EAA4CD,KAAlD,GAAyD,YAAzD,GAAsE,KAApF;;AACA,eAAI,IAAIgC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC7D,aAAa,CAAC0B,MAA7B,EAAqCmC,CAAC,EAAtC,EAA0C;AACtC,gBAAIJ,OAAO,GAAGvD,SAAS,GAAGF,aAAa,CAAC6D,CAAD,CAAb,CAAiB/B,CAAjB,GAAmB7B,UAA7C;AACA,gBAAIyD,OAAO,GAAGvD,SAAS,GAAGH,aAAa,CAAC6D,CAAD,CAAb,CAAiB9B,CAAjB,GAAmB9B,UAA7C;AAEAoD,YAAAA,GAAG,CAACM,QAAJ,CAAaF,OAAb,EAAsBC,OAAtB,EAA+BzD,UAA/B,EAA2CA,UAA3C;AACH,WATuC,CAWxC;;;AACAoD,UAAAA,GAAG,CAACG,SAAJ,GAAepE,EAAE,KAAGM,SAAS,CAACK,aAAa,CAACgC,CAAf,CAAT,CAA2BhC,aAAa,CAAC+B,CAAzC,EAA4CD,KAAlD,GAAyD,OAAzD,GAAiE,SAA/E;AACAwB,UAAAA,GAAG,CAACM,QAAJ,CAAazD,SAAS,GAAGH,aAAa,CAAC+B,CAAd,GAAgB7B,UAAzC,EAAqDE,SAAS,GAAGJ,aAAa,CAACgC,CAAd,GAAgB9B,UAAjF,EAA6FA,UAA7F,EAAyGA,UAAzG;AACAoD,UAAAA,GAAG,CAACO,WAAJ,GAAkB,CAAlB;AACH,SA9BY,CAgCT;;;AACA,YAAGlE,SAAS,CAAC,CAAD,CAAZ,EAAgB;AAChB2D,UAAAA,GAAG,CAACG,SAAJ,GAAgB,OAAhB;AACAH,UAAAA,GAAG,CAACS,IAAJ,GAAW,YAAX;;AACA,eAAI,IAAIrC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC9B,KAAf,EAAsB8B,CAAC,EAAvB,EAA2B;AACvB,iBAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC/B,MAAf,EAAuB+B,CAAC,EAAxB,EAA4B;AACxB,kBAAGjC,SAAS,CAACiC,CAAD,CAAT,CAAaF,CAAb,EAAgBG,MAAhB,KAAyB,EAA5B,EAA+B;AAC3B,oBAAIA,MAAM,GAAIlC,SAAS,CAACiC,CAAD,CAAT,CAAaF,CAAb,EAAgBI,KAAhB,KAAwB,SAAzB,GAAoC,GAApC,GAAwC,GAArD;AACA,oBAAI4B,OAAO,GAAGvD,SAAS,GAAG,CAACuB,CAAC,GAAC,IAAH,IAASxB,UAAnC;AACA,oBAAIyD,OAAO,GAAGvD,SAAS,GAAG,CAACwB,CAAC,GAAC,GAAH,IAAQ1B,UAAlC;AACAoD,gBAAAA,GAAG,CAACU,QAAJ,CAAanC,MAAb,EAAoB6B,OAApB,EAA4BC,OAA5B;AACH;AACJ;AACJ;AACJ,SA9CY,CAgDT;;;AACAL,QAAAA,GAAG,CAACW,WAAJ,GAAkB,OAAlB;AACAX,QAAAA,GAAG,CAACY,UAAJ,CAAe/D,SAAf,EAA0BC,SAA1B,EAAqCF,UAAU,GAACN,KAAhD,EAAuDM,UAAU,GAACL,MAAlE;AAEP;AACA,KAvDG;;AAwDJ,WAAO6C,IAAP;AACC;;AAMDyB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAE5E,MAAAA,UAAF;AAAcC,MAAAA,OAAd;AAAuBC,MAAAA,OAAvB;AAAgCE,MAAAA,SAAhC;AAA0CK,MAAAA,aAA1C;AAAyDF,MAAAA,IAAzD;AAA8DC,MAAAA;AAA9D,QAAuE,KAAKhB,KAAlF;AACA,QAAIqF,KAAK,GAAE,EAAX;;AACA,QAAGzE,SAAS,CAAC,CAAD,CAAT,IAAgBK,aAAa,CAAC+B,CAAjC,EAAmC;AAC/BqC,MAAAA,KAAK,GAAGzE,SAAS,CAACK,aAAa,CAACgC,CAAf,CAAT,CAA2BhC,aAAa,CAAC+B,CAAzC,CAAR,CAD+B,CAE/B;AACH,KANI,CAQL;;;AAEA,wBACI;AAAA,iBACKxC,UADL,eAEI;AAAA,kDAC4BC,OAAO,IAAIA,OAAO,CAAC6E,IAD/C,OACsD5E,OAAO,iBAAI;AAAA,kCAAYA,OAAO,CAAC4E,IAApB;AAAA,wBADjE,EAC+F,QAD/F,EACyGvE,IADzG,OACgH,SADhH,EAC2HC,KAD3H;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKA,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,KAAKY,UAAL,EAAd;AAAiC,QAAA,OAAO,EAAE,KAAKD;AAA/C;AAAA;AAAA;AAAA;AAAA,cALA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAhPiC;;AAmPtC,eAAe9B,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n    \n\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me:JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            \n            //game\n            player1: {},\n            player2: {},\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            width:16,\n            height:16,\n            turn:\"Player1\",// TODO: sth better than String switching?\n            round:0,\n\n            //selection\n            selectedField:{},\n            possibleMoves:[],\n\n            //consts\n            squareSize: 25,\n            boardTopx :25,\n            boardTopy : 25,\n            updateInterval: 1500\n        }\n        this.loadGameData();\n        this.loadBoard();\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n\n        const loadTimer = setInterval(() => {\n            this.loadGameData();\n        }, this.state.updateInterval);\n    }\n\ncomponentDidMount(){\n\n}\n\n    loadGameData() {\n        const { gameId,turn} = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            this.setState({ player1: res.data.player1, player2: res.data.player2,turn:res.data.turn,round:res.data.round });\n            //when other player made his turn\n            if(turn!==res.data.turn){\n                \n                this.loadBoard();\n            }\n        });\n    }\n\n    \n\n    loadBoard(){\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv=res.data.board;\n            console.log(bv);\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if(res.data.board[i][j]===null){\n                        bv[i][j]={\n                            symbol: \"\",\n                            owner: \"\",\n                            possibleMoves: []};\n                    } else {\n                        bv[i][j]={\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves};\n                    }\n                }\n            }\n            this.setState({ boardData:res.data,boardView:bv,width:bv[0].length,height:bv.length});\n\n        });\n    }\n\n    selectField(x,y){\n        const {boardView,selectedField,me,turn,possibleMoves} =this.state;\n        const isPlayerTurn = me === turn;\n        console.log(me,\"=?\",turn);\n        const isEmptyField = boardView[y][x].symbol===\"\";\n        const sthSelected = JSON.stringify(selectedField)!==\"{}\";\n\n        if(sthSelected){\n            const isAlreadySelected = selectedField.x===x && selectedField.y===y;\n            const isPossibleMove = possibleMoves.some(move => move.x === x && move.y===y);\n            const isOwnSelected = me==boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if(isAlreadySelected){\n                // unselect\n                this.setState({possibleMoves:[],\n                selectedField:{}});\n            } else if(isOwnSelected && isPossibleMove && isPlayerTurn){\n                // move\n                const draw = {fromPos:{x:selectedField.x,y:selectedField.y},toPos:{x:x,y:y}}\n                this.play(draw);\n            } else if(isEmptyField){\n                // unselect\n                this.setState({possibleMoves:[],\n                selectedField:{}});\n            } else {\n                // select new position\n                this.setState({possibleMoves:boardView[y][x].possibleMoves,\n                selectedField:{x:x,y:y}});\n            }\n        } else {\n            if(!isEmptyField){\n                // select new position\n                console.log(\"newPos2\");\n                this.setState({possibleMoves:boardView[y][x].possibleMoves,\n                    selectedField:{x:x,y:y}});\n            }\n        }\n    }\n\n    play(draw){\n        const {gameId,turn} = this.state;\n        mainService.play(gameId,draw).then((res) => {\n            console.log(\"played\",turn);\n            const nextTurn = (turn===\"Player1\")?\"Player2\":\"Player1\";\n            this.setState({possibleMoves:[],\n                selectedField:{},\n                turn:nextTurn});\n                \n                this.loadGameData();\n            this.loadBoard();\n        });\n    }\n\n\n\n\n    clickOnCanvas(event){\n        const {squareSize,boardTopy,boardTopx} = this.state;\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left-boardTopx;\n        const y = event.clientY - rect.top- boardTopy;\n        //console.log(\"x: \" + x + \" y: \" + y);\n        this.selectField((x - x % squareSize)/(squareSize),(y - y % squareSize)/(squareSize));\n    }\n\n    drawMethod(){\n        const {width,height,squareSize,boardView,possibleMoves,boardTopy,boardTopx,selectedField,me} = this.state;\n        var ctx = null;\n\n        const draw = (ctx, frameCount) => {\n\n        if(boardView){\n    \n            ctx.canvas.width=squareSize*(width+1)\n            ctx.canvas.height=squareSize*(height+1)\n\n            //draw board\n            for(let i=0; i<width; i++) {\n              for(let j=0; j<height; j++) {\n                ctx.fillStyle = ((i+j)%2==0) ? \"lightgray\":\"gray\";\n                let xOffset = boardTopx + j*squareSize;\n                let yOffset = boardTopy + i*squareSize;\n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n//                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n              }\n            }\n            if(JSON.stringify(selectedField)!==\"{}\"){\n            // draw moves\n            ctx.globalAlpha = 0.45;\n            ctx.fillStyle=(me===boardView[selectedField.y][selectedField.x].owner)?\"lightgreen\":\"red\";\n            for(let k=0; k<possibleMoves.length; k++) {\n                let xOffset = boardTopx + possibleMoves[k].x*squareSize;\n                let yOffset = boardTopy + possibleMoves[k].y*squareSize;\n                \n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n            }\n\n            //draw selected\n            ctx.fillStyle=(me===boardView[selectedField.y][selectedField.x].owner)?\"green\":\"darkred\";\n            ctx.fillRect(boardTopx + selectedField.x*squareSize, boardTopy + selectedField.y*squareSize, squareSize, squareSize);\n            ctx.globalAlpha = 1;\n        }\n\n            // draw pieces\n            if(boardView[0]){\n            ctx.fillStyle = \"black\";\n            ctx.font = \"20px Arial\";\n            for(let i=0; i<width; i++) {\n                for(let j=0; j<height; j++) {\n                    if(boardView[j][i].symbol!==\"\"){\n                        let symbol = (boardView[j][i].owner===\"Player1\")?\"♖\":\"♜\";\n                        let xOffset = boardTopx + (i+0.12)*squareSize;\n                        let yOffset = boardTopy + (j+0.8)*squareSize;\n                        ctx.fillText(symbol,xOffset,yOffset);\n                    }\n                }\n            }\n        }\n\n            // draw the border around the chessboard\n            ctx.strokeStyle = \"black\";\n            ctx.strokeRect(boardTopx, boardTopy, squareSize*width, squareSize*height)\n    \n    }\n    }\n    return draw;\n    }\n\n\n\n\n    \n    render() {\n        const { inviteLink, player1, player2, boardView,selectedField ,turn,round} = this.state;\n        var piece= \"\";\n        if(boardView[0] && selectedField.x){\n            piece = boardView[selectedField.y][selectedField.x];\n            //console.log(piece);\n        }\n\n        // TODO: aufteilen in GameData und PieceData ?\n\n        return (\n            <div>\n                {inviteLink}\n                <div>\n                here is the Game: Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>}{\" next:\"}{turn} {\" round:\"}{round}\n                </div>\n            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n           {/* <div>{piece.symbol} {\" \"}{piece.owner}</div>*/}\n            </div>\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}