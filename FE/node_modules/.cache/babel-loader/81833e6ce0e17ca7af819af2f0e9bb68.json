{"ast":null,"code":"import Config from \"./config.json\";\n\nclass PieceCard {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n    this.canvas.width = Config.card.width;\n    this.canvas.height = Config.card.height;\n  }\n\n  drawCanvas(piece, pieceImage) {\n    const actionsSize = Config.card.actionsSize;\n    const actionsOffsetX = Config.card.actionsOffsetX;\n    const actionsOffsetY = Config.card.actionsOffsetY;\n    var ctx = this.ctx;\n\n    if (piece.actions !== undefined) {\n      ctx.canvas.width = Config.card.width;\n      ctx.canvas.height = Config.card.height;\n      ctx.drawImage(pieceImage, 32, 10);\n      const actions = piece.actionMap.actions;\n      console.log(actions); // draw actions\n\n      console.log(Config.actionsSize);\n\n      for (var i = 0; i < actions.length; i++) {\n        for (var j = 0; j < actions[0].length; j++) {\n          if (actions[i][j] !== \"-\") {\n            if (actions[i][j] === \"P\") {\n              console.log(\"draw\");\n              ctx.fillStyle = \"#11AA11\";\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            } else if (actions[i][j] === \"E\") {\n              ctx.fillStyle = \"#BB1111\";\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            } else if (actions[i][j] === \"F\") {\n              ctx.fillStyle = \"#1111BB\";\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            } else {\n              ctx.fillStyle = \"#666666\";\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            }\n          }\n        }\n      }\n\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = \"#AAAAAA\";\n\n      for (i = 0; i < actions.length + 1; i++) {\n        //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n        //console.log(i);\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n        ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + actions.length * actionsSize);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n        ctx.lineTo(actionsOffsetX + actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n        ctx.stroke();\n      }\n    }\n  }\n\n  drawPieceCard(piece, pieceImage) {\n    this.drawCanvas(piece, pieceImage);\n    return this.canvas;\n  }\n\n}\n\nexport default PieceCard;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/piece-card.jsx"],"names":["Config","PieceCard","constructor","canvas","document","createElement","ctx","getContext","width","card","height","drawCanvas","piece","pieceImage","actionsSize","actionsOffsetX","actionsOffsetY","actions","undefined","drawImage","actionMap","console","log","i","length","j","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","drawPieceCard"],"mappings":"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","sourcesContent":["import Config from \"./config.json\";\n\nclass PieceCard {\n\n    constructor() {\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = Config.card.width;\n        this.canvas.height = Config.card.height;\n    }\n\n    drawCanvas(piece, pieceImage) {\n        const actionsSize = Config.card.actionsSize;\n        const actionsOffsetX = Config.card.actionsOffsetX;\n        const actionsOffsetY = Config.card.actionsOffsetY;\n        var ctx = this.ctx;\n\n        if (piece.actions !== undefined) {\n            ctx.canvas.width = Config.card.width;\n            ctx.canvas.height = Config.card.height;\n\n            ctx.drawImage(pieceImage, 32, 10);\n            const actions = piece.actionMap.actions;\n            console.log(actions);\n            // draw actions\n            console.log(Config.actionsSize);\n            for (var i = 0; i < actions.length; i++) {\n                for (var j = 0; j < actions[0].length; j++) {\n                    if (actions[i][j] !== \"-\") {\n                        if (actions[i][j] === \"P\") {\n                            console.log(\"draw\")\n                            ctx.fillStyle = \"#11AA11\";\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        } else if (actions[i][j] === \"E\") {\n                            ctx.fillStyle = \"#BB1111\";\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        } else if (actions[i][j] === \"F\") {\n                            ctx.fillStyle = \"#1111BB\";\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        } else {\n                            ctx.fillStyle = \"#666666\";\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        }\n                    }\n                }\n            }\n\n            ctx.lineWidth = 0.5;\n            ctx.strokeStyle = \"#AAAAAA\";\n            for (i = 0; i < actions.length + 1; i++) {\n                //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n                //console.log(i);\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (actions.length) * actionsSize);\n                ctx.stroke();\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                ctx.lineTo(actionsOffsetX + (actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                ctx.stroke();\n            }\n        }\n    }\n\n    drawPieceCard(piece, pieceImage) {\n        this.drawCanvas(piece, pieceImage);\n        return (\n            this.canvas\n        );\n    }\n}\n\nexport default PieceCard"]},"metadata":{},"sourceType":"module"}