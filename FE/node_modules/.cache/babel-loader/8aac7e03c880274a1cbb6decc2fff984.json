{"ast":null,"code":"import _classCallCheck from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCardComponent from './piece-card.component';\nimport Config from \"./config.json\";\nimport serverConfig from \"../services/server-config.json\";\n\nvar GameComponent = /*#__PURE__*/function (_Component) {\n  _inherits(GameComponent, _Component);\n\n  function GameComponent(props) {\n    var _this;\n\n    _classCallCheck(this, GameComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GameComponent).call(this, props));\n    _this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://\" + serverConfig.host + \":3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //updater\n      isInited: false,\n      //game consts\n      player1: {},\n      player2: {},\n      width: 16,\n      height: 16,\n      pieces: {},\n      // images of pieces\n      // game state\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      turn: \"undef\",\n      round: 0,\n      winner: null,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      pieceId: \"\"\n    };\n    _this.selectField = _this.selectField.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickOnCanvas = _this.clickOnCanvas.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.drawMethod = _this.drawMethod.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.play = _this.play.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadBoard = _this.loadBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadPieceData = _this.loadPieceData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(GameComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var isInited = this.state.isInited; //Init function \n\n      if (!isInited) {\n        this.loadPieceData();\n      } //start updater\n\n\n      var loadTimer = setInterval(function () {\n        _this2.updateGameData();\n      }, Config.updateInterval);\n    } //check for ugameupdate\n\n  }, {\n    key: \"updateGameData\",\n    value: function updateGameData() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          gameId = _this$state.gameId,\n          turn = _this$state.turn;\n      mainService.getGameData(gameId).then(function (res) {\n        _this3.setState({\n          player1: res.data.player1,\n          player2: res.data.player2,\n          turn: res.data.turn,\n          round: res.data.round,\n          winner: res.data.winner\n        }); //when other player made his turn\n\n\n        if (turn !== res.data.turn) {\n          _this3.loadBoard();\n        } //check game end ?\n\n      });\n    } // initial creating piece graphics\n\n  }, {\n    key: \"loadPieceData\",\n    value: function loadPieceData() {\n      var _this4 = this;\n\n      var gameId = this.state.gameId;\n      mainService.getBoard(gameId).then(function (res) {\n        var bv = _this4.createBoard(res.data.board);\n\n        var pieces = new Map();\n\n        for (var i = 0; i < bv.length; i++) {\n          for (var j = 0; j < bv[0].length; j++) {\n            if (bv[i][j].symbol !== \"\" && pieces.get(bv[i][j].symbol) === undefined) {\n              var pg = new PieceGenerator(Config.squareSize * 0.8, Config.squareSize * 0.95, bv[i][j].symbol);\n              pieces.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n            }\n          }\n        }\n\n        _this4.setState({\n          pieces: pieces,\n          isInited: true,\n          boardView: bv,\n          width: bv[0].length,\n          height: bv.length\n        });\n      });\n    } //update Board\n\n  }, {\n    key: \"loadBoard\",\n    value: function loadBoard() {\n      var _this5 = this;\n\n      var gameId = this.state.gameId;\n      mainService.getBoard(gameId).then(function (res) {\n        var bv = _this5.createBoard(res.data.board);\n\n        _this5.setState({\n          boardData: res.data,\n          boardView: bv,\n          width: bv[0].length,\n          height: bv.length\n        });\n      });\n    } // save Board data\n\n  }, {\n    key: \"createBoard\",\n    value: function createBoard(board) {\n      var bv = board;\n      console.log(bv);\n\n      for (var i = 0; i < bv.length; i++) {\n        for (var j = 0; j < bv[0].length; j++) {\n          if (board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      }\n\n      return bv;\n    }\n  }, {\n    key: \"selectField\",\n    value: function selectField(x, y) {\n      var _this$state2 = this.state,\n          boardView = _this$state2.boardView,\n          selectedField = _this$state2.selectedField,\n          me = _this$state2.me,\n          turn = _this$state2.turn,\n          possibleMoves = _this$state2.possibleMoves;\n      var isPlayerTurn = me === turn;\n      var isEmptyField = boardView[y][x].symbol === \"\";\n      var sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n      if (sthSelected) {\n        var isAlreadySelected = selectedField.x === x && selectedField.y === y;\n        var isPossibleMove = possibleMoves.some(function (move) {\n          return move.x === x && move.y === y;\n        });\n        var isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n        if (isAlreadySelected) {\n          // unselect\n          this.setState({\n            possibleMoves: [],\n            selectedField: {},\n            pieceId: \"\"\n          });\n        } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n          // move\n          var draw = {\n            fromPos: {\n              x: selectedField.x,\n              y: selectedField.y\n            },\n            toPos: {\n              x: x,\n              y: y\n            }\n          };\n          this.play(draw);\n        } else if (isEmptyField) {\n          // unselect\n          this.setState({\n            possibleMoves: [],\n            selectedField: {},\n            pieceId: \"\"\n          });\n        } else {\n          // select new position\n          this.setState({\n            possibleMoves: boardView[y][x].possibleMoves,\n            selectedField: {\n              x: x,\n              y: y\n            },\n            pieceId: boardView[y][x].symbol\n          });\n        }\n      } else {\n        if (!isEmptyField) {\n          // select new position\n          this.setState({\n            possibleMoves: boardView[y][x].possibleMoves,\n            selectedField: {\n              x: x,\n              y: y\n            },\n            pieceId: boardView[y][x].symbol\n          });\n        }\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function play(draw) {\n      var _this6 = this;\n\n      var _this$state3 = this.state,\n          gameId = _this$state3.gameId,\n          turn = _this$state3.turn,\n          winner = _this$state3.winner;\n\n      if (winner === null) {\n        mainService.play(gameId, draw).then(function (res) {\n          //            console.log(\"played\", turn);\n          var nextTurn = turn === \"P1\" ? \"P2\" : \"P1\";\n\n          _this6.setState({\n            possibleMoves: [],\n            selectedField: {},\n            turn: nextTurn\n          });\n\n          _this6.updateGameData();\n\n          _this6.loadBoard();\n        });\n      }\n    }\n  }, {\n    key: \"clickOnCanvas\",\n    value: function clickOnCanvas(event) {\n      var rect = event.target.getBoundingClientRect();\n      var x = event.clientX - rect.left - Config.boardTopx;\n      var y = event.clientY - rect.top - Config.boardTopy;\n      this.selectField((x - x % Config.squareSize) / Config.squareSize, (y - y % Config.squareSize) / Config.squareSize);\n    }\n  }, {\n    key: \"drawMethod\",\n    value: function drawMethod() {\n      var _this$state4 = this.state,\n          width = _this$state4.width,\n          height = _this$state4.height,\n          boardView = _this$state4.boardView,\n          possibleMoves = _this$state4.possibleMoves,\n          selectedField = _this$state4.selectedField,\n          me = _this$state4.me,\n          pieces = _this$state4.pieces,\n          isInited = _this$state4.isInited,\n          winner = _this$state4.winner;\n\n      var draw = function draw(ctx, frameCount) {\n        if (boardView) {\n          var squareSize = Config.squareSize;\n          var boardTopx = Config.boardTopx;\n          var boardTopy = Config.boardTopy;\n          ctx.canvas.width = squareSize * (width + 1);\n          ctx.canvas.height = squareSize * (height + 1); //draw board\n\n          for (var i = 0; i < width; i++) {\n            for (var j = 0; j < height; j++) {\n              ctx.fillStyle = (i + j) % 2 === 0 ? \"#D2B48C\" : \"PeachPuff\";\n              var xOffset = boardTopx + j * squareSize;\n              var yOffset = boardTopy + i * squareSize;\n              ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n            }\n          }\n\n          if (JSON.stringify(selectedField) !== \"{}\") {\n            // draw moves\n            ctx.globalAlpha = 0.45;\n            ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n            for (var k = 0; k < possibleMoves.length; k++) {\n              var _xOffset = boardTopx + possibleMoves[k].x * squareSize;\n\n              var _yOffset = boardTopy + possibleMoves[k].y * squareSize;\n\n              ctx.fillRect(_xOffset, _yOffset, squareSize, squareSize);\n            } //draw selected\n\n\n            ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n            ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n            ctx.globalAlpha = 1;\n          } // draw pieces\n\n\n          if (boardView[0] && isInited) {\n            ctx.fillStyle = \"black\";\n            ctx.font = \"20px Arial\";\n\n            for (var _i = 0; _i < width; _i++) {\n              for (var _j = 0; _j < height; _j++) {\n                if (boardView[_j][_i].symbol !== \"\") {\n                  var _xOffset2 = boardTopx + (_i + 0.115) * squareSize;\n\n                  var _yOffset2 = boardTopy + (_j + 0.05) * squareSize;\n\n                  if (pieces.length !== 0) {\n                    //  console.log(pieces);\n                    ctx.drawImage(pieces.get(boardView[_j][_i].symbol), _xOffset2, _yOffset2);\n                  } //}\n\n                }\n              }\n            }\n          } // draw the border around the chessboard\n\n\n          ctx.strokeStyle = \"black\";\n          ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height); // draw winner\n\n          if (winner !== null) {\n            ctx.fillStyle = \"rgba(100,100,100,0.8)\";\n            ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n            ctx.fillStyle = \"red\";\n            ctx.font = '30px serif';\n            ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n          }\n        }\n      };\n\n      return draw;\n    }\n  }, {\n    key: \"drawGameText\",\n    value: function drawGameText() {\n      var _this$state5 = this.state,\n          me = _this$state5.me,\n          turn = _this$state5.turn;\n\n      if (me === turn) {\n        return \"Your turn!\";\n      }\n\n      return \"Wait for opponents turn...\";\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state6 = this.state,\n          inviteLink = _this$state6.inviteLink,\n          player1 = _this$state6.player1,\n          player2 = _this$state6.player2,\n          round = _this$state6.round,\n          isInited = _this$state6.isInited,\n          winner = _this$state6.winner; // console.log(\"pieceId (game component) :\", this.state.pieceId);\n\n      if (isInited) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 21\n          }\n        }, this.drawGameText(), \" \", \" \", \" \", winner !== null && \"The Winner is\" + winner.name), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          class: \"mb-3 mt-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"card\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 29\n          }\n        }, this.state.pieceId !== \"\" && /*#__PURE__*/React.createElement(PieceCardComponent, {\n          pieceId: this.state.pieceId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 63\n          }\n        }))), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"mb-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Canvas, {\n          draw: this.drawMethod(),\n          onClick: this.clickOnCanvas,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 29\n          }\n        }, inviteLink), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 29\n          }\n        }, \"Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/React.createElement(React.Fragment, null, \"Player2: \", player2.name), \" \", \" round:\", round))));\n      }\n\n      return \"\";\n    }\n  }]);\n\n  return GameComponent;\n}(Component);\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceGenerator","PieceCardComponent","Config","serverConfig","GameComponent","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","host","isInited","player1","player2","width","height","pieces","boardData","boardView","turn","round","winner","selectedField","possibleMoves","pieceId","selectField","bind","clickOnCanvas","drawMethod","play","loadBoard","loadPieceData","loadTimer","setInterval","updateGameData","updateInterval","getGameData","then","res","setState","data","getBoard","bv","createBoard","board","Map","i","length","j","symbol","get","undefined","pg","squareSize","set","drawPieceCanvas","owner","console","log","x","y","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","boardTopx","clientY","top","boardTopy","ctx","frameCount","canvas","fillStyle","xOffset","yOffset","fillRect","globalAlpha","k","font","drawImage","strokeStyle","strokeRect","fillText","name","drawGameText"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCardComponent from './piece-card.component';\nimport Config from \"./config.json\";\nimport serverConfig from \"../services/server-config.json\";\n\n\nclass GameComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://\" + serverConfig.host + \":3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n\n            //updater\n            isInited: false,\n\n            //game consts\n            player1: {},\n            player2: {},\n            width: 16,\n            height: 16,\n            pieces: {}, // images of pieces\n\n            // game state\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            turn: \"undef\",\n            round: 0,\n            winner: null,\n\n            //selection\n            selectedField: {},\n            possibleMoves: [],\n            pieceId: \"\",\n        }\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n        this.loadBoard = this.loadBoard.bind(this);\n        this.loadPieceData = this.loadPieceData.bind(this);\n\n    }\n\n    componentDidMount() {\n        const { isInited } = this.state;\n\n        //Init function \n        if (!isInited) {\n            this.loadPieceData();\n        }\n\n        //start updater\n        const loadTimer = setInterval(() => {\n            this.updateGameData();\n\n        }, Config.updateInterval);\n    }\n\n    //check for ugameupdate\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n\n\n\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round, winner: res.data.winner });\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard();\n            }\n\n            //check game end ?\n        });\n    }\n\n\n    // initial creating piece graphics\n    loadPieceData() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            var pieces = new Map();\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (bv[i][j].symbol !== \"\" && pieces.get(bv[i][j].symbol) === undefined) {\n                        var pg = new PieceGenerator(Config.squareSize * 0.8, Config.squareSize * 0.95, bv[i][j].symbol);\n                        pieces.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n\n                    }\n                }\n            }\n\n            this.setState({ pieces: pieces, isInited: true, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    //update Board\n    loadBoard() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            this.setState({ boardData: res.data, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n\n    // save Board data\n    createBoard(board) {\n        let bv = board;\n        console.log(bv);\n        for (let i = 0; i < bv.length; i++) {\n            for (let j = 0; j < bv[0].length; j++) {\n                if (board[i][j] === null) {\n                    bv[i][j] = {\n                        symbol: \"\",\n                        owner: \"\",\n                        possibleMoves: []\n                    };\n                } else {\n                    bv[i][j] = {\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves\n                    };\n                }\n            }\n        }\n        return bv;\n    }\n\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, possibleMoves } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y },\n                    pieceId: boardView[y][x].symbol\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y },\n                    pieceId: boardView[y][x].symbol\n                });\n            }\n        }\n    }\n\n    play(draw) {\n        const { gameId, turn, winner } = this.state;\n        if (winner === null) {\n            mainService.play(gameId, draw).then((res) => {\n                //            console.log(\"played\", turn);\n                const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    turn: nextTurn\n                });\n\n                this.updateGameData();\n                this.loadBoard();\n            });\n        }\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - Config.boardTopx;\n        const y = event.clientY - rect.top - Config.boardTopy;\n        this.selectField((x - x % Config.squareSize) / (Config.squareSize), (y - y % Config.squareSize) / (Config.squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, boardView, possibleMoves, selectedField, me, pieces, isInited, winner } = this.state;\n\n\n        const draw = (ctx, frameCount) => {\n            if (boardView) {\n                const squareSize = Config.squareSize;\n                const boardTopx = Config.boardTopx;\n                const boardTopy = Config.boardTopy;\n\n                ctx.canvas.width = squareSize * (width + 1)\n                ctx.canvas.height = squareSize * (height + 1)\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 === 0) ? \"#D2B48C\" : \"PeachPuff\";\n                        let xOffset = boardTopx + j * squareSize;\n                        let yOffset = boardTopy + i * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.45;\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < possibleMoves.length; k++) {\n                        let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0] && isInited) {\n                    ctx.fillStyle = \"black\";\n                    ctx.font = \"20px Arial\";\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + (i + 0.115) * squareSize;\n                                let yOffset = boardTopy + (j + 0.05) * squareSize;\n                                if (pieces.length !== 0) {\n                                    //  console.log(pieces);\n\n                                    ctx.drawImage(pieces.get(boardView[j][i].symbol), xOffset, yOffset);\n                                }\n                                //}\n\n\n                            }\n                        }\n                    }\n                }\n\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n\n                // draw winner\n                if (winner !== null) {\n                    ctx.fillStyle = \"rgba(100,100,100,0.8)\"\n                    ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n                    ctx.fillStyle = \"red\"\n                    ctx.font = '30px serif';\n                    ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n                }\n\n            }\n        }\n        return draw;\n\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2, round, isInited, winner } = this.state;\n        // console.log(\"pieceId (game component) :\", this.state.pieceId);\n        if (isInited) {\n            return (\n                <div>\n                    <div>{this.drawGameText()} {\" \"} {winner !== null && \"The Winner is\" + winner.name}</div>\n                    <div className=\"row\">\n                        <div class=\"mb-3 mt-5\">\n                            <div className=\"card\">\n                                {this.state.pieceId !== \"\" && <PieceCardComponent pieceId={this.state.pieceId}></PieceCardComponent>}\n                            </div>\n                        </div>\n                        <div class=\"mb-5\">\n                            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n\n                            <div>{inviteLink}</div>\n                            <div>\n                                Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>} {\" round:\"}{round}\n                            </div>\n                        </div>\n                    </div >\n                </div>\n            )\n        }\n        return \"\";\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}