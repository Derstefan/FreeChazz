{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-data.component.jsx\";\nimport React, { Component } from 'react';\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\n\nclass PieceDataComponent extends Component {\n  constructor(props) {\n    // var pg = new PieceGenerator(300, 400, \"\" + this.props.match.params.id);\n    var pg = new PieceGenerator(300, 400, \"\" + Math.random());\n    console.log(\"props: \" + this.props);\n    super(props);\n    this.state = {\n      pieceId: this.props.match.params.id,\n      width: 300,\n      height: 400,\n      piece: pg.drawPieceCanvas(\"P1\")\n    };\n  }\n\n  drawMethod() {\n    const {\n      piece,\n      width,\n      height\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      ctx.canvas.width = width;\n      ctx.canvas.height = height;\n      ctx.drawImage(piece, 0, 0);\n    };\n\n    return draw;\n  }\n\n  render() {\n    const {\n      symbol,\n      selected,\n      canMove\n    } = this.props;\n    let style = {};\n    let str = symbol;\n\n    if (selected || canMove) {\n      style = {\n        color: 'green'\n      };\n\n      if (str === \"\") {//   str='X';\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Canvas, {\n      draw: this.drawMethod()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default PieceDataComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-data.component.jsx"],"names":["React","Component","Canvas","PieceGenerator","PieceDataComponent","constructor","props","pg","Math","random","console","log","state","pieceId","match","params","id","width","height","piece","drawPieceCanvas","drawMethod","draw","ctx","frameCount","canvas","drawImage","render","symbol","selected","canMove","style","str","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAEA,MAAMC,kBAAN,SAAiCH,SAAjC,CAA2C;AAEvCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEf;AACA,QAAIC,EAAE,GAAG,IAAIJ,cAAJ,CAAmB,GAAnB,EAAwB,GAAxB,EAA6B,KAAKK,IAAI,CAACC,MAAL,EAAlC,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAY,KAAKL,KAA7B;AACA,UAAMA,KAAN;AAEA,SAAKM,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBC,EADxB;AAETC,MAAAA,KAAK,EAAE,GAFE;AAGTC,MAAAA,MAAM,EAAE,GAHC;AAITC,MAAAA,KAAK,EAAEZ,EAAE,CAACa,eAAH,CAAmB,IAAnB;AAJE,KAAb;AASH;;AAEDC,EAAAA,UAAU,GAAG;AACT,UAAM;AAAEF,MAAAA,KAAF;AAASF,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,QAA2B,KAAKN,KAAtC;;AAEA,UAAMU,IAAI,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAC9BD,MAAAA,GAAG,CAACE,MAAJ,CAAWR,KAAX,GAAmBA,KAAnB;AACAM,MAAAA,GAAG,CAACE,MAAJ,CAAWP,MAAX,GAAoBA,MAApB;AACAK,MAAAA,GAAG,CAACG,SAAJ,CAAcP,KAAd,EAAqB,CAArB,EAAwB,CAAxB;AACH,KAJD;;AAKA,WAAOG,IAAP;AACH;;AAGDK,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,QAAgC,KAAKxB,KAA3C;AACA,QAAIyB,KAAK,GAAG,EAAZ;AACA,QAAIC,GAAG,GAAGJ,MAAV;;AACA,QAAKC,QAAQ,IAAIC,OAAjB,EAA2B;AACvBC,MAAAA,KAAK,GAAG;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAR;;AACA,UAAID,GAAG,KAAK,EAAZ,EAAgB,CACZ;AACH;AACJ;;AACD,wBAAQ,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAE,KAAKX,UAAL;AAAd;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;;AA3CsC;;AA8C3C,eAAejB,kBAAf","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\n\nclass PieceDataComponent extends Component {\n\n    constructor(props) {\n\n        // var pg = new PieceGenerator(300, 400, \"\" + this.props.match.params.id);\n        var pg = new PieceGenerator(300, 400, \"\" + Math.random());\n        console.log(\"props: \" + this.props);\n        super(props);\n\n        this.state = {\n            pieceId: this.props.match.params.id,\n            width: 300,\n            height: 400,\n            piece: pg.drawPieceCanvas(\"P1\")\n        }\n\n\n\n    }\n\n    drawMethod() {\n        const { piece, width, height } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            ctx.drawImage(piece, 0, 0);\n        }\n        return draw;\n    }\n\n\n    render() {\n        const { symbol, selected, canMove } = this.props;\n        let style = {};\n        let str = symbol\n        if ((selected || canMove)) {\n            style = { color: 'green' };\n            if (str === \"\") {\n                //   str='X';\n            }\n        }\n        return (<Canvas draw={this.drawMethod()} />);\n    }\n}\n\nexport default PieceDataComponent"]},"metadata":{},"sourceType":"module"}