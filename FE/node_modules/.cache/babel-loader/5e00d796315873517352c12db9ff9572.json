{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-card.component.jsx\";\nimport React, { Component } from 'react';\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\nclass PieceCardComponent extends Component {\n  constructor(props) {\n    super(props);\n    var pg = new PieceGenerator(120, 140, \"\" + this.props.id); //console.log(\"id: \", this.props.match.params.id);\n\n    this.state = {\n      pieceId: this.props.id,\n      width: 600,\n      height: 400,\n      pieceImage: pg.drawPieceCanvas(\"P1\"),\n      piece: {},\n      //consts\n      actionsSize: 7,\n      actionsOffsetX: 20,\n      actionsOffsetY: 20\n    };\n  }\n\n  componentDidMount() {\n    mainService.pieceData(this.props.id).then(res => {\n      this.setState({\n        piece: res.data\n      });\n      console.log(res.data);\n    });\n  }\n\n  drawCanvas() {\n    const {\n      piece,\n      pieceImage,\n      width,\n      height,\n      actionsSize,\n      actionsOffsetX,\n      actionsOffsetY\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      ctx.canvas.width = width;\n      ctx.canvas.height = height;\n\n      if (piece.moves !== undefined) {\n        ctx.drawImage(pieceImage, 200, 30); // draw actions\n\n        for (var i = 0; i < piece.moves.actions.length; i++) {\n          for (var j = 0; j < piece.moves.actions[0].length; j++) {\n            if (piece.moves.actions[i][j] !== \"-\") {\n              if (piece.moves.actions[i][j] === \"P\") {\n                ctx.fillStyle = \"#11AA11\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              } else {\n                ctx.fillStyle = \"#666666\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              }\n            }\n          }\n        }\n\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = \"#666666\";\n\n        for (var i = 0; i < piece.moves.actions.length + 1; i++) {\n          //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.moves.actions.length + 1 * actionsSize);\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n          ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + piece.moves.actions.length * actionsSize);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n          ctx.lineTo(actionsOffsetX + piece.moves.actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n          ctx.stroke();\n        }\n      }\n    };\n\n    return draw;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawCanvas()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 22\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default PieceCardComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-card.component.jsx"],"names":["React","Component","Canvas","PieceGenerator","mainService","PieceCardComponent","constructor","props","pg","id","state","pieceId","width","height","pieceImage","drawPieceCanvas","piece","actionsSize","actionsOffsetX","actionsOffsetY","componentDidMount","pieceData","then","res","setState","data","console","log","drawCanvas","draw","ctx","frameCount","canvas","moves","undefined","drawImage","i","actions","length","j","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;AAGA,MAAMC,kBAAN,SAAiCJ,SAAjC,CAA2C;AAEvCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEf,UAAMA,KAAN;AACA,QAAIC,EAAE,GAAG,IAAIL,cAAJ,CAAmB,GAAnB,EAAwB,GAAxB,EAA6B,KAAK,KAAKI,KAAL,CAAWE,EAA7C,CAAT,CAHe,CAIf;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWE,EADX;AAETG,MAAAA,KAAK,EAAE,GAFE;AAGTC,MAAAA,MAAM,EAAE,GAHC;AAITC,MAAAA,UAAU,EAAEN,EAAE,CAACO,eAAH,CAAmB,IAAnB,CAJH;AAKTC,MAAAA,KAAK,EAAE,EALE;AAOT;AACAC,MAAAA,WAAW,EAAE,CARJ;AASTC,MAAAA,cAAc,EAAE,EATP;AAUTC,MAAAA,cAAc,EAAE;AAVP,KAAb;AAcH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBhB,IAAAA,WAAW,CAACiB,SAAZ,CAAsB,KAAKd,KAAL,CAAWE,EAAjC,EAAqCa,IAArC,CAA0CC,GAAG,IAAI;AAC7C,WAAKC,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAEO,GAAG,CAACE;AAAb,OAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACE,IAAhB;AAEH,KAJD;AAMH;;AAODG,EAAAA,UAAU,GAAG;AACT,UAAM;AAAEZ,MAAAA,KAAF;AAASF,MAAAA,UAAT;AAAqBF,MAAAA,KAArB;AAA4BC,MAAAA,MAA5B;AAAoCI,MAAAA,WAApC;AAAiDC,MAAAA,cAAjD;AAAiEC,MAAAA;AAAjE,QAAoF,KAAKT,KAA/F;;AAEA,UAAMmB,IAAI,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAC9BD,MAAAA,GAAG,CAACE,MAAJ,CAAWpB,KAAX,GAAmBA,KAAnB;AACAkB,MAAAA,GAAG,CAACE,MAAJ,CAAWnB,MAAX,GAAoBA,MAApB;;AACA,UAAIG,KAAK,CAACiB,KAAN,KAAgBC,SAApB,EAA+B;AAC3BJ,QAAAA,GAAG,CAACK,SAAJ,CAAcrB,UAAd,EAA0B,GAA1B,EAA+B,EAA/B,EAD2B,CAM3B;;AAEA,aAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,KAAK,CAACiB,KAAN,CAAYI,OAAZ,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACjD,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,KAAK,CAACiB,KAAN,CAAYI,OAAZ,CAAoB,CAApB,EAAuBC,MAA3C,EAAmDC,CAAC,EAApD,EAAwD;AACpD,gBAAIvB,KAAK,CAACiB,KAAN,CAAYI,OAAZ,CAAoBD,CAApB,EAAuBG,CAAvB,MAA8B,GAAlC,EAAuC;AACnC,kBAAIvB,KAAK,CAACiB,KAAN,CAAYI,OAAZ,CAAoBD,CAApB,EAAuBG,CAAvB,MAA8B,GAAlC,EAAuC;AACnCT,gBAAAA,GAAG,CAACU,SAAJ,GAAgB,SAAhB;AACAV,gBAAAA,GAAG,CAACW,QAAJ,CAAavB,cAAc,GAAGkB,CAAC,GAAGnB,WAAlC,EAA+CE,cAAc,GAAGoB,CAAC,GAAGtB,WAApE,EAAiFA,WAAjF,EAA8FA,WAA9F;AACH,eAHD,MAGO;AACHa,gBAAAA,GAAG,CAACU,SAAJ,GAAgB,SAAhB;AACAV,gBAAAA,GAAG,CAACW,QAAJ,CAAavB,cAAc,GAAGkB,CAAC,GAAGnB,WAAlC,EAA+CE,cAAc,GAAGoB,CAAC,GAAGtB,WAApE,EAAiFA,WAAjF,EAA8FA,WAA9F;AACH;AACJ;AACJ;AACJ;;AAEDa,QAAAA,GAAG,CAACY,SAAJ,GAAgB,GAAhB;AACAZ,QAAAA,GAAG,CAACa,WAAJ,GAAkB,SAAlB;;AACA,aAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,KAAK,CAACiB,KAAN,CAAYI,OAAZ,CAAoBC,MAApB,GAA6B,CAAjD,EAAoDF,CAAC,EAArD,EAAyD;AACrD;AAGAN,UAAAA,GAAG,CAACc,SAAJ;AACAd,UAAAA,GAAG,CAACe,MAAJ,CAAW3B,cAAc,GAAGkB,CAAC,GAAGnB,WAAhC,EAA6CE,cAA7C;AACAW,UAAAA,GAAG,CAACgB,MAAJ,CAAW5B,cAAc,GAAGkB,CAAC,GAAGnB,WAAhC,EAA6CE,cAAc,GAAIH,KAAK,CAACiB,KAAN,CAAYI,OAAZ,CAAoBC,MAArB,GAA+BrB,WAA7F;AACAa,UAAAA,GAAG,CAACiB,MAAJ;AAEAjB,UAAAA,GAAG,CAACc,SAAJ;AACAd,UAAAA,GAAG,CAACe,MAAJ,CAAW3B,cAAX,EAA2BC,cAAc,GAAGiB,CAAC,GAAGnB,WAAhD;AACAa,UAAAA,GAAG,CAACgB,MAAJ,CAAW5B,cAAc,GAAIF,KAAK,CAACiB,KAAN,CAAYI,OAAZ,CAAoBC,MAArB,GAA+BrB,WAA3D,EAAwEE,cAAc,GAAGiB,CAAC,GAAGnB,WAA7F;AACAa,UAAAA,GAAG,CAACiB,MAAJ;AAEH;AACJ;AAKJ,KA/CD;;AAgDA,WAAOlB,IAAP;AACH;;AAKDmB,EAAAA,MAAM,GAAG;AACL,wBAAQ;AAAA,8BAAK,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,KAAKpB,UAAL;AAAd;AAAA;AAAA;AAAA;AAAA,cAAL;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;;AAhGsC;;AAmG3C,eAAevB,kBAAf","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\n\nclass PieceCardComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        var pg = new PieceGenerator(120, 140, \"\" + this.props.id);\n        //console.log(\"id: \", this.props.match.params.id);\n        this.state = {\n            pieceId: this.props.id,\n            width: 600,\n            height: 400,\n            pieceImage: pg.drawPieceCanvas(\"P1\"),\n            piece: {},\n\n            //consts\n            actionsSize: 7,\n            actionsOffsetX: 20,\n            actionsOffsetY: 20\n\n        }\n\n    }\n\n    componentDidMount() {\n        mainService.pieceData(this.props.id).then(res => {\n            this.setState({ piece: res.data });\n            console.log(res.data);\n\n        }\n        );\n    }\n\n\n\n\n\n\n    drawCanvas() {\n        const { piece, pieceImage, width, height, actionsSize, actionsOffsetX, actionsOffsetY } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            if (piece.moves !== undefined) {\n                ctx.drawImage(pieceImage, 200, 30);\n\n\n\n\n                // draw actions\n\n                for (var i = 0; i < piece.moves.actions.length; i++) {\n                    for (var j = 0; j < piece.moves.actions[0].length; j++) {\n                        if (piece.moves.actions[i][j] !== \"-\") {\n                            if (piece.moves.actions[i][j] === \"P\") {\n                                ctx.fillStyle = \"#11AA11\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            } else {\n                                ctx.fillStyle = \"#666666\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            }\n                        }\n                    }\n                }\n\n                ctx.lineWidth = 0.5;\n                ctx.strokeStyle = \"#666666\";\n                for (var i = 0; i < piece.moves.actions.length + 1; i++) {\n                    //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.moves.actions.length + 1 * actionsSize);\n\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                    ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.moves.actions.length) * actionsSize);\n                    ctx.stroke();\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                    ctx.lineTo(actionsOffsetX + (piece.moves.actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                    ctx.stroke();\n\n                }\n            }\n\n\n\n\n        }\n        return draw;\n    }\n\n\n\n\n    render() {\n        return (<div><Canvas draw={this.drawCanvas()} /> </div>);\n    }\n}\n\nexport default PieceCardComponent"]},"metadata":{},"sourceType":"module"}