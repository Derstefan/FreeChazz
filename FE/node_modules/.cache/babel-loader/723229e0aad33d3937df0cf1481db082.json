{"ast":null,"code":"import { Component } from 'react';\nimport RandomGenerator from '../random-generator';\nimport UtilFunctions from '../util-functions';\n/**\n * Piece Generator for black and white design as silhouettes\n */\n\nclass ChessPieceGenerator extends Component {\n  constructor(width, height, seedstr) {\n    super();\n    this.gen = new RandomGenerator(seedstr);\n    this.width = width;\n    this.height = height;\n    this.canvas2 = document.createElement('canvas');\n    this.c2 = this.canvas2.getContext('2d');\n    this.canvas2.width = width;\n    this.canvas2.height = height;\n  }\n\n  randomColor() {\n    var r = Math.floor(this.gen.random() * 230).toString(16);\n    var g = Math.floor(this.gen.random() * 230).toString(16);\n    var b = Math.floor(this.gen.random() * 230).toString(16);\n    return \"#\" + r + g + b;\n  }\n\n  randomPointsLeft(num) {\n    var points = [];\n    var ys = [];\n\n    for (var i = 0; i < num; i++) {\n      var y = this.gen.randNumOfRange(0, this.height);\n      ys.push(y);\n    }\n\n    ys.sort();\n\n    for (var i = 0; i < num; i++) {\n      var x = this.gen.randNumOfRange(0, this.width / 2);\n      points[i].x = x;\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n\n    console.log(points);\n    return points;\n  }\n\n  drawSilhouette(points) {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPointsLeft(pointNumber);\n    var color = this.randomColor();\n    this.c2.fillStyle = color;\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else if (i % 2 === 0) {\n        shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y);\n      }\n    } // for (var i = points.length - 1; i > 0; i--) {\n    //     if (i === points.length - 1) {\n    //         shape.moveTo(points[i].x, points[i].y);\n    //     } else if (i % 2 === 0) {\n    //         shape.quadraticCurveTo(points[i + 1].x + this.width / 2, points[i + 1].y, points[i].x + this.width / 2, points[i].y)\n    //     }\n    // }\n\n\n    this.c2.fill(shape);\n  }\n\n  drawSilhouettes(num) {\n    return [...Array(num).keys()].map(() => this.drawSilhouette());\n  }\n\n  drawPieceCanvas(owner) {\n    if (owner == \"P1\") {\n      this.drawSilhouette();\n    } else {\n      this.drawSilhouette();\n    } // this.drawMirroredPolygon();\n    // this.drawMirroredPolygonColorDiff();\n    // this.drawMirroredPolygon();\n    // //this.drawMirroredPolygon();\n    // //        this.drawMirroredPolygonColorDiff();\n    // //this.drawMirroredPolygon();\n    // this.drawMirroredPolygon();\n\n\n    return this.canvas2;\n  }\n\n}\n\nexport default ChessPieceGenerator;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/silhouettes/chess-piece-generator.jsx"],"names":["Component","RandomGenerator","UtilFunctions","ChessPieceGenerator","constructor","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","randomColor","r","Math","floor","random","toString","g","b","randomPointsLeft","num","points","ys","i","y","randNumOfRange","push","sort","x","console","log","drawSilhouette","pointNumber","color","fillStyle","shape","Path2D","length","moveTo","quadraticCurveTo","fill","drawSilhouettes","Array","keys","map","drawPieceCanvas","owner"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport RandomGenerator from '../random-generator';\nimport UtilFunctions from '../util-functions';\n\n\n\n/**\n * Piece Generator for black and white design as silhouettes\n */\nclass ChessPieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n    }\n\n\n\n\n    randomColor() {\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPointsLeft(num) {\n        var points = [];\n        var ys = [];\n        for (var i = 0; i < num; i++) {\n            var y = this.gen.randNumOfRange(0, this.height);\n            ys.push(y);\n        }\n        ys.sort();\n\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.width / 2);\n            points[i].x = x;\n            points.push({ x: x, y: y });\n        }\n        console.log(points);\n        return points;\n    }\n\n\n\n\n    drawSilhouette(points) {\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPointsLeft(pointNumber);\n        var color = this.randomColor();\n        this.c2.fillStyle = color;\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        // for (var i = points.length - 1; i > 0; i--) {\n        //     if (i === points.length - 1) {\n        //         shape.moveTo(points[i].x, points[i].y);\n        //     } else if (i % 2 === 0) {\n        //         shape.quadraticCurveTo(points[i + 1].x + this.width / 2, points[i + 1].y, points[i].x + this.width / 2, points[i].y)\n        //     }\n        // }\n        this.c2.fill(shape);\n    }\n\n\n\n    drawSilhouettes(num) {\n        return [...Array(num).keys()].map(() => this.drawSilhouette());\n    }\n\n\n\n    drawPieceCanvas(owner) {\n        if (owner == \"P1\") {\n            this.drawSilhouette();\n        } else {\n            this.drawSilhouette();\n        }\n\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // //this.drawMirroredPolygon();\n        // //        this.drawMirroredPolygonColorDiff();\n        // //this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default ChessPieceGenerator"]},"metadata":{},"sourceType":"module"}