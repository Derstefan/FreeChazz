{"ast":null,"code":"import React, { Component } from 'react';\nimport RandomGenerator from './random-generator';\n\nclass UtilFunctions extends Component {\n  static polygonArea(points) {\n    if (points === undefined) {\n      return 0.0;\n    }\n\n    const num = points.length;\n\n    if (num < 3) {\n      return 0.0;\n    }\n\n    var area = 0.0;\n\n    for (var i = 0; i < num; i++) {\n      var x = points[i].x;\n      var y = points[i].y;\n      area += (points[i].y + points[(i + 1) % num].y) * (points[i].x - points[(i + 1) % num].x);\n    }\n\n    return Math.abs(area / 2.0);\n  }\n\n}\n\nexport default UtilFunctions;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/util-functions.jsx"],"names":["React","Component","RandomGenerator","UtilFunctions","polygonArea","points","undefined","num","length","area","i","x","y","Math","abs"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AAElC,SAAOG,WAAP,CAAmBC,MAAnB,EAA2B;AACvB,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AACtB,aAAO,GAAP;AACH;;AACD,UAAMC,GAAG,GAAGF,MAAM,CAACG,MAAnB;;AACA,QAAID,GAAG,GAAG,CAAV,EAAa;AACT,aAAO,GAAP;AACH;;AACD,QAAIE,IAAI,GAAG,GAAX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC1B,UAAIC,CAAC,GAAGN,MAAM,CAACK,CAAD,CAAN,CAAUC,CAAlB;AACA,UAAIC,CAAC,GAAGP,MAAM,CAACK,CAAD,CAAN,CAAUE,CAAlB;AACAH,MAAAA,IAAI,IAAI,CAACJ,MAAM,CAACK,CAAD,CAAN,CAAUE,CAAV,GAAcP,MAAM,CAAC,CAACK,CAAC,GAAG,CAAL,IAAUH,GAAX,CAAN,CAAsBK,CAArC,KAA2CP,MAAM,CAACK,CAAD,CAAN,CAAUC,CAAV,GAAcN,MAAM,CAAC,CAACK,CAAC,GAAG,CAAL,IAAUH,GAAX,CAAN,CAAsBI,CAA/E,CAAR;AACH;;AACD,WAAOE,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,GAAhB,CAAP;AACH;;AAlBiC;;AAwBtC,eAAeN,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport RandomGenerator from './random-generator';\n\nclass UtilFunctions extends Component {\n\n    static polygonArea(points) {\n        if (points === undefined) {\n            return 0.0;\n        }\n        const num = points.length;\n        if (num < 3) {\n            return 0.0;\n        }\n        var area = 0.0;\n\n        for (var i = 0; i < num; i++) {\n            var x = points[i].x;\n            var y = points[i].y;\n            area += (points[i].y + points[(i + 1) % num].y) * (points[i].x - points[(i + 1) % num].x);\n        }\n        return Math.abs(area / 2.0);\n    }\n\n\n\n}\n\nexport default UtilFunctions"]},"metadata":{},"sourceType":"module"}