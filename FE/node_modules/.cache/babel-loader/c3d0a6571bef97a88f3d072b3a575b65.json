{"ast":null,"code":"import React, { Component } from 'react';\nimport RandomGenerator from './random-generator';\n\nclass PieceGenerator extends Component {\n  constructor(width, height, seedstr) {\n    super();\n    this.gen = new RandomGenerator(seedstr);\n    this.width = width;\n    this.height = height;\n    this.canvas2 = document.createElement('canvas');\n    this.c2 = this.canvas2.getContext('2d');\n    this.canvas2.width = width;\n    this.canvas2.height = height;\n  }\n\n  drawPolygonCanvas() {\n    // TODO:     var shape1 = new Path2D();\n    // circle.arc(100, 35, 25, 0, 2 * Math.PI);\n    // ctx.stroke(rectangle);\n    // ctx.fill(circle);\n    var pointNumber = this.gen.randNumOfRange(3, 10); //console.log(\"pointNumber=\" + pointNumber)\n\n    var r = Math.floor(this.gen.random() * 255).toString(16);\n    var g = Math.floor(this.gen.random() * 255).toString(16);\n    var b = Math.floor(this.gen.random() * 255).toString(16);\n    var color = \"#\" + r + g + b; // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n    // 16 777 216\n\n    console.log(color);\n    var points = [];\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.gen.randNumOfRange(0, this.width);\n      var y = this.gen.randNumOfRange(0, this.height);\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n\n    this.c2.fill(drawShape(points, color)); //ctx.fill(circle);\n\n    this.c2.fillStyle = color;\n    this.c2.beginPath();\n\n    for (var j = 0; j < points.length; j++) {\n      var x2 = this.width - points[j].x;\n\n      if (j === 0) {\n        this.c2.moveTo(x2, points[j].y);\n      } else {\n        this.c2.lineTo(x2, points[j].y);\n      }\n    }\n\n    this.c2.closePath();\n    this.c2.fill();\n  }\n\n  drawShape(points, color) {\n    // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else {\n        shape.lineTo(points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawPieceCanvas(owner) {\n    this.drawPolygonCanvas();\n    this.drawPolygonCanvas();\n    this.drawPolygonCanvas();\n    this.drawPolygonCanvas();\n    return this.canvas2;\n  }\n\n}\n\nexport default PieceGenerator;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.jsx"],"names":["React","Component","RandomGenerator","PieceGenerator","constructor","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","drawPolygonCanvas","pointNumber","randNumOfRange","r","Math","floor","random","toString","g","b","color","console","log","points","i","x","y","push","fill","drawShape","fillStyle","beginPath","j","length","x2","moveTo","lineTo","closePath","shape","Path2D","drawPieceCanvas","owner"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport RandomGenerator from './random-generator';\n\nclass PieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n    }\n\n\n\n    drawPolygonCanvas() {\n\n        // TODO:     var shape1 = new Path2D();\n        // circle.arc(100, 35, 25, 0, 2 * Math.PI);\n\n        // ctx.stroke(rectangle);\n        // ctx.fill(circle);\n\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        //console.log(\"pointNumber=\" + pointNumber)\n        var r = Math.floor(this.gen.random() * 255).toString(16);\n        var g = Math.floor(this.gen.random() * 255).toString(16);\n        var b = Math.floor(this.gen.random() * 255).toString(16);\n        var color = \"#\" + r + g + b;\n\n\n        // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n        // 16 777 216\n        console.log(color);\n\n        var points = [];\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n\n\n\n        this.c2.fill(drawShape(points, color));\n        //ctx.fill(circle);\n\n        this.c2.fillStyle = color;\n        this.c2.beginPath();\n\n        for (var j = 0; j < points.length; j++) {\n            var x2 = this.width - points[j].x;\n            if (j === 0) {\n                this.c2.moveTo(x2, points[j].y);\n            } else {\n                this.c2.lineTo(x2, points[j].y);\n            }\n        }\n        this.c2.closePath();\n        this.c2.fill();\n    }\n\n\n    drawShape(points, color) {\n\n\n\n        // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n        }\n\n        return shape;\n    }\n\n\n\n\n    drawPieceCanvas(owner) {\n\n\n        this.drawPolygonCanvas();\n        this.drawPolygonCanvas();\n        this.drawPolygonCanvas();\n        this.drawPolygonCanvas();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGenerator"]},"metadata":{},"sourceType":"module"}