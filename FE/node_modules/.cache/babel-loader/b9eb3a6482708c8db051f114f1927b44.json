{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-data.component.jsx\";\nimport React, { Component } from 'react';\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\nclass PieceDataComponent extends Component {\n  constructor(props) {\n    super(props);\n    var pg = new PieceGenerator(120, 140, \"\" + this.props.match.params.id); //console.log(\"id: \", this.props.match.params.id);\n\n    this.state = {\n      pieceId: this.props.match.params.id,\n      width: 600,\n      height: 400,\n      pieceImage: pg.drawPieceCanvas(\"P1\"),\n      piece: {},\n      //consts\n      actionsSize: 7,\n      actionsOffsetX: 20,\n      actionsOffsetY: 20\n    };\n  }\n\n  componentDidMount() {\n    mainService.pieceData(this.props.match.params.id).then(res => {\n      this.setState({\n        piece: res.data\n      });\n      console.log(res.data);\n    });\n  }\n\n  drawCanvas() {\n    const {\n      piece,\n      pieceImage,\n      width,\n      height,\n      actionsSize,\n      actionsOffsetX,\n      actionsOffsetY\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      ctx.canvas.width = width;\n      ctx.canvas.height = height;\n      ctx.drawImage(pieceImage, 200, 30); // draw actions\n\n      if (piece.moves !== undefined) {\n        for (var i = 0; i < piece.moves.actions.length; i++) {\n          for (var j = 0; j < piece.moves.actions[0].length; j++) {\n            if (piece.moves.actions[i][j] !== \"-\") {\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            }\n          }\n        }\n\n        for (var i = 0; i < piece.moves.actions.length + 1; i++) {\n          //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.moves.actions.length + 1 * actionsSize);\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n          ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.moves.actions.length + 1) * actionsSize);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n          ctx.lineTo(actionsOffsetX, actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.moves.actions.length + 1) * actionsSize);\n          ctx.stroke();\n        }\n      }\n    };\n\n    return draw;\n  }\n\n  render() {\n    const {\n      symbol,\n      selected,\n      canMove\n    } = this.props;\n    let style = {};\n    let str = symbol;\n\n    if (selected || canMove) {\n      style = {\n        color: 'green'\n      };\n\n      if (str === \"\") {//   str='X';\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawCanvas()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default PieceDataComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-data.component.jsx"],"names":["React","Component","Canvas","PieceGenerator","mainService","PieceDataComponent","constructor","props","pg","match","params","id","state","pieceId","width","height","pieceImage","drawPieceCanvas","piece","actionsSize","actionsOffsetX","actionsOffsetY","componentDidMount","pieceData","then","res","setState","data","console","log","drawCanvas","draw","ctx","frameCount","canvas","drawImage","moves","undefined","i","actions","length","j","fillRect","beginPath","moveTo","lineTo","stroke","render","symbol","selected","canMove","style","str","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\nclass PieceDataComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        var pg = new PieceGenerator(120, 140, \"\" + this.props.match.params.id);\n        //console.log(\"id: \", this.props.match.params.id);\n        this.state = {\n            pieceId: this.props.match.params.id,\n            width: 600,\n            height: 400,\n            pieceImage: pg.drawPieceCanvas(\"P1\"),\n            piece: {},\n\n            //consts\n            actionsSize: 7,\n            actionsOffsetX: 20,\n            actionsOffsetY: 20\n\n        }\n\n    }\n\n    componentDidMount() {\n        mainService.pieceData(this.props.match.params.id).then(res => {\n            this.setState({ piece: res.data });\n            console.log(res.data);\n\n        }\n        );\n    }\n\n\n\n\n\n\n    drawCanvas() {\n        const { piece, pieceImage, width, height, actionsSize, actionsOffsetX, actionsOffsetY } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            ctx.drawImage(pieceImage, 200, 30);\n\n\n\n\n            // draw actions\n            if (piece.moves !== undefined) {\n                for (var i = 0; i < piece.moves.actions.length; i++) {\n                    for (var j = 0; j < piece.moves.actions[0].length; j++) {\n                        if (piece.moves.actions[i][j] !== \"-\") {\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        }\n                    }\n                }\n\n                for (var i = 0; i < piece.moves.actions.length + 1; i++) {\n                    //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.moves.actions.length + 1 * actionsSize);\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                    ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.moves.actions.length + 1) * actionsSize);\n                    ctx.stroke();\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                    ctx.lineTo(actionsOffsetX, actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.moves.actions.length + 1) * actionsSize);\n                    ctx.stroke();\n\n                }\n            }\n\n\n\n\n        }\n        return draw;\n    }\n\n\n\n\n    render() {\n        const { symbol, selected, canMove } = this.props;\n        let style = {};\n        let str = symbol\n        if ((selected || canMove)) {\n            style = { color: 'green' };\n            if (str === \"\") {\n                //   str='X';\n            }\n        }\n        return (<div><Canvas draw={this.drawCanvas()} /></div>);\n    }\n}\n\nexport default PieceDataComponent"]},"metadata":{},"sourceType":"module"}