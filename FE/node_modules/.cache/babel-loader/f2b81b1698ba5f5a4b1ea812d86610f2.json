{"ast":null,"code":"import React, { Component } from 'react';\nimport RandomGenerator from './random-generator';\n\nclass PieceGenerator extends Component {\n  constructor(width, height, seedstr) {\n    super();\n    this.gen = new RandomGenerator(seedstr);\n    this.width = width;\n    this.height = height;\n    this.canvas2 = document.createElement('canvas');\n    this.c2 = this.canvas2.getContext('2d');\n    this.canvas2.width = width;\n    this.canvas2.height = height;\n  }\n\n  drawMirroredPolygon() {\n    var pointNumber = this.gen.randNumOfRange(3, 10); //console.log(\"pointNumber=\" + pointNumber)\n\n    var r = Math.floor(this.gen.random() * 230).toString(16);\n    var g = Math.floor(this.gen.random() * 230).toString(16);\n    var b = Math.floor(this.gen.random() * 230).toString(16);\n    var color = \"#\" + r + g + b; // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n    // 16 777 216\n\n    console.log(color);\n    var points = [];\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.gen.randNumOfRange(0, this.width);\n      var y = this.gen.randNumOfRange(0, this.height);\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedShape(points));\n    this.c2.fill(this.drawCurvedMirrorShape(points));\n  }\n\n  drawMirroredPolygonColorDiff() {\n    var pointNumber = this.gen.randNumOfRange(3, 10); //console.log(\"pointNumber=\" + pointNumber)\n\n    var r = Math.floor(this.gen.random() * 230).toString(16);\n    var g = Math.floor(this.gen.random() * 230).toString(16);\n    var b = Math.floor(this.gen.random() * 230).toString(16);\n    var color = \"#\" + r + g + b;\n    r = Math.floor(this.gen.random() * 230).toString(16);\n    g = Math.floor(this.gen.random() * 230).toString(16);\n    b = Math.floor(this.gen.random() * 230).toString(16);\n    var color2 = \"#\" + r + g + b; // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n    // 16 777 216\n\n    console.log(color);\n    var points = [];\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.gen.randNumOfRange(0, this.width);\n      var y = this.gen.randNumOfRange(0, this.height);\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedShape(points));\n    this.c2.fillStyle = color2;\n    this.c2.fill(this.drawCurvedMirrorShape(points));\n  } // // just one\n  // drawPolygon() {\n  //     var pointNumber = this.gen.randNumOfRange(3, 10);\n  //     //console.log(\"pointNumber=\" + pointNumber)\n  //     var r = Math.floor(this.gen.random() * 255).toString(16);\n  //     var g = Math.floor(this.gen.random() * 255).toString(16);\n  //     var b = Math.floor(this.gen.random() * 255).toString(16);\n  //     var color = \"#\" + r + g + b;\n  //     // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n  //     // 16 777 216\n  //     console.log(color);\n  //     var points = [];\n  //     for (var i = 0; i < pointNumber; i++) {\n  //         var x = this.gen.randNumOfRange(0, this.width);\n  //         var y = this.gen.randNumOfRange(0, this.height);\n  //         points.push({ x: x, y: y });\n  //     }\n  //     this.c2.fillStyle = color;\n  //     this.c2.fill(this.drawShape(points));\n  // }\n\n\n  drawShape(points) {\n    // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else {\n        //shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n        shape.lineTo(points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawMirrorShape(points) {\n    // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      var x = this.width - points[i].x;\n\n      if (i === 0) {\n        shape.moveTo(x, points[i].y);\n      } else {\n        shape.lineTo(x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawCurvedShape(points) {\n    // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else if (i === 1) {//\n      } else {\n        shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y); //shape.lineTo(points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawCurvedMirrorShape(points) {\n    // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      var x = this.width - points[i].x;\n\n      if (i === 0) {\n        shape.moveTo(x, points[i].y);\n      } else if (i === 1) {//\n      } else {\n        shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawPolygons(num) {\n    return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n  }\n\n  drawPieceCanvas(owner) {\n    this.drawPolygons(this.gen.randNumOfRange(3, 6)); // this.drawMirroredPolygon();\n    // this.drawMirroredPolygonColorDiff();\n    // this.drawMirroredPolygon();\n    // this.drawMirroredPolygon();\n    // this.drawMirroredPolygonColorDiff();\n    // this.drawMirroredPolygon();\n    // this.drawMirroredPolygon();\n\n    return this.canvas2;\n  }\n\n}\n\nexport default PieceGenerator;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.jsx"],"names":["React","Component","RandomGenerator","PieceGenerator","constructor","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","drawMirroredPolygon","pointNumber","randNumOfRange","r","Math","floor","random","toString","g","b","color","console","log","points","i","x","y","push","fillStyle","fill","drawCurvedShape","drawCurvedMirrorShape","drawMirroredPolygonColorDiff","color2","drawShape","shape","Path2D","length","moveTo","lineTo","drawMirrorShape","quadraticCurveTo","drawPolygons","num","Array","keys","map","drawPieceCanvas","owner"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport RandomGenerator from './random-generator';\n\nclass PieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n    }\n\n\n\n    drawMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        //console.log(\"pointNumber=\" + pointNumber)\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        var color = \"#\" + r + g + b;\n\n\n        // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n        // 16 777 216\n        console.log(color);\n\n        var points = [];\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        //console.log(\"pointNumber=\" + pointNumber)\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        var color = \"#\" + r + g + b;\n\n\n        r = Math.floor(this.gen.random() * 230).toString(16);\n        g = Math.floor(this.gen.random() * 230).toString(16);\n        b = Math.floor(this.gen.random() * 230).toString(16);\n        var color2 = \"#\" + r + g + b;\n\n        // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n        // 16 777 216\n        console.log(color);\n\n        var points = [];\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n\n    // // just one\n    // drawPolygon() {\n\n    //     var pointNumber = this.gen.randNumOfRange(3, 10);\n    //     //console.log(\"pointNumber=\" + pointNumber)\n    //     var r = Math.floor(this.gen.random() * 255).toString(16);\n    //     var g = Math.floor(this.gen.random() * 255).toString(16);\n    //     var b = Math.floor(this.gen.random() * 255).toString(16);\n    //     var color = \"#\" + r + g + b;\n\n\n    //     // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n    //     // 16 777 216\n    //     console.log(color);\n\n    //     var points = [];\n    //     for (var i = 0; i < pointNumber; i++) {\n    //         var x = this.gen.randNumOfRange(0, this.width);\n    //         var y = this.gen.randNumOfRange(0, this.height);\n    //         points.push({ x: x, y: y });\n    //     }\n\n\n    //     this.c2.fillStyle = color;\n    //     this.c2.fill(this.drawShape(points));\n\n    // }\n\n\n    drawShape(points) {\n        // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else {\n                //shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n                shape.lineTo(points[i].x, points[i].y);\n            }\n        }\n\n        return shape;\n    }\n\n    drawMirrorShape(points) {\n        // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else {\n                shape.lineTo(x, points[i].y);\n            }\n        }\n\n        return shape;\n    }\n\n    drawCurvedShape(points) {\n        // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i === 1) {\n                //\n            } else {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n                //shape.lineTo(points[i].x, points[i].y);\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedMirrorShape(points) {\n        // ??????????????????????????????????????????? new Path2D(d);    // path from SVG path data\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else if (i === 1) {\n                //\n            } else {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n\n\n\n\n    drawPolygons(num) {\n        return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n    }\n\n\n\n    drawPieceCanvas(owner) {\n\n        this.drawPolygons(this.gen.randNumOfRange(3, 6));\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGenerator"]},"metadata":{},"sourceType":"module"}