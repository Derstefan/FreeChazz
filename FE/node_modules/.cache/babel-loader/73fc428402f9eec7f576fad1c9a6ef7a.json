{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      player1: {},\n      player2: {},\n      width: 16,\n      height: 16,\n      boardData: {},\n      // data from server\n      boardView: [],\n      // symbol, playertype, selected, canMoveTo\n      selectedField: {}\n    };\n    this.loadGameData();\n    this.loadBoard();\n    this.selectField = this.selectField.bind(this);\n  }\n\n  loadGameData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      //console.log(res.data);\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2\n      });\n    });\n  }\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {// // transform boardData to boardView\n      // const width = res.data.width;\n      // const height = res.data.height;\n      // const b = res.data.board;\n      // console.log(\"b:\" ,b);\n      // var bv = this.getEmpyBoard(width,height);\n      // console.log(\"bv:\" ,bv);\n      // for (let i = 0; i < b.length; i++) {\n      //     for (let j = 0; j < b.length; j++) {\n      //         if(b[i][j]!==null){\n      //             bv[i][j].symbol=b[i][j].symbol;\n      //             bv[i][j].owner=b[i][j].owner;\n      //         }\n      //     }\n      // }\n      // this.setState({ board:res.data, boardView:bv });\n    });\n  }\n\n  getEmpyBoard(width, height) {\n    console.log(height);\n    var b2 = new Array(16).fill(new Array(16).fill({}));\n\n    for (let i = 0; i < width; i++) {\n      for (let j = 0; j < height; j++) {\n        b2[i][j] = {}; //console.log(i,\",\",j,\": \",b2[i][j]);\n      }\n    }\n\n    console.log(b2[0][7]);\n    console.log(\"b2\", b2);\n    return b2;\n  }\n\n  renderBoard() {\n    const {\n      width,\n      height\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      class: \"chess-board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [...Array(width).keys()].map(x => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [...Array(height).keys()].map(y => this.renderField(x, y))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 14\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this);\n  }\n\n  renderField(x, y) {\n    const {\n      boardView,\n      selectedField\n    } = this.state;\n    let symbol = \"\";\n    let className = \"dark\";\n    let selected = false;\n    let canMove = false;\n\n    if (JSON.stringify(boardView) !== \"[]\") {\n      if (boardView[x][y] !== JSON.stringify({})) {\n        symbol = boardView[x][y].symbol;\n\n        if (boardView[x][y].canMove) {\n          canMove = boardView[x][y].canMove;\n        }\n      }\n    }\n\n    if ((x + y) % 2 === 0) {\n      className = \"white\";\n    }\n\n    if (selectedField.x === x && selectedField.y === y) {\n      selected = true;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      class: className,\n      onClick: () => this.selectField(x, y),\n      onMouseOver: () => this.mouseOverField(x, y),\n      children: /*#__PURE__*/_jsxDEV(PieceComponent, {\n        symbol: symbol,\n        selected: selected,\n        canMove: canMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 118\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this);\n  }\n\n  selectField(x, y) {\n    const {\n      board\n    } = this.state;\n\n    if (board.board[x][y]) {\n      this.setState({\n        selectedField: {\n          x: x,\n          y: y\n        }\n      });\n      const possibleMoves = board.board[x][y].possibleMoves;\n      let newBoard = board;\n\n      for (let i = 0; i < possibleMoves.length; i++) {\n        if (newBoard.board[possibleMoves[i].x][possibleMoves[i].y] !== null) {\n          newBoard.board[possibleMoves[i].x][possibleMoves[i].y].canMove = true;\n        } else {\n          newBoard.board[possibleMoves[i].x][possibleMoves[i].y] = {\n            canMove: true\n          };\n        }\n      }\n\n      this.setState({\n        board: newBoard\n      });\n    } else {\n      this.setState({\n        selectedField: {}\n      });\n    }\n\n    console.log(board);\n  }\n\n  mouseOverField(x, y) {//    console.log(\"mouseOver:\",x,\",\",y);\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inviteLink, /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), \"here is the Game: Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Player2: \", player2.name]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"centered\",\n          children: this.renderBoard()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx"],"names":["React","Component","mainService","PieceComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","inviteLink","player1","player2","width","height","boardData","boardView","selectedField","loadGameData","loadBoard","selectField","bind","getGameData","then","res","setState","data","getBoard","getEmpyBoard","console","log","b2","Array","fill","i","j","renderBoard","keys","map","x","y","renderField","symbol","className","selected","canMove","stringify","mouseOverField","board","possibleMoves","newBoard","length","render","name","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            player1: {},\n            player2: {},\n            width:16,\n            height:16,\n            boardData: {}, // data from server\n            boardView: [], // symbol, playertype, selected, canMoveTo\n            selectedField:{}\n        }\n        this.loadGameData();\n        this.loadBoard();\n        this.selectField = this.selectField.bind(this);\n    }\n\n    loadGameData() {\n        const { gameId } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            //console.log(res.data);\n            this.setState({ player1: res.data.player1, player2: res.data.player2 });\n        });\n    \n    }\n\n    \n\n    loadBoard(){\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            \n\n            // // transform boardData to boardView\n            // const width = res.data.width;\n            // const height = res.data.height;\n            // const b = res.data.board;\n            // console.log(\"b:\" ,b);\n            // var bv = this.getEmpyBoard(width,height);\n\n            // console.log(\"bv:\" ,bv);\n\n            // for (let i = 0; i < b.length; i++) {\n            //     for (let j = 0; j < b.length; j++) {\n            //         if(b[i][j]!==null){\n            //             bv[i][j].symbol=b[i][j].symbol;\n            //             bv[i][j].owner=b[i][j].owner;\n            //         }\n            //     }\n            // }\n            // this.setState({ board:res.data, boardView:bv });\n        });\n    }\n\n    getEmpyBoard(width,height){\n        console.log(height);\n        var b2 = new Array(16).fill(new Array(16).fill({}));\n            for (let i = 0; i < width; i++) {\n                for (let j = 0; j < height; j++) {\n                    b2[i][j]={};\n                    //console.log(i,\",\",j,\": \",b2[i][j]);\n                }\n            }\n            console.log(b2[0][7]);\n            console.log(\"b2\",b2);\n            return b2;\n    }\n\n    renderBoard() {\n        const {width,height} = this.state;\n\n        return(<table class=\"chess-board\">\n             <tbody>\n            {[...Array(width).keys()].map((x)=>\n            (<tr>\n                {[...Array(height).keys()].map((y)=>this.renderField(x,y))}</tr>))}\n            </tbody>\n            </table>);\n\n\n\n    }\n\n    renderField(x,y){\n        const {boardView,selectedField} = this.state;\n        let symbol = \"\";\n        let className = \"dark\";\n        let selected = false;\n        let canMove = false;\n        if(JSON.stringify(boardView)!==\"[]\"){\n            if(boardView[x][y]!==JSON.stringify({})){\n                symbol = boardView[x][y].symbol;\n                if(boardView[x][y].canMove){\n                    canMove = boardView[x][y].canMove;\n                }\n            }\n        }\n        if((x+y) % 2===0){\n           className=\"white\"\n        }\n        if(selectedField.x===x && selectedField.y===y){\n            selected = true;\n        }\n\n        return (<td class={className} onClick={()=>this.selectField(x,y)} onMouseOver={()=>this.mouseOverField(x,y)}><PieceComponent symbol={symbol} selected={selected} canMove={canMove}></PieceComponent></td>);\n    }\n\n    selectField(x,y){\n        const {board} =this.state;\n        if(board.board[x][y]){\n            this.setState({selectedField:{x:x,y:y}});\n            const possibleMoves =board.board[x][y].possibleMoves; \n            let newBoard = board;\n            for(let i=0;i<possibleMoves.length;i++){\n                if(newBoard.board[possibleMoves[i].x][possibleMoves[i].y]!==null){\n                newBoard.board[possibleMoves[i].x][possibleMoves[i].y].canMove = true;\n            } else {\n                newBoard.board[possibleMoves[i].x][possibleMoves[i].y]= {canMove : true};\n            }\n            }\n            this.setState({board:newBoard});\n        } else {\n            this.setState({selectedField:{}});\n\n        }\n        console.log(board);\n    }\n\n    mouseOverField(x,y){\n        //    console.log(\"mouseOver:\",x,\",\",y);\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2 } = this.state;\n        return (\n            <div>\n                {inviteLink}\n                <div></div>\n                here is the Game: Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>}\n                <div></div>\n\n                <div style={{display: 'flex', justifyContent: 'center'}}>\n                <div className=\"centered\">\n                    {this.renderBoard()}\n                </div>\n            </div>\n\n            </div>\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}