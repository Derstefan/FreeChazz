{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece.component.jsx\";\nimport React, { Component } from 'react';\nimport Canvas from '../game/canvas.component';\nimport PieceGeneratorComponent from '../generator/piece-generator.component';\nimport RandomGenerator from '../generator/random-generator';\nimport UtilFunctions from '../generator/random-generator';\n\nclass PieceComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 300,\n      height: 400,\n      piece: PieceGeneratorComponent.drawPieceCanvas(300, 400, Math.random() + \"\", \"P1\")\n    };\n  }\n\n  drawMethod() {\n    const {\n      piece,\n      width,\n      height\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      ctx.canvas.width = width;\n      ctx.canvas.height = height;\n      ctx.drawImage(piece, 0, 0);\n    };\n\n    return draw;\n  }\n\n  render() {\n    const {\n      symbol,\n      selected,\n      canMove\n    } = this.props;\n    let style = {};\n    let str = symbol;\n\n    if (selected || canMove) {\n      style = {\n        color: 'green'\n      };\n\n      if (str === \"\") {//   str='X';\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawMethod()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 19\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default PieceComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece.component.jsx"],"names":["React","Component","Canvas","PieceGeneratorComponent","RandomGenerator","UtilFunctions","PieceComponent","constructor","props","state","width","height","piece","drawPieceCanvas","Math","random","drawMethod","draw","ctx","frameCount","canvas","drawImage","render","symbol","selected","canMove","style","str","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;AAEA,MAAMC,cAAN,SAA6BL,SAA7B,CAAuC;AACnCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,GADE;AAETC,MAAAA,MAAM,EAAE,GAFC;AAGTC,MAAAA,KAAK,EAAET,uBAAuB,CAACU,eAAxB,CAAwC,GAAxC,EAA6C,GAA7C,EAAkDC,IAAI,CAACC,MAAL,KAAgB,EAAlE,EAAsE,IAAtE;AAHE,KAAb;AAMH;;AAEDC,EAAAA,UAAU,GAAG;AACT,UAAM;AAAEJ,MAAAA,KAAF;AAASF,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,QAA2B,KAAKF,KAAtC;;AAEA,UAAMQ,IAAI,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAC9BD,MAAAA,GAAG,CAACE,MAAJ,CAAWV,KAAX,GAAmBA,KAAnB;AACAQ,MAAAA,GAAG,CAACE,MAAJ,CAAWT,MAAX,GAAoBA,MAApB;AACAO,MAAAA,GAAG,CAACG,SAAJ,CAAcT,KAAd,EAAqB,CAArB,EAAwB,CAAxB;AACH,KAJD;;AAKA,WAAOK,IAAP;AACH;;AAGDK,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,QAAgC,KAAKjB,KAA3C;AACA,QAAIkB,KAAK,GAAG,EAAZ;AACA,QAAIC,GAAG,GAAGJ,MAAV;;AACA,QAAKC,QAAQ,IAAIC,OAAjB,EAA2B;AACvBC,MAAAA,KAAK,GAAG;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAR;;AACA,UAAID,GAAG,KAAK,EAAZ,EAAgB,CACZ;AACH;AACJ;;AACD,wBAAQ;AAAA,6BAAE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,KAAKX,UAAL;AAAd;AAAA;AAAA;AAAA;AAAA;AAAF,qBAAR;AACH;;AAlCkC;;AAqCvC,eAAeV,cAAf","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../game/canvas.component';\nimport PieceGeneratorComponent from '../generator/piece-generator.component';\nimport RandomGenerator from '../generator/random-generator';\nimport UtilFunctions from '../generator/random-generator';\n\nclass PieceComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 300,\n            height: 400,\n            piece: PieceGeneratorComponent.drawPieceCanvas(300, 400, Math.random() + \"\", \"P1\")\n        }\n\n    }\n\n    drawMethod() {\n        const { piece, width, height } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            ctx.drawImage(piece, 0, 0);\n        }\n        return draw;\n    }\n\n\n    render() {\n        const { symbol, selected, canMove } = this.props;\n        let style = {};\n        let str = symbol\n        if ((selected || canMove)) {\n            style = { color: 'green' };\n            if (str === \"\") {\n                //   str='X';\n            }\n        }\n        return (<><Canvas draw={this.drawMethod()} /></>);\n    }\n}\n\nexport default PieceComponent"]},"metadata":{},"sourceType":"module"}