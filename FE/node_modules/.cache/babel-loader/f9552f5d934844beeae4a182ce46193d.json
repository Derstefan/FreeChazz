{"ast":null,"code":"import Config from \"./config.json\";\n\nclass PieceCard {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n    this.canvas.width = Config.card.width;\n    this.canvas.height = Config.card.height;\n  }\n\n  drawCanvas(piece, pieceImage) {\n    const actionsSize = Config.actionsSize;\n    const actionsOffsetX = Config.actionsOffsetX;\n    const actionsOffsetY = Config.actionsOffsetY;\n    var ctx = this.ctx;\n\n    if (piece.actions !== undefined) {\n      ctx.canvas.width = Config.card.width;\n      ctx.canvas.height = Config.card.height;\n      ctx.drawImage(pieceImage, 32, 10); // draw actions\n\n      for (var i = 0; i < piece.actions.actions.length; i++) {\n        for (var j = 0; j < piece.actions.actions[0].length; j++) {\n          if (piece.actions.actions[i][j] !== \"-\") {\n            if (piece.actions.actions[i][j] === \"P\") {\n              ctx.fillStyle = \"#11AA11\";\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            } else if (piece.actions.actions[i][j] === \"E\") {\n              ctx.fillStyle = \"#BB1111\";\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            } else if (piece.actions.actions[i][j] === \"F\") {\n              ctx.fillStyle = \"#1111BB\";\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            } else {\n              ctx.fillStyle = \"#666666\";\n              ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n            }\n          }\n        }\n      }\n\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = \"#AAAAAA\";\n\n      for (i = 0; i < piece.actions.actions.length + 1; i++) {\n        //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.actions.actions.length + 1 * actionsSize);\n        //console.log(i);\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n        ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + piece.actions.actions.length * actionsSize);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n        ctx.lineTo(actionsOffsetX + piece.actions.actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n        ctx.stroke();\n      }\n    }\n  }\n\n  drawPieceCard(piece, pieceImage) {\n    this.drawCanvas(piece, pieceImage);\n    return this.canvas;\n  }\n\n}\n\nexport default PieceCard;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/piece-card.jsx"],"names":["Config","PieceCard","constructor","canvas","document","createElement","ctx","getContext","width","card","height","drawCanvas","piece","pieceImage","actionsSize","actionsOffsetX","actionsOffsetY","actions","undefined","drawImage","i","length","j","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","drawPieceCard"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;;AAEA,MAAMC,SAAN,CAAgB;AAEZC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAcC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACA,SAAKC,GAAL,GAAW,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAX;AACA,SAAKJ,MAAL,CAAYK,KAAZ,GAAoBR,MAAM,CAACS,IAAP,CAAYD,KAAhC;AACA,SAAKL,MAAL,CAAYO,MAAZ,GAAqBV,MAAM,CAACS,IAAP,CAAYC,MAAjC;AACH;;AAGDC,EAAAA,UAAU,CAACC,KAAD,EAAQC,UAAR,EAAoB;AAC1B,UAAMC,WAAW,GAAGd,MAAM,CAACc,WAA3B;AACA,UAAMC,cAAc,GAAGf,MAAM,CAACe,cAA9B;AACA,UAAMC,cAAc,GAAGhB,MAAM,CAACgB,cAA9B;AACA,QAAIV,GAAG,GAAG,KAAKA,GAAf;;AAEA,QAAIM,KAAK,CAACK,OAAN,KAAkBC,SAAtB,EAAiC;AAC7BZ,MAAAA,GAAG,CAACH,MAAJ,CAAWK,KAAX,GAAmBR,MAAM,CAACS,IAAP,CAAYD,KAA/B;AACAF,MAAAA,GAAG,CAACH,MAAJ,CAAWO,MAAX,GAAoBV,MAAM,CAACS,IAAP,CAAYC,MAAhC;AAEAJ,MAAAA,GAAG,CAACa,SAAJ,CAAcN,UAAd,EAA0B,EAA1B,EAA8B,EAA9B,EAJ6B,CAK7B;;AAEA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsBI,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACnD,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsB,CAAtB,EAAyBI,MAA7C,EAAqDC,CAAC,EAAtD,EAA0D;AACtD,cAAIV,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsBG,CAAtB,EAAyBE,CAAzB,MAAgC,GAApC,EAAyC;AACrC,gBAAIV,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsBG,CAAtB,EAAyBE,CAAzB,MAAgC,GAApC,EAAyC;AACrChB,cAAAA,GAAG,CAACiB,SAAJ,GAAgB,SAAhB;AACAjB,cAAAA,GAAG,CAACkB,QAAJ,CAAaT,cAAc,GAAGK,CAAC,GAAGN,WAAlC,EAA+CE,cAAc,GAAGM,CAAC,GAAGR,WAApE,EAAiFA,WAAjF,EAA8FA,WAA9F;AACH,aAHD,MAGO,IAAIF,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsBG,CAAtB,EAAyBE,CAAzB,MAAgC,GAApC,EAAyC;AAC5ChB,cAAAA,GAAG,CAACiB,SAAJ,GAAgB,SAAhB;AACAjB,cAAAA,GAAG,CAACkB,QAAJ,CAAaT,cAAc,GAAGK,CAAC,GAAGN,WAAlC,EAA+CE,cAAc,GAAGM,CAAC,GAAGR,WAApE,EAAiFA,WAAjF,EAA8FA,WAA9F;AACH,aAHM,MAGA,IAAIF,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsBG,CAAtB,EAAyBE,CAAzB,MAAgC,GAApC,EAAyC;AAC5ChB,cAAAA,GAAG,CAACiB,SAAJ,GAAgB,SAAhB;AACAjB,cAAAA,GAAG,CAACkB,QAAJ,CAAaT,cAAc,GAAGK,CAAC,GAAGN,WAAlC,EAA+CE,cAAc,GAAGM,CAAC,GAAGR,WAApE,EAAiFA,WAAjF,EAA8FA,WAA9F;AACH,aAHM,MAGA;AACHR,cAAAA,GAAG,CAACiB,SAAJ,GAAgB,SAAhB;AACAjB,cAAAA,GAAG,CAACkB,QAAJ,CAAaT,cAAc,GAAGK,CAAC,GAAGN,WAAlC,EAA+CE,cAAc,GAAGM,CAAC,GAAGR,WAApE,EAAiFA,WAAjF,EAA8FA,WAA9F;AACH;AACJ;AACJ;AACJ;;AAEDR,MAAAA,GAAG,CAACmB,SAAJ,GAAgB,GAAhB;AACAnB,MAAAA,GAAG,CAACoB,WAAJ,GAAkB,SAAlB;;AACA,WAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGR,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsBI,MAAtB,GAA+B,CAA/C,EAAkDD,CAAC,EAAnD,EAAuD;AACnD;AACA;AAEAd,QAAAA,GAAG,CAACqB,SAAJ;AACArB,QAAAA,GAAG,CAACsB,MAAJ,CAAWb,cAAc,GAAGK,CAAC,GAAGN,WAAhC,EAA6CE,cAA7C;AACAV,QAAAA,GAAG,CAACuB,MAAJ,CAAWd,cAAc,GAAGK,CAAC,GAAGN,WAAhC,EAA6CE,cAAc,GAAIJ,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsBI,MAAvB,GAAiCP,WAA/F;AACAR,QAAAA,GAAG,CAACwB,MAAJ;AAEAxB,QAAAA,GAAG,CAACqB,SAAJ;AACArB,QAAAA,GAAG,CAACsB,MAAJ,CAAWb,cAAX,EAA2BC,cAAc,GAAGI,CAAC,GAAGN,WAAhD;AACAR,QAAAA,GAAG,CAACuB,MAAJ,CAAWd,cAAc,GAAIH,KAAK,CAACK,OAAN,CAAcA,OAAd,CAAsBI,MAAvB,GAAiCP,WAA7D,EAA0EE,cAAc,GAAGI,CAAC,GAAGN,WAA/F;AACAR,QAAAA,GAAG,CAACwB,MAAJ;AACH;AACJ;AACJ;;AAEDC,EAAAA,aAAa,CAACnB,KAAD,EAAQC,UAAR,EAAoB;AAC7B,SAAKF,UAAL,CAAgBC,KAAhB,EAAuBC,UAAvB;AACA,WACI,KAAKV,MADT;AAGH;;AAnEW;;AAsEhB,eAAeF,SAAf","sourcesContent":["import Config from \"./config.json\";\n\nclass PieceCard {\n\n    constructor() {\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = Config.card.width;\n        this.canvas.height = Config.card.height;\n    }\n\n\n    drawCanvas(piece, pieceImage) {\n        const actionsSize = Config.actionsSize;\n        const actionsOffsetX = Config.actionsOffsetX;\n        const actionsOffsetY = Config.actionsOffsetY;\n        var ctx = this.ctx;\n\n        if (piece.actions !== undefined) {\n            ctx.canvas.width = Config.card.width;\n            ctx.canvas.height = Config.card.height;\n\n            ctx.drawImage(pieceImage, 32, 10);\n            // draw actions\n\n            for (var i = 0; i < piece.actions.actions.length; i++) {\n                for (var j = 0; j < piece.actions.actions[0].length; j++) {\n                    if (piece.actions.actions[i][j] !== \"-\") {\n                        if (piece.actions.actions[i][j] === \"P\") {\n                            ctx.fillStyle = \"#11AA11\";\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        } else if (piece.actions.actions[i][j] === \"E\") {\n                            ctx.fillStyle = \"#BB1111\";\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        } else if (piece.actions.actions[i][j] === \"F\") {\n                            ctx.fillStyle = \"#1111BB\";\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        } else {\n                            ctx.fillStyle = \"#666666\";\n                            ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                        }\n                    }\n                }\n            }\n\n            ctx.lineWidth = 0.5;\n            ctx.strokeStyle = \"#AAAAAA\";\n            for (i = 0; i < piece.actions.actions.length + 1; i++) {\n                //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.actions.actions.length + 1 * actionsSize);\n                //console.log(i);\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.actions.actions.length) * actionsSize);\n                ctx.stroke();\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                ctx.lineTo(actionsOffsetX + (piece.actions.actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                ctx.stroke();\n            }\n        }\n    }\n\n    drawPieceCard(piece, pieceImage) {\n        this.drawCanvas(piece, pieceImage);\n        return (\n            this.canvas\n        );\n    }\n}\n\nexport default PieceCard"]},"metadata":{},"sourceType":"module"}