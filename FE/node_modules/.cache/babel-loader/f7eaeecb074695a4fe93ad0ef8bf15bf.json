{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from '../components/piece.component';\nimport PieceGeneratorComponent from '../generator/piece-generator.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //game\n      player1: {},\n      player2: {},\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      width: 16,\n      height: 16,\n      turn: \"P1\",\n      round: 0,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      //consts\n      squareSize: 25,\n      boardTopx: 25,\n      boardTopy: 25,\n      updateInterval: 1500\n    };\n    this.updateGameData();\n    this.loadBoard();\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n    this.play = this.play.bind(this);\n    const loadTimer = setInterval(() => {\n      this.updateGameData();\n    }, this.state.updateInterval);\n  }\n\n  componentDidMount() {}\n\n  updateGameData() {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2,\n        turn: res.data.turn,\n        round: res.data.round\n      }); //when other player made his turn\n\n      if (turn !== res.data.turn) {\n        this.loadBoard();\n      } //check game end ?\n\n    });\n  }\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = res.data.board;\n      console.log(bv);\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (res.data.board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      }\n\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField,\n      me,\n      turn,\n      possibleMoves\n    } = this.state;\n    const isPlayerTurn = me === turn;\n    const isEmptyField = boardView[y][x].symbol === \"\";\n    const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n    if (sthSelected) {\n      const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n      const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n      const isOwnSelected = me == boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n      if (isAlreadySelected) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n        // move\n        const draw = {\n          fromPos: {\n            x: selectedField.x,\n            y: selectedField.y\n          },\n          toPos: {\n            x: x,\n            y: y\n          }\n        };\n        this.play(draw);\n      } else if (isEmptyField) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    } else {\n      if (!isEmptyField) {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    }\n  }\n\n  play(draw) {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.play(gameId, draw).then(res => {\n      console.log(\"played\", turn);\n      const nextTurn = turn === \"P1\" ? \"P2\" : \"P1\";\n      this.setState({\n        possibleMoves: [],\n        selectedField: {},\n        turn: nextTurn\n      });\n      this.updateGameData();\n      this.loadBoard();\n    });\n  }\n\n  clickOnCanvas(event) {\n    const {\n      squareSize,\n      boardTopy,\n      boardTopx\n    } = this.state;\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - boardTopx;\n    const y = event.clientY - rect.top - boardTopy; //console.log(\"x: \" + x + \" y: \" + y);\n\n    this.selectField((x - x % squareSize) / squareSize, (y - y % squareSize) / squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      squareSize,\n      boardView,\n      possibleMoves,\n      boardTopy,\n      boardTopx,\n      selectedField,\n      me\n    } = this.state;\n    var ctx = null;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        ctx.canvas.width = squareSize * (width + 1);\n        ctx.canvas.height = squareSize * (height + 1); //draw board\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 == 0 ? \"#D2B48C\" : \"PeachPuff\";\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          }\n        }\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.45;\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < possibleMoves.length; k++) {\n            let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0]) {\n          ctx.fillStyle = \"black\";\n          ctx.font = \"20px Arial\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let xOffset = boardTopx + (i + 0.12) * squareSize;\n                let yOffset = boardTopy + (j + 0.8) * squareSize;\n                let symbol = this.drawPiece(boardView[j][i].symbol, boardView[j][i].owner); // ctx.fillText(symbol,xOffset,yOffset);\n\n                var DOMURL = window.URL || window.webkitURL || window;\n                var img1 = new Image();\n                var svg = new Blob([PieceGeneratorComponent.drawPiece(40, 60, boardView[j][i].symbol, \"P1\")], {\n                  type: 'image/svg+xml'\n                });\n                var url = DOMURL.createObjectURL(svg);\n\n                img1.onload = function () {\n                  ctx.drawImage(img1, xOffset, xOffset);\n                  DOMURL.revokeObjectURL(url);\n                };\n\n                img1.src = url;\n              }\n            }\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n      }\n    };\n\n    return draw;\n  }\n\n  drawPiece(pieceCode, player) {\n    if (player === \"P1\") {//return \"♖\";\n    }\n\n    return pieceCode; //        return \"♜\";\n  }\n\n  drawGameText() {\n    const {\n      me,\n      turn\n    } = this.state;\n\n    if (me === turn) {\n      return \"Your turn!\";\n    }\n\n    return \"Wait for opponents turn...\";\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      boardView,\n      selectedField,\n      turn,\n      me,\n      round\n    } = this.state;\n    var piece = \"\";\n\n    if (boardView[0] && selectedField.x) {\n      piece = boardView[selectedField.y][selectedField.x]; //console.log(piece);\n    } // TODO: aufteilen in GameData und PieceData ?\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"            \", this.drawGameText()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawMethod(),\n        onClick: this.clickOnCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: inviteLink\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Player2: \", player2.name]\n        }, void 0, true), \" \", \" round:\", round]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceComponent","PieceGeneratorComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","player1","player2","boardData","boardView","width","height","turn","round","selectedField","possibleMoves","squareSize","boardTopx","boardTopy","updateInterval","updateGameData","loadBoard","selectField","bind","clickOnCanvas","drawMethod","play","loadTimer","setInterval","componentDidMount","getGameData","then","res","setState","data","getBoard","bv","board","console","log","i","length","j","symbol","owner","x","y","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","frameCount","canvas","fillStyle","xOffset","yOffset","fillRect","globalAlpha","k","font","drawPiece","DOMURL","window","URL","webkitURL","img1","Image","svg","Blob","type","url","createObjectURL","onload","drawImage","revokeObjectURL","src","strokeStyle","strokeRect","pieceCode","drawGameText","render","piece","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from '../components/piece.component';\nimport PieceGeneratorComponent from '../generator/piece-generator.component';\n\nclass GameComponent extends Component {\n\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n\n            //game\n            player1: {},\n            player2: {},\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            width: 16,\n            height: 16,\n            turn: \"P1\",\n            round: 0,\n\n            //selection\n            selectedField: {},\n            possibleMoves: [],\n\n            //consts\n            squareSize: 25,\n            boardTopx: 25,\n            boardTopy: 25,\n            updateInterval: 1500\n        }\n        this.updateGameData();\n        this.loadBoard();\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n\n        const loadTimer = setInterval(() => {\n            this.updateGameData();\n        }, this.state.updateInterval);\n    }\n\n    componentDidMount() {\n\n    }\n\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round });\n\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard();\n            }\n\n            //check game end ?\n        });\n    }\n\n\n\n    loadBoard() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = res.data.board;\n            console.log(bv);\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (res.data.board[i][j] === null) {\n                        bv[i][j] = {\n                            symbol: \"\",\n                            owner: \"\",\n                            possibleMoves: []\n                        };\n                    } else {\n                        bv[i][j] = {\n                            symbol: bv[i][j].symbol,\n                            owner: bv[i][j].owner,\n                            possibleMoves: bv[i][j].possibleMoves\n                        };\n                    }\n                }\n            }\n            this.setState({ boardData: res.data, boardView: bv, width: bv[0].length, height: bv.length });\n\n        });\n    }\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, possibleMoves } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me == boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {}\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {}\n                });\n            } else {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y }\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y }\n                });\n            }\n        }\n    }\n\n    play(draw) {\n        const { gameId, turn } = this.state;\n        mainService.play(gameId, draw).then((res) => {\n            console.log(\"played\", turn);\n            const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n            this.setState({\n                possibleMoves: [],\n                selectedField: {},\n                turn: nextTurn\n            });\n\n            this.updateGameData();\n            this.loadBoard();\n        });\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const { squareSize, boardTopy, boardTopx } = this.state;\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - boardTopx;\n        const y = event.clientY - rect.top - boardTopy;\n        //console.log(\"x: \" + x + \" y: \" + y);\n        this.selectField((x - x % squareSize) / (squareSize), (y - y % squareSize) / (squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, squareSize, boardView, possibleMoves, boardTopy, boardTopx, selectedField, me } = this.state;\n        var ctx = null;\n\n        const draw = (ctx, frameCount) => {\n\n            if (boardView) {\n\n                ctx.canvas.width = squareSize * (width + 1)\n                ctx.canvas.height = squareSize * (height + 1)\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 == 0) ? \"#D2B48C\" : \"PeachPuff\";\n                        let xOffset = boardTopx + j * squareSize;\n                        let yOffset = boardTopy + i * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.45;\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < possibleMoves.length; k++) {\n                        let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0]) {\n                    ctx.fillStyle = \"black\";\n                    ctx.font = \"20px Arial\";\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + (i + 0.12) * squareSize;\n                                let yOffset = boardTopy + (j + 0.8) * squareSize;\n\n\n\n\n                                let symbol = this.drawPiece(boardView[j][i].symbol, boardView[j][i].owner);\n                                // ctx.fillText(symbol,xOffset,yOffset);\n\n\n                                var DOMURL = window.URL || window.webkitURL || window;\n                                var img1 = new Image();\n                                var svg = new Blob([PieceGeneratorComponent.drawPiece(40, 60, boardView[j][i].symbol, \"P1\")], { type: 'image/svg+xml' });\n                                var url = DOMURL.createObjectURL(svg);\n                                img1.onload = function () {\n                                    ctx.drawImage(img1, xOffset, xOffset);\n                                    DOMURL.revokeObjectURL(url);\n                                }\n                                img1.src = url;\n\n\n                            }\n                        }\n                    }\n                }\n\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n            }\n        }\n        return draw;\n    }\n\n    drawPiece(pieceCode, player) {\n        if (player === \"P1\") {\n            //return \"♖\";\n\n        }\n        return pieceCode;\n        //        return \"♜\";\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2, boardView, selectedField, turn, me, round } = this.state;\n        var piece = \"\";\n        if (boardView[0] && selectedField.x) {\n            piece = boardView[selectedField.y][selectedField.x];\n            //console.log(piece);\n        }\n        // TODO: aufteilen in GameData und PieceData ?\n        return (\n\n            <div>\n                <div>            {this.drawGameText()}</div>\n                <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n                {/* <div>{piece.symbol} {\" \"}{piece.owner}</div>*/}\n                <div>\n                    {inviteLink}\n                </div>\n                <div>\n                    Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>} {\" round:\"}{round}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}