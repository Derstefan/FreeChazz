{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.component.jsx\";\nimport React, { Component } from 'react';\n\nclass PieceGeneratorComponent extends Component {\n  static loadConf() {\n    //Configuration\n    return {\n      width: 460,\n      height: 660,\n      seed: 237849\n    };\n  }\n\n  static RandomNumber(seed) {\n    var rand = seed;\n    var hi = seed / (2147483647 / 48271);\n    var lo = seed % (2147483647 / 48271);\n    var test = 48271 * lo - 2147483647 % 48271 * hi;\n\n    if (test > 0) {\n      rand = test;\n    } else {\n      rand = test + this.M;\n    }\n\n    return rand * (1.0 / 2147483647);\n  }\n\n  static drawPolygon() {\n    const conf = this.loadConf();\n    const width = conf.width;\n    const height = conf.height;\n    const mirror = width / 2;\n    var pointNumber = this.randNumOfRange(3, 6);\n    console.log(Math.floor(Math.random() * 16777215).toString(16));\n    var color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n    var pts = \"\";\n    var ptsMirror = \"\";\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.randNumOfRange(0, width);\n      var y = this.randNumOfRange(0, height);\n      pts += x + \",\" + y + \" \";\n      var x2 = width - x;\n      ptsMirror += x2 + \",\" + y + \" \";\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: pts,\n        fill: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: ptsMirror,\n        fill: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  static randNumOfRange(a, b) {\n    return Math.round(Math.random() * (b - a) + a);\n  }\n\n  static filter() {\n    return /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"filter\", {\n        id: \"f1\",\n        x: \"0\",\n        y: \"0\",\n        children: /*#__PURE__*/_jsxDEV(\"feGaussianBlur\", {\n          in: \"SourceGraphic\",\n          stdDeviation: \"15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }, this);\n  }\n\n  static drawPiece() {\n    const conf = this.loadConf();\n    const width = conf.width;\n    const height = conf.height;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        height: height,\n        width: width,\n        children: [this.drawPolygon(), this.drawPolygon(), this.drawPolygon(), this.drawPolygon(), this.drawPolygon()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), this.xmur3(\"asd\")]\n    }, void 0, true);\n  }\n\n}\n\nexport default PieceGeneratorComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.component.jsx"],"names":["React","Component","PieceGeneratorComponent","loadConf","width","height","seed","RandomNumber","rand","hi","lo","test","M","drawPolygon","conf","mirror","pointNumber","randNumOfRange","console","log","Math","floor","random","toString","color","pts","ptsMirror","i","x","y","x2","a","b","round","filter","drawPiece","xmur3"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,uBAAN,SAAsCD,SAAtC,CAAgD;AAG5C,SAAOE,QAAP,GAAkB;AACd;AACA,WAAO;AACHC,MAAAA,KAAK,EAAE,GADJ;AAEHC,MAAAA,MAAM,EAAE,GAFL;AAGHC,MAAAA,IAAI,EAAE;AAHH,KAAP;AAKH;;AAED,SAAOC,YAAP,CAAoBD,IAApB,EAA0B;AACtB,QAAIE,IAAI,GAAGF,IAAX;AACA,QAAIG,EAAE,GAAGH,IAAI,IAAI,aAAa,KAAjB,CAAb;AACA,QAAII,EAAE,GAAGJ,IAAI,IAAI,aAAa,KAAjB,CAAb;AACA,QAAIK,IAAI,GAAG,QAAQD,EAAR,GAAc,aAAa,KAAd,GAAuBD,EAA/C;;AACA,QAAIE,IAAI,GAAG,CAAX,EAAc;AACVH,MAAAA,IAAI,GAAGG,IAAP;AACH,KAFD,MAEO;AACHH,MAAAA,IAAI,GAAGG,IAAI,GAAG,KAAKC,CAAnB;AACH;;AACD,WAAQJ,IAAI,IAAI,MAAM,UAAV,CAAZ;AACH;;AAID,SAAOK,WAAP,GAAqB;AACjB,UAAMC,IAAI,GAAG,KAAKX,QAAL,EAAb;AAEA,UAAMC,KAAK,GAAGU,IAAI,CAACV,KAAnB;AACA,UAAMC,MAAM,GAAGS,IAAI,CAACT,MAApB;AACA,UAAMU,MAAM,GAAGX,KAAK,GAAG,CAAvB;AAGA,QAAIY,WAAW,GAAG,KAAKC,cAAL,CAAoB,CAApB,EAAuB,CAAvB,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,EAAqCC,QAArC,CAA8C,EAA9C,CAAZ;AACA,QAAIC,KAAK,GAAG,MAAMJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,EAAqCC,QAArC,CAA8C,EAA9C,CAAlB;AAEA,QAAIE,GAAG,GAAG,EAAV;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,WAApB,EAAiCW,CAAC,EAAlC,EAAsC;AAClC,UAAIC,CAAC,GAAG,KAAKX,cAAL,CAAoB,CAApB,EAAuBb,KAAvB,CAAR;AACA,UAAIyB,CAAC,GAAG,KAAKZ,cAAL,CAAoB,CAApB,EAAuBZ,MAAvB,CAAR;AACAoB,MAAAA,GAAG,IAAIG,CAAC,GAAG,GAAJ,GAAUC,CAAV,GAAc,GAArB;AACA,UAAIC,EAAE,GAAG1B,KAAK,GAAGwB,CAAjB;AACAF,MAAAA,SAAS,IAAII,EAAE,GAAG,GAAL,GAAWD,CAAX,GAAe,GAA5B;AACH;;AAED,wBAAO;AAAA,8BAAE;AAAS,QAAA,MAAM,EAAEJ,GAAjB;AAAsB,QAAA,IAAI,EAAED;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAF,eACH;AAAS,QAAA,MAAM,EAAEE,SAAjB;AAA4B,QAAA,IAAI,EAAEF;AAAlC;AAAA;AAAA;AAAA;AAAA,cADG;AAAA,oBAAP;AAEH;;AAED,SAAOP,cAAP,CAAsBc,CAAtB,EAAyBC,CAAzB,EAA4B;AACxB,WAAOZ,IAAI,CAACa,KAAL,CAAWb,IAAI,CAACE,MAAL,MAAiBU,CAAC,GAAGD,CAArB,IAA0BA,CAArC,CAAP;AACH;;AAED,SAAOG,MAAP,GAAgB;AACZ,wBAAO;AAAA,6BACH;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,CAAC,EAAC,GAAlB;AAAsB,QAAA,CAAC,EAAC,GAAxB;AAAA,+BACI;AAAgB,UAAA,EAAE,EAAC,eAAnB;AAAmC,UAAA,YAAY,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAKH;;AAGD,SAAOC,SAAP,GAAmB;AACf,UAAMrB,IAAI,GAAG,KAAKX,QAAL,EAAb;AAEA,UAAMC,KAAK,GAAGU,IAAI,CAACV,KAAnB;AACA,UAAMC,MAAM,GAAGS,IAAI,CAACT,MAApB;AAEA,wBACI;AAAA,8BACI;AAAK,QAAA,MAAM,EAAEA,MAAb;AAAqB,QAAA,KAAK,EAAED,KAA5B;AAAA,mBACK,KAAKS,WAAL,EADL,EAEK,KAAKA,WAAL,EAFL,EAGK,KAAKA,WAAL,EAHL,EAIK,KAAKA,WAAL,EAJL,EAKK,KAAKA,WAAL,EALL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAQK,KAAKuB,KAAL,CAAW,KAAX,CARL;AAAA,oBADJ;AAYH;;AApF2C;;AA0FhD,eAAelC,uBAAf","sourcesContent":["import React, { Component } from 'react'\n\nclass PieceGeneratorComponent extends Component {\n\n\n    static loadConf() {\n        //Configuration\n        return {\n            width: 460,\n            height: 660,\n            seed: 237849\n        };\n    }\n\n    static RandomNumber(seed) {\n        var rand = seed;\n        var hi = seed / (2147483647 / 48271);\n        var lo = seed % (2147483647 / 48271);\n        var test = 48271 * lo - (2147483647 % 48271) * hi;\n        if (test > 0) {\n            rand = test;\n        } else {\n            rand = test + this.M;\n        }\n        return (rand * (1.0 / 2147483647));\n    }\n\n\n\n    static drawPolygon() {\n        const conf = this.loadConf();\n\n        const width = conf.width;\n        const height = conf.height;\n        const mirror = width / 2;\n\n\n        var pointNumber = this.randNumOfRange(3, 6);\n        console.log(Math.floor(Math.random() * 16777215).toString(16));\n        var color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n\n        var pts = \"\";\n        var ptsMirror = \"\";\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.randNumOfRange(0, width);\n            var y = this.randNumOfRange(0, height);\n            pts += x + \",\" + y + \" \";\n            var x2 = width - x;\n            ptsMirror += x2 + \",\" + y + \" \";\n        }\n\n        return <><polygon points={pts} fill={color} />\n            <polygon points={ptsMirror} fill={color} /></>;\n    }\n\n    static randNumOfRange(a, b) {\n        return Math.round(Math.random() * (b - a) + a);\n    }\n\n    static filter() {\n        return <defs>\n            <filter id=\"f1\" x=\"0\" y=\"0\">\n                <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n            </filter>\n        </defs>;\n    }\n\n\n    static drawPiece() {\n        const conf = this.loadConf();\n\n        const width = conf.width;\n        const height = conf.height;\n\n        return (\n            <>\n                <svg height={height} width={width}>\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                </svg>\n                {this.xmur3(\"asd\")}\n            </>\n        )\n    }\n\n\n\n}\n\nexport default PieceGeneratorComponent"]},"metadata":{},"sourceType":"module"}