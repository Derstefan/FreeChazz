{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //game\n      player1: {},\n      player2: {},\n      boardData: {},\n      // data from server\n      boardView: undefined,\n      // symbol, playertype, selected, canMoveTo\n      width: 16,\n      height: 16,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      //consts\n      squareSize: 25,\n      boardTopx: 25,\n      boardTopy: 25\n    };\n    this.loadGameData();\n    this.loadBoard();\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n  }\n\n  loadGameData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2\n      });\n    });\n  }\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = res.data.board;\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (res.data.board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      } //            console.log(bv);\n\n\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  }\n\n  selectField(x, y) {\n    const {\n      boardView\n    } = this.state;\n    console.log(\"coord:\", x, \",\", y);\n    this.setState({\n      possibleMoves: boardView[y][x].possibleMoves,\n      selectedField: {\n        x: x,\n        y: y\n      }\n    });\n  }\n\n  removeMoveTos(boardView) {}\n\n  mouseOverField(x, y) {//    console.log(\"mouseOver:\",x,\",\",y);\n  }\n\n  clickOnCanvas(event) {\n    const {\n      squareSize,\n      boardTopy,\n      boardTopx\n    } = this.state;\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - boardTopx;\n    const y = event.clientY - rect.top - boardTopy;\n    console.log(\"x: \" + x + \" y: \" + y);\n    this.selectField((x - x % squareSize) / squareSize, (y - y % squareSize) / squareSize);\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      width,\n      height,\n      squareSize,\n      boardView,\n      possibleMoves,\n      boardTopy,\n      boardTopx,\n      selectedField\n    } = this.state;\n    var ctx = null;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView[0]) {\n        ctx.canvas.width = squareSize * (width + 1);\n        ctx.canvas.height = squareSize * (height + 1); //draw board\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 == 0 ? \"white\" : \"gray\";\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize); //                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n          }\n        } // draw moves\n\n\n        for (let k = 0; k < possibleMoves.length; k++) {\n          let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n          let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n          ctx.fillStyle = \"lightgreen\";\n          ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n        } //draw selected\n\n\n        ctx.fillStyle = \"green\";\n        ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize); // draw pieces\n\n        ctx.fillStyle = \"black\";\n        ctx.font = \"30px Arial\";\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n\n            if (boardView[xOffset][yOffset].symbol !== \"\") {\n              ctx.fillText(\"â™œ\", xOffset + squareSize / 4, yOffset + squareSize / 2);\n            }\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inviteLink, /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), \"here is the Game: Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Player2: \", player2.name]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: draw,\n        onClick: this.clickOnCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","inviteLink","player1","player2","boardData","boardView","undefined","width","height","selectedField","possibleMoves","squareSize","boardTopx","boardTopy","loadGameData","loadBoard","selectField","bind","clickOnCanvas","getGameData","then","res","setState","data","getBoard","bv","board","i","length","j","symbol","owner","x","y","console","log","removeMoveTos","mouseOverField","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","render","ctx","draw","frameCount","canvas","fillStyle","xOffset","yOffset","fillRect","k","font","fillText","strokeStyle","strokeRect","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n    \n    constructor(props) {\n        super(props)\n\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            \n            //game\n            player1: {},\n            player2: {},\n            boardData: {}, // data from server\n            boardView: undefined, // symbol, playertype, selected, canMoveTo\n            width:16,\n            height:16,\n\n            //selection\n            selectedField:{},\n            possibleMoves:[],\n\n            //consts\n            squareSize: 25,\n            boardTopx :25,\n            boardTopy : 25\n        }\n        this.loadGameData();\n        this.loadBoard();\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    }\n\n    loadGameData() {\n        const { gameId } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            this.setState({ player1: res.data.player1, player2: res.data.player2 });\n        });\n    }\n\n    \n\n    loadBoard(){\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv=res.data.board;\n            \n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if(res.data.board[i][j]===null){\n                        bv[i][j]={\n                            symbol: \"\",\n                            owner: \"\",\n                            possibleMoves: []};\n                    } else {\n                        bv[i][j]={\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves};\n                    }\n                }\n            }\n//            console.log(bv);\n            this.setState({ boardData:res.data,boardView:bv,width:bv[0].length,height:bv.length});\n\n        });\n    }\n\n    selectField(x,y){\n        const {boardView} =this.state;\n        console.log(\"coord:\",x,\",\",y);\n        this.setState({possibleMoves:boardView[y][x].possibleMoves,\n                       selectedField:{x:x,y:y}});\n    }\n\n    removeMoveTos(boardView){\n\n    }\n\n    mouseOverField(x,y){\n        //    console.log(\"mouseOver:\",x,\",\",y);\n    }\n\n\n    clickOnCanvas(event){\n        const {squareSize,boardTopy,boardTopx} = this.state;\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left-boardTopx;\n        const y = event.clientY - rect.top- boardTopy;\n        console.log(\"x: \" + x + \" y: \" + y);\n        this.selectField((x - x % squareSize)/(squareSize),(y - y % squareSize)/(squareSize));\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2 ,width,height,squareSize,boardView,possibleMoves,boardTopy,boardTopx,selectedField} = this.state;\n        var ctx = null;\n\n        const draw = (ctx, frameCount) => {\n\n\n            if(boardView[0]){\n    \n            ctx.canvas.width=squareSize*(width+1)\n            ctx.canvas.height=squareSize*(height+1)\n\n            //draw board\n            for(let i=0; i<width; i++) {\n              for(let j=0; j<height; j++) {\n                ctx.fillStyle = ((i+j)%2==0) ? \"white\":\"gray\";\n                let xOffset = boardTopx + j*squareSize;\n                let yOffset = boardTopy + i*squareSize;\n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n//                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n              }\n            }\n            // draw moves\n            for(let k=0; k<possibleMoves.length; k++) {\n                let xOffset = boardTopx + possibleMoves[k].x*squareSize;\n                let yOffset = boardTopy + possibleMoves[k].y*squareSize;\n                ctx.fillStyle=\"lightgreen\";\n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n            }\n            //draw selected\n            ctx.fillStyle=\"green\";\n            ctx.fillRect(boardTopx + selectedField.x*squareSize, boardTopy + selectedField.y*squareSize, squareSize, squareSize);\n\n\n\n            // draw pieces\n            ctx.fillStyle = \"black\";\n            ctx.font = \"30px Arial\";\n            for(let i=0; i<width; i++) {\n                for(let j=0; j<height; j++) {\n                    let xOffset = boardTopx + j*squareSize;\n                    let yOffset = boardTopy + i*squareSize;\n                    if(boardView[xOffset][yOffset].symbol!==\"\"){\n                        ctx.fillText(\"â™œ\",xOffset+squareSize/4,yOffset+squareSize/2);\n                    }\n                }\n            }\n\n            // draw the border around the chessboard\n            ctx.strokeStyle = \"black\";\n            ctx.strokeRect(boardTopx, boardTopy, squareSize*width, squareSize*height)\n    \n        }\n        }\n          \n        return (\n            <div>\n                {inviteLink}\n                <div></div>\n                here is the Game: Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>}\n                <div></div>\n            <Canvas draw={draw} onClick={this.clickOnCanvas} />\n            </div>\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}