{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      player1: {},\n      player2: {},\n      width: 16,\n      height: 16,\n      boardData: {},\n      // data from server\n      boardView: [],\n      // symbol, playertype, selected, canMoveTo\n      selectedField: {}\n    };\n    this.loadGameData();\n    this.loadBoard();\n    this.selectField = this.selectField.bind(this);\n  }\n\n  loadGameData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      //console.log(res.data);\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2\n      });\n    });\n  }\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      console.log(\"board:\", res.data); // transform boardData to boardView\n\n      const width = res.data.width;\n      const height = res.data.height;\n      const board = res.data.board;\n      let boardView = new Array(height).fill(new Array(width).fill({}));\n      console.log(\"bv:\", boardView);\n\n      for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board.length; j++) {\n          if (board[i][j] !== null) {\n            boardView[i][j].symbol = board[i][j].symbol;\n            boardView[i][j].owner = board[i][j].owner;\n          }\n        }\n      }\n\n      this.setState({\n        board: res.data,\n        boardView: boardView\n      });\n    });\n  }\n\n  renderBoard() {\n    const {\n      width,\n      height\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      class: \"chess-board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [...Array(width).keys()].map(x => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [...Array(height).keys()].map(y => this.renderField(x, y))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 14\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n\n  renderField(x, y) {\n    const {\n      boardView,\n      selectedField\n    } = this.state;\n    let symbol = \"\";\n    let className = \"dark\";\n    let selected = false;\n    let canMove = false;\n\n    if (boardView) {\n      if (boardView[x][y] !== JSON.stringify({})) {\n        symbol = boardView[x][y].symbol;\n\n        if (boardView[x][y].canMove) {\n          canMove = boardView[x][y].canMove;\n        }\n      }\n    }\n\n    if ((x + y) % 2 === 0) {\n      className = \"white\";\n    }\n\n    if (selectedField.x === x && selectedField.y === y) {\n      selected = true;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      class: className,\n      onClick: () => this.selectField(x, y),\n      onMouseOver: () => this.mouseOverField(x, y),\n      children: /*#__PURE__*/_jsxDEV(PieceComponent, {\n        symbol: symbol,\n        selected: selected,\n        canMove: canMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 118\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this);\n  }\n\n  selectField(x, y) {\n    const {\n      board\n    } = this.state;\n\n    if (board.board[x][y]) {\n      this.setState({\n        selectedField: {\n          x: x,\n          y: y\n        }\n      });\n      const possibleMoves = board.board[x][y].possibleMoves;\n      let newBoard = board;\n\n      for (let i = 0; i < possibleMoves.length; i++) {\n        if (newBoard.board[possibleMoves[i].x][possibleMoves[i].y] !== null) {\n          newBoard.board[possibleMoves[i].x][possibleMoves[i].y].canMove = true;\n        } else {\n          newBoard.board[possibleMoves[i].x][possibleMoves[i].y] = {\n            canMove: true\n          };\n        }\n      }\n\n      this.setState({\n        board: newBoard\n      });\n    } else {\n      this.setState({\n        selectedField: {}\n      });\n    }\n\n    console.log(board);\n  }\n\n  mouseOverField(x, y) {//    console.log(\"mouseOver:\",x,\",\",y);\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inviteLink, /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), \"here is the Game: Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Player2: \", player2.name]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"centered\",\n          children: this.renderBoard()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx"],"names":["React","Component","mainService","PieceComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","inviteLink","player1","player2","width","height","boardData","boardView","selectedField","loadGameData","loadBoard","selectField","bind","getGameData","then","res","setState","data","getBoard","console","log","board","Array","fill","i","length","j","symbol","owner","renderBoard","keys","map","x","y","renderField","className","selected","canMove","stringify","mouseOverField","possibleMoves","newBoard","render","name","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            player1: {},\n            player2: {},\n            width:16,\n            height:16,\n            boardData: {}, // data from server\n            boardView: [], // symbol, playertype, selected, canMoveTo\n            selectedField:{}\n        }\n        this.loadGameData();\n        this.loadBoard();\n        this.selectField = this.selectField.bind(this);\n    }\n\n    loadGameData() {\n        const { gameId } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            //console.log(res.data);\n            this.setState({ player1: res.data.player1, player2: res.data.player2 });\n        });\n    \n    }\n\n    \n\n    loadBoard(){\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            console.log(\"board:\" ,res.data);\n\n            // transform boardData to boardView\n            const width = res.data.width;\n            const height = res.data.height;\n            const board = res.data.board;\n\n            let boardView = new Array(height).fill(\n                new Array(width).fill({})\n            );\n            console.log(\"bv:\" ,boardView);\n            for (let i = 0; i < board.length; i++) {\n                for (let j = 0; j < board.length; j++) {\n                    if(board[i][j]!==null){\n                        boardView[i][j].symbol=board[i][j].symbol;\n                        boardView[i][j].owner=board[i][j].owner;\n                    }\n                }\n            }\n            this.setState({ board:res.data, boardView:boardView });\n        });\n    }\n\n\n\n    renderBoard() {\n        const {width,height} = this.state;\n\n        return(<table class=\"chess-board\">\n             <tbody>\n            {[...Array(width).keys()].map((x)=>\n            (<tr>\n                {[...Array(height).keys()].map((y)=>this.renderField(x,y))}</tr>))}\n            </tbody>\n            </table>);\n\n\n\n    }\n\n    renderField(x,y){\n        const {boardView,selectedField} = this.state;\n        let symbol = \"\";\n        let className = \"dark\";\n        let selected = false;\n        let canMove = false;\n        if(boardView){\n            if(boardView[x][y]!==JSON.stringify({})){\n                symbol = boardView[x][y].symbol;\n                if(boardView[x][y].canMove){\n                    canMove = boardView[x][y].canMove;\n                }\n            }\n        }\n        if((x+y) % 2===0){\n           className=\"white\"\n        }\n        if(selectedField.x===x && selectedField.y===y){\n            selected = true;\n        }\n\n        return (<td class={className} onClick={()=>this.selectField(x,y)} onMouseOver={()=>this.mouseOverField(x,y)}><PieceComponent symbol={symbol} selected={selected} canMove={canMove}></PieceComponent></td>);\n    }\n\n    selectField(x,y){\n        const {board} =this.state;\n        if(board.board[x][y]){\n            this.setState({selectedField:{x:x,y:y}});\n            const possibleMoves =board.board[x][y].possibleMoves; \n            let newBoard = board;\n            for(let i=0;i<possibleMoves.length;i++){\n                if(newBoard.board[possibleMoves[i].x][possibleMoves[i].y]!==null){\n                newBoard.board[possibleMoves[i].x][possibleMoves[i].y].canMove = true;\n            } else {\n                newBoard.board[possibleMoves[i].x][possibleMoves[i].y]= {canMove : true};\n            }\n            }\n            this.setState({board:newBoard});\n        } else {\n            this.setState({selectedField:{}});\n\n        }\n        console.log(board);\n    }\n\n    mouseOverField(x,y){\n        //    console.log(\"mouseOver:\",x,\",\",y);\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2 } = this.state;\n        return (\n            <div>\n                {inviteLink}\n                <div></div>\n                here is the Game: Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>}\n                <div></div>\n\n                <div style={{display: 'flex', justifyContent: 'center'}}>\n                <div className=\"centered\">\n                    {this.renderBoard()}\n                </div>\n            </div>\n\n            </div>\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}