{"ast":null,"code":"import _toConsumableArray from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Component } from 'react';\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\n\nvar PieceGenerator = /*#__PURE__*/function (_Component) {\n  _inherits(PieceGenerator, _Component);\n\n  function PieceGenerator(width, height, seedstr) {\n    var _this;\n\n    _classCallCheck(this, PieceGenerator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PieceGenerator).call(this));\n    _this.gen = new RandomGenerator(seedstr);\n    _this.width = width;\n    _this.height = height;\n    _this.canvas2 = document.createElement('canvas');\n    _this.c2 = _this.canvas2.getContext('2d');\n    _this.canvas2.width = width;\n    _this.canvas2.height = height;\n    return _this;\n  }\n\n  _createClass(PieceGenerator, [{\n    key: \"randomColor\",\n    value: function randomColor() {\n      var r = Math.floor(this.gen.random() * 230).toString(16);\n      var g = Math.floor(this.gen.random() * 230).toString(16);\n      var b = Math.floor(this.gen.random() * 230).toString(16);\n      return \"#\" + r + g + b;\n    }\n  }, {\n    key: \"randomPoints\",\n    value: function randomPoints(num) {\n      var points = [];\n\n      for (var i = 0; i < num; i++) {\n        var x = this.gen.randNumOfRange(0, this.width);\n        var y = this.gen.randNumOfRange(0, this.height);\n        points.push({\n          x: x,\n          y: y\n        });\n      }\n\n      return points;\n    }\n  }, {\n    key: \"drawShape\",\n    value: function drawShape(points) {\n      var shape = new Path2D();\n\n      for (var i = 0; i < points.length; i++) {\n        if (i === 0) {\n          shape.moveTo(points[i].x, points[i].y);\n        } else {\n          shape.lineTo(points[i].x, points[i].y);\n        }\n      }\n\n      return shape;\n    }\n  }, {\n    key: \"drawMirrorShape\",\n    value: function drawMirrorShape(points) {\n      var shape = new Path2D();\n\n      for (var i = 0; i < points.length; i++) {\n        var x = this.width - points[i].x;\n\n        if (i === 0) {\n          shape.moveTo(x, points[i].y);\n        } else {\n          shape.lineTo(x, points[i].y);\n        }\n      }\n\n      return shape;\n    }\n  }, {\n    key: \"drawCurvedShape\",\n    value: function drawCurvedShape(points) {\n      var shape = new Path2D();\n\n      for (var i = 0; i < points.length; i++) {\n        if (i === 0) {\n          shape.moveTo(points[i].x, points[i].y);\n        } else if (i % 2 === 0) {\n          shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y);\n        }\n      }\n\n      return shape;\n    }\n  }, {\n    key: \"drawCurvedMirrorShape\",\n    value: function drawCurvedMirrorShape(points) {\n      var shape = new Path2D();\n\n      for (var i = 0; i < points.length; i++) {\n        var x = this.width - points[i].x;\n\n        if (i === 0) {\n          shape.moveTo(x, points[i].y);\n        } else if (i % 2 === 0) {\n          var x1 = this.width - points[i - 1].x;\n          var x2 = this.width - points[i].x;\n          shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y);\n        }\n      }\n\n      return shape;\n    } // ----------------------------------------------------------------------------------------------------------------\n\n  }, {\n    key: \"drawCurvedMirroredPolygon\",\n    value: function drawCurvedMirroredPolygon() {\n      var pointNumber = this.gen.randNumOfRange(3, 10);\n      var points = this.randomPoints(pointNumber); //console.log(UtilFunctions.polygonArea(points));\n\n      var color = this.randomColor();\n      this.c2.fillStyle = color;\n      this.c2.fill(this.drawCurvedShape(points));\n      this.c2.fillStyle = color;\n      this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n  }, {\n    key: \"drawMirroredPolygon\",\n    value: function drawMirroredPolygon() {\n      var pointNumber = this.gen.randNumOfRange(3, 10);\n      var points = this.randomPoints(pointNumber); //console.log(UtilFunctions.polygonArea(points));\n\n      var color = this.randomColor();\n      this.c2.fillStyle = color;\n      this.c2.fill(this.drawShape(points));\n      this.c2.fillStyle = color;\n      this.c2.fill(this.drawMirrorShape(points));\n    }\n  }, {\n    key: \"drawCurvedMirroredPolygonColorDiff\",\n    value: function drawCurvedMirroredPolygonColorDiff() {\n      var pointNumber = this.gen.randNumOfRange(3, 10);\n      var points = this.randomPoints(pointNumber);\n      var color = this.randomColor();\n      var color2 = this.randomColor();\n      this.c2.fillStyle = color;\n      this.c2.fill(this.drawCurvedShape(points));\n      this.c2.fillStyle = color2;\n      this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n  }, {\n    key: \"drawMirroredPolygonColorDiff\",\n    value: function drawMirroredPolygonColorDiff() {\n      var pointNumber = this.gen.randNumOfRange(3, 10);\n      var points = this.randomPoints(pointNumber);\n      var color = this.randomColor();\n      var color2 = this.randomColor();\n      this.c2.fillStyle = color;\n      this.c2.fill(this.drawShape(points));\n      this.c2.fillStyle = color2;\n      this.c2.fill(this.drawMirrorShape(points));\n    }\n  }, {\n    key: \"drawPolygons\",\n    value: function drawPolygons(num) {\n      var _this2 = this;\n\n      return _toConsumableArray(Array(num).keys()).map(function () {\n        return _this2.gen.random() > 0.1 ? _this2.drawMirroredPolygon() : _this2.drawMirroredPolygonColorDiff();\n      });\n    }\n  }, {\n    key: \"drawPieceCanvas\",\n    value: function drawPieceCanvas(owner) {\n      this.drawPolygons(this.gen.randNumOfRange(3, 5)); // this.drawMirroredPolygon();\n      // this.drawMirroredPolygonColorDiff();\n      // this.drawMirroredPolygon();\n      // //this.drawMirroredPolygon();\n      // //        this.drawMirroredPolygonColorDiff();\n      // //this.drawMirroredPolygon();\n      // this.drawMirroredPolygon();\n\n      return this.canvas2;\n    }\n  }]);\n\n  return PieceGenerator;\n}(Component);\n\nexport default PieceGenerator;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/piece-generator.jsx"],"names":["Component","RandomGenerator","UtilFunctions","PieceGenerator","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","r","Math","floor","random","toString","g","b","num","points","i","x","randNumOfRange","y","push","shape","Path2D","length","moveTo","lineTo","quadraticCurveTo","x1","x2","pointNumber","randomPoints","color","randomColor","fillStyle","fill","drawCurvedShape","drawCurvedMirrorShape","drawShape","drawMirrorShape","color2","Array","keys","map","drawMirroredPolygon","drawMirroredPolygonColorDiff","owner","drawPolygons"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\n\nclass PieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n    }\n\n\n\n\n    randomColor() {\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPoints(num) {\n        var points = [];\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n        return points;\n    }\n\n\n\n    drawShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n        }\n\n        return shape;\n    }\n\n    drawMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else {\n                shape.lineTo(x, points[i].y);\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedShape(points) {\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else if (i % 2 === 0) {\n                var x1 = this.width - points[i - 1].x;\n                var x2 = this.width - points[i].x;\n                shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n\n    // ----------------------------------------------------------------------------------------------------------------\n\n    drawCurvedMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawMirrorShape(points));\n    }\n\n    drawCurvedMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawMirrorShape(points));\n    }\n\n\n    drawPolygons(num) {\n        return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n    }\n\n\n\n    drawPieceCanvas(owner) {\n\n        this.drawPolygons(this.gen.randNumOfRange(3, 5));\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // //this.drawMirroredPolygon();\n        // //        this.drawMirroredPolygonColorDiff();\n        // //this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGenerator"]},"metadata":{},"sourceType":"module"}