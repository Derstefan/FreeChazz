{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //game\n      player1: {},\n      player2: {},\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      width: 16,\n      height: 16,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      //consts\n      squareSize: 25,\n      boardTopx: 25,\n      boardTopy: 25\n    };\n    this.loadGameData();\n    this.loadBoard();\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n  }\n\n  componentDidMount() {}\n\n  loadGameData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2\n      });\n    });\n  }\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = res.data.board;\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (res.data.board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      }\n\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField\n    } = this.state;\n\n    if (selectedField.x === x && selectedField.y === y) {\n      // unselect then\n      this.setState({\n        possibleMoves: [],\n        selectedField: {}\n      });\n    } else {\n      if (boardView[y][x].symbol === \"\") {\n        // dont select/ unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else {\n        //select field and show possible move of piece\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    }\n  }\n\n  clickOnCanvas(event) {\n    const {\n      squareSize,\n      boardTopy,\n      boardTopx\n    } = this.state;\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - boardTopx;\n    const y = event.clientY - rect.top - boardTopy; //console.log(\"x: \" + x + \" y: \" + y);\n\n    this.selectField((x - x % squareSize) / squareSize, (y - y % squareSize) / squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      squareSize,\n      boardView,\n      possibleMoves,\n      boardTopy,\n      boardTopx,\n      selectedField,\n      me\n    } = this.state;\n    var ctx = null;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        ctx.canvas.width = squareSize * (width + 1);\n        ctx.canvas.height = squareSize * (height + 1); //draw board\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 == 0 ? \"lightgray\" : \"gray\";\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize); //                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n          }\n        }\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.45;\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < possibleMoves.length; k++) {\n            let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0]) {\n          ctx.fillStyle = \"black\";\n          ctx.font = \"20px Arial\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let symbol = boardView[j][i].owner === \"Player1\" ? \"♖\" : \"♜\";\n                let xOffset = boardTopx + (i + 0.12) * squareSize;\n                let yOffset = boardTopy + (j + 0.8) * squareSize;\n                ctx.fillText(symbol, xOffset, yOffset);\n              }\n            }\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n      }\n    };\n\n    return draw;\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      boardView,\n      selectedField\n    } = this.state;\n    var piece = \"\";\n\n    if (boardView[0] && selectedField.x) {\n      piece = boardView[selectedField.y][selectedField.x]; //console.log(piece);\n    } // TODO: aufteilen in GameData und PieceData ?\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inviteLink, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"here is the Game: Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Player2: \", player2.name]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawMethod(),\n        onClick: this.clickOnCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","player1","player2","boardData","boardView","width","height","selectedField","possibleMoves","squareSize","boardTopx","boardTopy","loadGameData","loadBoard","selectField","bind","clickOnCanvas","drawMethod","componentDidMount","getGameData","then","res","setState","data","getBoard","bv","board","i","length","j","symbol","owner","x","y","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","draw","frameCount","canvas","fillStyle","xOffset","yOffset","fillRect","stringify","globalAlpha","k","font","fillText","strokeStyle","strokeRect","render","piece","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n    \n\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me:JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            \n            //game\n            player1: {},\n            player2: {},\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            width:16,\n            height:16,\n\n            //selection\n            selectedField:{},\n            possibleMoves:[],\n\n            //consts\n            squareSize: 25,\n            boardTopx :25,\n            boardTopy : 25\n        }\n        this.loadGameData();\n        this.loadBoard();\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n    }\n\ncomponentDidMount(){\n\n}\n\n    loadGameData() {\n        const { gameId } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            this.setState({ player1: res.data.player1, player2: res.data.player2 });\n        });\n    }\n\n    \n\n    loadBoard(){\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv=res.data.board;\n            \n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if(res.data.board[i][j]===null){\n                        bv[i][j]={\n                            symbol: \"\",\n                            owner: \"\",\n                            possibleMoves: []};\n                    } else {\n                        bv[i][j]={\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves};\n                    }\n                }\n            }\n            this.setState({ boardData:res.data,boardView:bv,width:bv[0].length,height:bv.length});\n\n        });\n    }\n\n    selectField(x,y){\n        const {boardView,selectedField} =this.state;\n        if(selectedField.x===x && selectedField.y===y){\n            // unselect then\n            this.setState({possibleMoves:[],\n                selectedField:{}});\n        } else {\n            if(boardView[y][x].symbol===\"\"){\n                // dont select/ unselect\n                this.setState({possibleMoves:[],\n                    selectedField:{}});                \n            } else {\n                //select field and show possible move of piece\n                this.setState({possibleMoves:boardView[y][x].possibleMoves,\n                    selectedField:{x:x,y:y}});\n                }\n        }\n\n    }\n\n\n\n    clickOnCanvas(event){\n        const {squareSize,boardTopy,boardTopx} = this.state;\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left-boardTopx;\n        const y = event.clientY - rect.top- boardTopy;\n        //console.log(\"x: \" + x + \" y: \" + y);\n        this.selectField((x - x % squareSize)/(squareSize),(y - y % squareSize)/(squareSize));\n    }\n\n    drawMethod(){\n        const {width,height,squareSize,boardView,possibleMoves,boardTopy,boardTopx,selectedField,me} = this.state;\n        var ctx = null;\n\n        const draw = (ctx, frameCount) => {\n\n        if(boardView){\n    \n            ctx.canvas.width=squareSize*(width+1)\n            ctx.canvas.height=squareSize*(height+1)\n\n            //draw board\n            for(let i=0; i<width; i++) {\n              for(let j=0; j<height; j++) {\n                ctx.fillStyle = ((i+j)%2==0) ? \"lightgray\":\"gray\";\n                let xOffset = boardTopx + j*squareSize;\n                let yOffset = boardTopy + i*squareSize;\n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n//                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n              }\n            }\n            if(JSON.stringify(selectedField)!==\"{}\"){\n            // draw moves\n            ctx.globalAlpha = 0.45;\n            ctx.fillStyle=(me===boardView[selectedField.y][selectedField.x].owner)?\"lightgreen\":\"red\";\n            for(let k=0; k<possibleMoves.length; k++) {\n                let xOffset = boardTopx + possibleMoves[k].x*squareSize;\n                let yOffset = boardTopy + possibleMoves[k].y*squareSize;\n                \n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n            }\n\n            //draw selected\n            ctx.fillStyle=(me===boardView[selectedField.y][selectedField.x].owner)?\"green\":\"darkred\";\n            ctx.fillRect(boardTopx + selectedField.x*squareSize, boardTopy + selectedField.y*squareSize, squareSize, squareSize);\n            ctx.globalAlpha = 1;\n        }\n\n            // draw pieces\n            if(boardView[0]){\n            ctx.fillStyle = \"black\";\n            ctx.font = \"20px Arial\";\n            for(let i=0; i<width; i++) {\n                for(let j=0; j<height; j++) {\n                    if(boardView[j][i].symbol!==\"\"){\n                        let symbol = (boardView[j][i].owner===\"Player1\")?\"♖\":\"♜\";\n                        let xOffset = boardTopx + (i+0.12)*squareSize;\n                        let yOffset = boardTopy + (j+0.8)*squareSize;\n                        ctx.fillText(symbol,xOffset,yOffset);\n                    }\n                }\n            }\n        }\n\n            // draw the border around the chessboard\n            ctx.strokeStyle = \"black\";\n            ctx.strokeRect(boardTopx, boardTopy, squareSize*width, squareSize*height)\n    \n    }\n    }\n    return draw;\n    }\n\n\n\n\n    \n    render() {\n        const { inviteLink, player1, player2, boardView,selectedField } = this.state;\n        var piece= \"\";\n        if(boardView[0] && selectedField.x){\n            piece = boardView[selectedField.y][selectedField.x];\n            //console.log(piece);\n        }\n\n        // TODO: aufteilen in GameData und PieceData ?\n\n        return (\n            <div>\n                {inviteLink}\n                <div>\n                here is the Game: Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>}\n                </div>\n            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n           {/* <div>{piece.symbol} {\" \"}{piece.owner}</div>*/}\n            </div>\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}