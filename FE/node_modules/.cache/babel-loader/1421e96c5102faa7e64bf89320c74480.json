{"ast":null,"code":"import { Component } from 'react';\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\nimport { Bodies } from 'matter-js';\n\nclass PieceGenerator {\n  constructor(width, height, seedstr) {\n    this.gen = new RandomGenerator(seedstr);\n    this.width = width;\n    this.height = height;\n    this.canvas2 = document.createElement('canvas');\n    this.c2 = this.canvas2.getContext('2d');\n    this.canvas2.width = width;\n    this.canvas2.height = height;\n    this.matterBodies = [];\n  }\n\n  randomColor() {\n    var r = Math.floor(this.gen.random() * 230).toString(16);\n    var g = Math.floor(this.gen.random() * 230).toString(16);\n    var b = Math.floor(this.gen.random() * 230).toString(16);\n    return \"#\" + r + g + b;\n  }\n\n  randomPoints(num) {\n    var points = [];\n\n    for (var i = 0; i < num; i++) {\n      var x = this.gen.randNumOfRange(0, this.width);\n      var y = this.gen.randNumOfRange(0, this.height);\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n\n    let area = UtilFunctions.polygonArea(points);\n\n    if (area < 10) {\n      console.log(area);\n      points = this.randomPoints(num);\n    }\n\n    return points;\n  }\n\n  drawShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else {\n        shape.lineTo(points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawMirrorShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      var x = this.width - points[i].x;\n\n      if (i === 0) {\n        shape.moveTo(x, points[i].y);\n      } else {\n        shape.lineTo(x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawCurvedShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else if (i % 2 === 0) {\n        shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawCurvedMirrorShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      var x = this.width - points[i].x;\n\n      if (i === 0) {\n        shape.moveTo(x, points[i].y);\n      } else if (i % 2 === 0) {\n        var x1 = this.width - points[i - 1].x;\n        var x2 = this.width - points[i].x;\n        shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y);\n      }\n    }\n\n    return shape;\n  } // ----------------------------------------------------------------------------------------------------------------\n\n\n  drawCurvedMirroredPolygon() {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPoints(pointNumber); //console.log(UtilFunctions.polygonArea(points));\n\n    var color = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedShape(points));\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedMirrorShape(points));\n  }\n\n  drawMirroredPolygon() {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPoints(pointNumber); //console.log(UtilFunctions.polygonArea(points));\n\n    var color = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawShape(points));\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawMirrorShape(points));\n    this.addBodies(points, color);\n    var points2 = points;\n    points2.forEach(p => {\n      p.x = this.width - p.x;\n    });\n    this.addBodies(points2, color);\n  }\n\n  drawCurvedMirroredPolygonColorDiff() {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPoints(pointNumber);\n    var color = this.randomColor();\n    var color2 = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedShape(points));\n    this.c2.fillStyle = color2;\n    this.c2.fill(this.drawCurvedMirrorShape(points));\n  }\n\n  drawMirroredPolygonColorDiff() {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPoints(pointNumber);\n    var color = this.randomColor();\n    var color2 = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawShape(points));\n    this.c2.fillStyle = color2;\n    this.c2.fill(this.drawMirrorShape(points));\n    this.addBodies(points, color);\n    var points2 = points;\n    points2.forEach(p => {\n      p.x = this.width - p.x;\n    });\n    this.addBodies(points2, color2);\n  } //sort points in y direction\n\n\n  sortPoints(points) {\n    return points.sort((a, b) => a.y > b.y ? 1 : -1);\n  }\n\n  addBodies(points, color) {\n    var pointList = this.sortPoints(points);\n\n    for (var i = 2; i < pointList.length; i++) {\n      var body = Bodies.fromVertices(0, 0, [points[i - 2], points[i - 1], points[i]]);\n\n      if (body.vertices.length >= 3) {\n        body.torque = 0.05;\n        this.matterBodies.push({\n          body: body,\n          color: color,\n          alpha: 1.0\n        });\n      }\n    }\n  }\n\n  drawPolygons(num) {\n    return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n  }\n\n  getMatterBodies() {\n    this.drawPolygons(this.gen.randNumOfRange(3, 5));\n    return this.matterBodies;\n  }\n\n  drawPieceCanvas(owner) {\n    this.drawPolygons(this.gen.randNumOfRange(3, 5)); // this.drawMirroredPolygon();\n    // this.drawMirroredPolygonColorDiff();\n    // this.drawMirroredPolygon();\n    // //this.drawMirroredPolygon();\n    // //        this.drawMirroredPolygonColorDiff();\n    // //this.drawMirroredPolygon();\n    // this.drawMirroredPolygon();\n\n    return this.canvas2;\n  }\n\n}\n\nexport default PieceGenerator;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/piece-generator.jsx"],"names":["Component","RandomGenerator","UtilFunctions","Bodies","PieceGenerator","constructor","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","matterBodies","randomColor","r","Math","floor","random","toString","g","b","randomPoints","num","points","i","x","randNumOfRange","y","push","area","polygonArea","console","log","drawShape","shape","Path2D","length","moveTo","lineTo","drawMirrorShape","drawCurvedShape","quadraticCurveTo","drawCurvedMirrorShape","x1","x2","drawCurvedMirroredPolygon","pointNumber","color","fillStyle","fill","drawMirroredPolygon","addBodies","points2","forEach","p","drawCurvedMirroredPolygonColorDiff","color2","drawMirroredPolygonColorDiff","sortPoints","sort","a","pointList","body","fromVertices","vertices","torque","alpha","drawPolygons","Array","keys","map","getMatterBodies","drawPieceCanvas","owner"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\nimport { Bodies } from 'matter-js';\n\nclass PieceGenerator {\n\n    constructor(width, height, seedstr) {\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n        this.matterBodies = [];\n    }\n\n\n\n\n    randomColor() {\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPoints(num) {\n        var points = [];\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n        let area = UtilFunctions.polygonArea(points);\n        if (area < 10) {\n            console.log(area);\n            points = this.randomPoints(num);\n        }\n        return points;\n    }\n\n\n\n    drawShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n        }\n\n        return shape;\n    }\n\n    drawMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else {\n                shape.lineTo(x, points[i].y);\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedShape(points) {\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else if (i % 2 === 0) {\n                var x1 = this.width - points[i - 1].x;\n                var x2 = this.width - points[i].x;\n                shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n\n    // ----------------------------------------------------------------------------------------------------------------\n\n    drawCurvedMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawMirrorShape(points));\n\n\n\n        this.addBodies(points, color);\n        var points2 = points;\n        points2.forEach(p => { p.x = this.width - p.x; });\n        this.addBodies(points2, color);\n    }\n\n    drawCurvedMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawMirrorShape(points));\n\n        this.addBodies(points, color);\n        var points2 = points;\n        points2.forEach(p => { p.x = this.width - p.x; });\n        this.addBodies(points2, color2);\n    }\n\n    //sort points in y direction\n    sortPoints(points) {\n        return points.sort((a, b) => (a.y > b.y) ? 1 : -1);\n    }\n\n    addBodies(points, color) {\n        var pointList = this.sortPoints(points);\n        for (var i = 2; i < pointList.length; i++) {\n            var body = Bodies.fromVertices(0, 0, [points[i - 2], points[i - 1], points[i]]);\n            if (body.vertices.length >= 3) {\n                body.torque = 0.05;\n                this.matterBodies.push({ body: body, color: color, alpha: 1.0 });\n            }\n\n        }\n\n    }\n\n\n    drawPolygons(num) {\n        return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n    }\n\n\n    getMatterBodies() {\n        this.drawPolygons(this.gen.randNumOfRange(3, 5));\n        return this.matterBodies;\n    }\n\n    drawPieceCanvas(owner) {\n\n        this.drawPolygons(this.gen.randNumOfRange(3, 5));\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // //this.drawMirroredPolygon();\n        // //        this.drawMirroredPolygonColorDiff();\n        // //this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGenerator"]},"metadata":{},"sourceType":"module"}