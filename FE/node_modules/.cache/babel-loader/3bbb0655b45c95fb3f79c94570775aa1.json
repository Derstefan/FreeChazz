{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-card.component.jsx\";\nimport React, { Component } from 'react';\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\nclass PieceCardComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pid: this.props.piece,\n      width: 160,\n      height: 300,\n      pieceImage: \"\",\n      piece: {},\n      //consts\n      actionsSize: 7,\n      actionsOffsetX: 10,\n      actionsOffsetY: 160,\n      imageOffsetX: 32,\n      imageOffsetY: 10\n    };\n  }\n\n  componentDidMount() {\n    const {\n      pid\n    } = this.state;\n    console.log(\"pieceId \", pid);\n\n    if (pid) {\n      mainService.pieceData(pid).then(res => {\n        var pg = new PieceGenerator(100, 120, \"\" + pid);\n        this.setState({\n          piece: res.data,\n          pieceImage: pg.drawPieceCanvas(\"P1\")\n        }); //      console.log(res.data);\n      });\n    }\n  }\n\n  getDerivedStateFromProps() {\n    const {\n      pid\n    } = this.state;\n    console.log(\"pieceId \", pid);\n  }\n\n  drawCanvas() {\n    const {\n      piece,\n      pieceImage,\n      width,\n      height,\n      actionsSize,\n      actionsOffsetX,\n      actionsOffsetY\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      ctx.canvas.width = width;\n      ctx.canvas.height = height;\n\n      if (piece.moves !== undefined) {\n        ctx.drawImage(pieceImage, 32, 10); // draw actions\n\n        for (var i = 0; i < piece.moves.actions.length; i++) {\n          for (var j = 0; j < piece.moves.actions[0].length; j++) {\n            if (piece.moves.actions[i][j] !== \"-\") {\n              if (piece.moves.actions[i][j] === \"P\") {\n                ctx.fillStyle = \"#11AA11\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              } else {\n                ctx.fillStyle = \"#666666\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              }\n            }\n          }\n        }\n\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = \"#666666\";\n\n        for (var i = 0; i < piece.moves.actions.length + 1; i++) {\n          //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.moves.actions.length + 1 * actionsSize);\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n          ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + piece.moves.actions.length * actionsSize);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n          ctx.lineTo(actionsOffsetX + piece.moves.actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n          ctx.stroke();\n        }\n      }\n    };\n\n    return draw;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawCanvas()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 22\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default PieceCardComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-card.component.jsx"],"names":["React","Component","Canvas","PieceGenerator","mainService","PieceCardComponent","constructor","props","state","pid","piece","width","height","pieceImage","actionsSize","actionsOffsetX","actionsOffsetY","imageOffsetX","imageOffsetY","componentDidMount","console","log","pieceData","then","res","pg","setState","data","drawPieceCanvas","getDerivedStateFromProps","drawCanvas","draw","ctx","frameCount","canvas","moves","undefined","drawImage","i","actions","length","j","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\n\nclass PieceCardComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n\n        this.state = {\n            pid: this.props.piece,\n            width: 160,\n            height: 300,\n            pieceImage: \"\",\n\n            piece: {},\n\n            //consts\n            actionsSize: 7,\n            actionsOffsetX: 10,\n            actionsOffsetY: 160,\n\n            imageOffsetX: 32,\n            imageOffsetY: 10\n        }\n\n    }\n\n    componentDidMount() {\n        const { pid } = this.state;\n\n        console.log(\"pieceId \", pid);\n        if (pid) {\n            mainService.pieceData(pid).then(res => {\n                var pg = new PieceGenerator(100, 120, \"\" + pid);\n                this.setState({\n                    piece: res.data,\n                    pieceImage: pg.drawPieceCanvas(\"P1\")\n                });\n                //      console.log(res.data);\n\n            }\n            );\n        }\n    }\n\n\n    getDerivedStateFromProps() {\n        const { pid } = this.state;\n        console.log(\"pieceId \", pid);\n    }\n\n\n\n    drawCanvas() {\n        const { piece, pieceImage, width, height, actionsSize, actionsOffsetX, actionsOffsetY } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            if (piece.moves !== undefined) {\n                ctx.drawImage(pieceImage, 32, 10);\n                // draw actions\n\n                for (var i = 0; i < piece.moves.actions.length; i++) {\n                    for (var j = 0; j < piece.moves.actions[0].length; j++) {\n                        if (piece.moves.actions[i][j] !== \"-\") {\n                            if (piece.moves.actions[i][j] === \"P\") {\n                                ctx.fillStyle = \"#11AA11\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            } else {\n                                ctx.fillStyle = \"#666666\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            }\n                        }\n                    }\n                }\n\n                ctx.lineWidth = 0.5;\n                ctx.strokeStyle = \"#666666\";\n                for (var i = 0; i < piece.moves.actions.length + 1; i++) {\n                    //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.moves.actions.length + 1 * actionsSize);\n\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                    ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.moves.actions.length) * actionsSize);\n                    ctx.stroke();\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                    ctx.lineTo(actionsOffsetX + (piece.moves.actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                    ctx.stroke();\n\n                }\n            }\n\n\n\n\n        }\n        return draw;\n    }\n\n\n\n\n    render() {\n        return (<div><Canvas draw={this.drawCanvas()} /> </div>);\n    }\n}\n\nexport default PieceCardComponent"]},"metadata":{},"sourceType":"module"}