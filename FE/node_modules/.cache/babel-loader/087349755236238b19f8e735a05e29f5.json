{"ast":null,"code":"var _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCard from './piece-card';\nimport Config from \"./config.json\";\nimport serverConfig from \"../services/server-config.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://\" + serverConfig.host + \":3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //updater\n      isInited: false,\n      //game consts\n      player1: {},\n      player2: {},\n      width: 16,\n      height: 16,\n      pieces: {},\n      // images of pieces\n      pieceImages: {},\n      //cardImages of pieces\n      actions: {},\n      // actions of pieces\n      pieceCard: new PieceCard(),\n      // game state\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      turn: \"undef\",\n      round: 0,\n      winner: null,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      pieceId: \"\"\n    };\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n    this.play = this.play.bind(this);\n    this.loadBoard = this.loadBoard.bind(this);\n    this.loadPieceData = this.loadPieceData.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      isInited\n    } = this.state; //Init function \n\n    if (!isInited) {\n      this.loadPieceData();\n    } //start updater\n\n\n    const loadTimer = setInterval(() => {\n      this.updateGameData();\n    }, Config.updateInterval);\n  } //check for ugameupdate\n\n\n  updateGameData() {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2,\n        turn: res.data.turn,\n        round: res.data.round,\n        winner: res.data.winner\n      }); //when other player made his turn\n\n      if (turn !== res.data.turn) {\n        this.loadBoard();\n      } //check game end ?\n\n    });\n  } // initial creating piece graphics\n\n\n  loadPieceData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = this.createBoard(res.data.board);\n      console.log(bv);\n      var pieces = new Map();\n      var actions = new Map();\n      var pieceImages = new Map();\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (bv[i][j].symbol !== \"\" && pieces.get(bv[i][j].symbol) === undefined) {\n            var pg = new PieceGenerator(Config.squareSize * 0.8, Config.squareSize * 0.95, bv[i][j].symbol);\n            pieces.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner)); //TODO: load actionsdata\n\n            mainService.pieceData(bv[i][j].symbol).then(res => {\n              pieceImages.set(bv[i][j].symbol);\n              actions.set(bv[i][j].symbol, res.data);\n            });\n          }\n        }\n      }\n\n      this.setState({\n        pieces: pieces,\n        actions: actions,\n        pieceImages: pieceImages,\n        isInited: true,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  } //update Board\n\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = this.createBoard(res.data.board);\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  } // save Board data\n\n\n  createBoard(board) {\n    let bv = board;\n    console.log(bv);\n\n    for (let i = 0; i < bv.length; i++) {\n      for (let j = 0; j < bv[0].length; j++) {\n        if (board[i][j] === null) {\n          bv[i][j] = {\n            symbol: \"\",\n            owner: \"\",\n            possibleMoves: []\n          };\n        } else {\n          bv[i][j] = {\n            symbol: bv[i][j].symbol,\n            owner: bv[i][j].owner,\n            possibleMoves: bv[i][j].possibleMoves\n          };\n        }\n      }\n    }\n\n    return bv;\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField,\n      me,\n      turn,\n      possibleMoves\n    } = this.state;\n    const isPlayerTurn = me === turn;\n    const isEmptyField = boardView[y][x].symbol === \"\";\n    const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n    if (sthSelected) {\n      const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n      const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n      const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n      if (isAlreadySelected) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {},\n          pieceId: \"\"\n        });\n      } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n        // move\n        const draw = {\n          fromPos: {\n            x: selectedField.x,\n            y: selectedField.y\n          },\n          toPos: {\n            x: x,\n            y: y\n          }\n        };\n        this.play(draw);\n      } else if (isEmptyField) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {},\n          pieceId: \"\"\n        });\n      } else {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          },\n          pieceId: boardView[y][x].symbol\n        });\n      }\n    } else {\n      if (!isEmptyField) {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          },\n          pieceId: boardView[y][x].symbol\n        });\n      }\n    }\n  }\n\n  play(draw) {\n    const {\n      gameId,\n      turn,\n      winner\n    } = this.state;\n\n    if (winner === null) {\n      mainService.play(gameId, draw).then(res => {\n        //            console.log(\"played\", turn);\n        const nextTurn = turn === \"P1\" ? \"P2\" : \"P1\";\n        this.setState({\n          possibleMoves: [],\n          selectedField: {},\n          turn: nextTurn\n        });\n        this.updateGameData();\n        this.loadBoard();\n      });\n    }\n  }\n\n  clickOnCanvas(event) {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - Config.boardTopx;\n    const y = event.clientY - rect.top - Config.boardTopy;\n    this.selectField((x - x % Config.squareSize) / Config.squareSize, (y - y % Config.squareSize) / Config.squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      boardView,\n      possibleMoves,\n      selectedField,\n      me,\n      pieces,\n      isInited,\n      winner,\n      pieceId,\n      pieceCard,\n      actions\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        const squareSize = Config.squareSize;\n        const boardTopx = Config.boardTopx;\n        const boardTopy = Config.boardTopy;\n        ctx.canvas.width = squareSize * (width + 1) + Config.card.width;\n        ctx.canvas.height = squareSize * (height + 1); //draw card\n\n        if (pieceId !== \"\") {\n          ctx.drawImage(pieceCard.drawPieceCard(actions.get(pieceId), pieces.get(pieceId)), squareSize * (width + 1), 0);\n        } //draw board\n\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 === 0 ? \"#D2B48C\" : \"PeachPuff\";\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          }\n        }\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.45;\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < possibleMoves.length; k++) {\n            let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0] && isInited) {\n          ctx.fillStyle = \"black\";\n          ctx.font = \"20px Arial\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let xOffset = boardTopx + (i + 0.115) * squareSize;\n                let yOffset = boardTopy + (j + 0.05) * squareSize;\n\n                if (pieces.length !== 0) {\n                  //  console.log(pieces);\n                  ctx.drawImage(pieces.get(boardView[j][i].symbol), xOffset, yOffset);\n                } //}\n\n              }\n            }\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height); // draw winner\n\n        if (winner !== null) {\n          ctx.fillStyle = \"rgba(100,100,100,0.8)\";\n          ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n          ctx.fillStyle = \"red\";\n          ctx.font = '30px serif';\n          ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n        }\n      }\n    };\n\n    return draw;\n  }\n\n  drawGameText() {\n    const {\n      me,\n      turn\n    } = this.state;\n\n    if (me === turn) {\n      return \"Your turn!\";\n    }\n\n    return \"Wait for opponents turn...\";\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      round,\n      isInited,\n      winner\n    } = this.state;\n\n    if (isInited) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [this.drawGameText(), \" \", \" \", \" \", winner !== null && \"The Winner is\" + winner.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"mb-5\",\n            children: [/*#__PURE__*/_jsxDEV(Canvas, {\n              draw: this.drawMethod(),\n              onClick: this.clickOnCanvas\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: inviteLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\"Player2: \", player2.name]\n              }, void 0, true), \" \", \" round:\", round]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this);\n    }\n\n    return \"\";\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceGenerator","PieceCard","Config","serverConfig","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","host","isInited","player1","player2","width","height","pieces","pieceImages","actions","pieceCard","boardData","boardView","turn","round","winner","selectedField","possibleMoves","pieceId","selectField","bind","clickOnCanvas","drawMethod","play","loadBoard","loadPieceData","componentDidMount","loadTimer","setInterval","updateGameData","updateInterval","getGameData","then","res","setState","data","getBoard","bv","createBoard","board","console","log","Map","i","length","j","symbol","get","undefined","pg","squareSize","set","drawPieceCanvas","owner","pieceData","x","y","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","boardTopx","clientY","top","boardTopy","ctx","frameCount","canvas","card","drawImage","drawPieceCard","fillStyle","xOffset","yOffset","fillRect","globalAlpha","k","font","strokeStyle","strokeRect","fillText","name","drawGameText","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,cAAP,MAA2B,yCAA3B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;;;AAGA,MAAMC,aAAN,SAA4BP,SAA5B,CAAsC;AAElCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCJ,MADxC;AAETK,MAAAA,EAAE,EAAEJ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCE,MAFpC;AAGTC,MAAAA,UAAU,EAAE,YAAYZ,YAAY,CAACa,IAAzB,GAAgC,iBAAhC,GAAoDP,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCJ,MAHhG;AAKT;AACAS,MAAAA,QAAQ,EAAE,KAND;AAQT;AACAC,MAAAA,OAAO,EAAE,EATA;AAUTC,MAAAA,OAAO,EAAE,EAVA;AAWTC,MAAAA,KAAK,EAAE,EAXE;AAYTC,MAAAA,MAAM,EAAE,EAZC;AAaTC,MAAAA,MAAM,EAAE,EAbC;AAaG;AAEZC,MAAAA,WAAW,EAAE,EAfJ;AAeQ;AACjBC,MAAAA,OAAO,EAAE,EAhBA;AAgBI;AACbC,MAAAA,SAAS,EAAE,IAAIxB,SAAJ,EAjBF;AAmBT;AACAyB,MAAAA,SAAS,EAAE,EApBF;AAoBM;AACfC,MAAAA,SAAS,EAAE,EArBF;AAqBM;AACfC,MAAAA,IAAI,EAAE,OAtBG;AAuBTC,MAAAA,KAAK,EAAE,CAvBE;AAwBTC,MAAAA,MAAM,EAAE,IAxBC;AA0BT;AACAC,MAAAA,aAAa,EAAE,EA3BN;AA4BTC,MAAAA,aAAa,EAAE,EA5BN;AA6BTC,MAAAA,OAAO,EAAE;AA7BA,KAAb;AA+BA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,IAAL,GAAY,KAAKA,IAAL,CAAUH,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKK,aAAL,GAAqB,KAAKA,aAAL,CAAmBL,IAAnB,CAAwB,IAAxB,CAArB;AAEH;;AAEDM,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAExB,MAAAA;AAAF,QAAe,KAAKV,KAA1B,CADgB,CAGhB;;AACA,QAAI,CAACU,QAAL,EAAe;AACX,WAAKuB,aAAL;AACH,KANe,CAQhB;;;AACA,UAAME,SAAS,GAAGC,WAAW,CAAC,MAAM;AAChC,WAAKC,cAAL;AAEH,KAH4B,EAG1B1C,MAAM,CAAC2C,cAHmB,CAA7B;AAIH,GAzDiC,CA2DlC;;;AACAD,EAAAA,cAAc,GAAG;AACb,UAAM;AAAEpC,MAAAA,MAAF;AAAUoB,MAAAA;AAAV,QAAmB,KAAKrB,KAA9B;AACAT,IAAAA,WAAW,CAACgD,WAAZ,CAAwBtC,MAAxB,EAAgCuC,IAAhC,CAAsCC,GAAD,IAAS;AAI1C,WAAKC,QAAL,CAAc;AAAE/B,QAAAA,OAAO,EAAE8B,GAAG,CAACE,IAAJ,CAAShC,OAApB;AAA6BC,QAAAA,OAAO,EAAE6B,GAAG,CAACE,IAAJ,CAAS/B,OAA/C;AAAwDS,QAAAA,IAAI,EAAEoB,GAAG,CAACE,IAAJ,CAAStB,IAAvE;AAA6EC,QAAAA,KAAK,EAAEmB,GAAG,CAACE,IAAJ,CAASrB,KAA7F;AAAoGC,QAAAA,MAAM,EAAEkB,GAAG,CAACE,IAAJ,CAASpB;AAArH,OAAd,EAJ0C,CAK1C;;AACA,UAAIF,IAAI,KAAKoB,GAAG,CAACE,IAAJ,CAAStB,IAAtB,EAA4B;AAExB,aAAKW,SAAL;AACH,OATyC,CAW1C;;AACH,KAZD;AAaH,GA3EiC,CA8ElC;;;AACAC,EAAAA,aAAa,GAAG;AACZ,UAAM;AAAEhC,MAAAA;AAAF,QAAa,KAAKD,KAAxB;AACAT,IAAAA,WAAW,CAACqD,QAAZ,CAAqB3C,MAArB,EAA6BuC,IAA7B,CAAmCC,GAAD,IAAS;AACvC,UAAII,EAAE,GAAG,KAAKC,WAAL,CAAiBL,GAAG,CAACE,IAAJ,CAASI,KAA1B,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AACA,UAAI9B,MAAM,GAAG,IAAImC,GAAJ,EAAb;AACA,UAAIjC,OAAO,GAAG,IAAIiC,GAAJ,EAAd;AACA,UAAIlC,WAAW,GAAG,IAAIkC,GAAJ,EAAlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,EAAE,CAACO,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,EAAE,CAAC,CAAD,CAAF,CAAMO,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,cAAIR,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASC,MAAT,KAAoB,EAApB,IAA0BvC,MAAM,CAACwC,GAAP,CAAWV,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASC,MAApB,MAAgCE,SAA9D,EAAyE;AACrE,gBAAIC,EAAE,GAAG,IAAIhE,cAAJ,CAAmBE,MAAM,CAAC+D,UAAP,GAAoB,GAAvC,EAA4C/D,MAAM,CAAC+D,UAAP,GAAoB,IAAhE,EAAsEb,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASC,MAA/E,CAAT;AACAvC,YAAAA,MAAM,CAAC4C,GAAP,CAAWd,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASC,MAApB,EAA4BG,EAAE,CAACG,eAAH,CAAmBf,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASQ,KAA5B,CAA5B,EAFqE,CAIrE;;AAEAtE,YAAAA,WAAW,CAACuE,SAAZ,CAAsBjB,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASC,MAA/B,EAAuCd,IAAvC,CAA4CC,GAAG,IAAI;AAC/CzB,cAAAA,WAAW,CAAC2C,GAAZ,CAAgBd,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASC,MAAzB;AACArC,cAAAA,OAAO,CAAC0C,GAAR,CAAYd,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASC,MAArB,EAA6Bb,GAAG,CAACE,IAAjC;AACH,aAHD;AAMH;AACJ;AACJ;;AAED,WAAKD,QAAL,CAAc;AAAE3B,QAAAA,MAAM,EAAEA,MAAV;AAAkBE,QAAAA,OAAO,EAAEA,OAA3B;AAAoCD,QAAAA,WAAW,EAAEA,WAAjD;AAA8DN,QAAAA,QAAQ,EAAE,IAAxE;AAA8EU,QAAAA,SAAS,EAAEyB,EAAzF;AAA6FhC,QAAAA,KAAK,EAAEgC,EAAE,CAAC,CAAD,CAAF,CAAMO,MAA1G;AAAkHtC,QAAAA,MAAM,EAAE+B,EAAE,CAACO;AAA7H,OAAd;AACH,KAzBD;AA0BH,GA3GiC,CA6GlC;;;AACApB,EAAAA,SAAS,GAAG;AACR,UAAM;AAAE/B,MAAAA;AAAF,QAAa,KAAKD,KAAxB;AACAT,IAAAA,WAAW,CAACqD,QAAZ,CAAqB3C,MAArB,EAA6BuC,IAA7B,CAAmCC,GAAD,IAAS;AACvC,UAAII,EAAE,GAAG,KAAKC,WAAL,CAAiBL,GAAG,CAACE,IAAJ,CAASI,KAA1B,CAAT;AACA,WAAKL,QAAL,CAAc;AAAEvB,QAAAA,SAAS,EAAEsB,GAAG,CAACE,IAAjB;AAAuBvB,QAAAA,SAAS,EAAEyB,EAAlC;AAAsChC,QAAAA,KAAK,EAAEgC,EAAE,CAAC,CAAD,CAAF,CAAMO,MAAnD;AAA2DtC,QAAAA,MAAM,EAAE+B,EAAE,CAACO;AAAtE,OAAd;AACH,KAHD;AAIH,GApHiC,CAuHlC;;;AACAN,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,QAAIF,EAAE,GAAGE,KAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,EAAE,CAACO,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,EAAE,CAAC,CAAD,CAAF,CAAMO,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,YAAIN,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,MAAgB,IAApB,EAA0B;AACtBR,UAAAA,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,IAAW;AACPC,YAAAA,MAAM,EAAE,EADD;AAEPO,YAAAA,KAAK,EAAE,EAFA;AAGPpC,YAAAA,aAAa,EAAE;AAHR,WAAX;AAKH,SAND,MAMO;AACHoB,UAAAA,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,IAAW;AACPC,YAAAA,MAAM,EAAET,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASC,MADV;AAEPO,YAAAA,KAAK,EAAEhB,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAASQ,KAFT;AAGPpC,YAAAA,aAAa,EAAEoB,EAAE,CAACM,CAAD,CAAF,CAAME,CAAN,EAAS5B;AAHjB,WAAX;AAKH;AACJ;AACJ;;AACD,WAAOoB,EAAP;AACH;;AAGDlB,EAAAA,WAAW,CAACoC,CAAD,EAAIC,CAAJ,EAAO;AACd,UAAM;AAAE5C,MAAAA,SAAF;AAAaI,MAAAA,aAAb;AAA4BlB,MAAAA,EAA5B;AAAgCe,MAAAA,IAAhC;AAAsCI,MAAAA;AAAtC,QAAwD,KAAKzB,KAAnE;AACA,UAAMiE,YAAY,GAAG3D,EAAE,KAAKe,IAA5B;AACA,UAAM6C,YAAY,GAAG9C,SAAS,CAAC4C,CAAD,CAAT,CAAaD,CAAb,EAAgBT,MAAhB,KAA2B,EAAhD;AACA,UAAMa,WAAW,GAAGjE,IAAI,CAACkE,SAAL,CAAe5C,aAAf,MAAkC,IAAtD;;AAEA,QAAI2C,WAAJ,EAAiB;AACb,YAAME,iBAAiB,GAAG7C,aAAa,CAACuC,CAAd,KAAoBA,CAApB,IAAyBvC,aAAa,CAACwC,CAAd,KAAoBA,CAAvE;AACA,YAAMM,cAAc,GAAG7C,aAAa,CAAC8C,IAAd,CAAmBC,IAAI,IAAIA,IAAI,CAACT,CAAL,KAAWA,CAAX,IAAgBS,IAAI,CAACR,CAAL,KAAWA,CAAtD,CAAvB;AACA,YAAMS,aAAa,GAAGnE,EAAE,KAAKc,SAAS,CAACI,aAAa,CAACwC,CAAf,CAAT,CAA2BxC,aAAa,CAACuC,CAAzC,EAA4CF,KAAzE,CAHa,CAKb;;AAEA,UAAIQ,iBAAJ,EAAuB;AACnB;AACA,aAAK3B,QAAL,CAAc;AACVjB,UAAAA,aAAa,EAAE,EADL;AAEVD,UAAAA,aAAa,EAAE,EAFL;AAGVE,UAAAA,OAAO,EAAE;AAHC,SAAd;AAKH,OAPD,MAOO,IAAI+C,aAAa,IAAIH,cAAjB,IAAmCL,YAAvC,EAAqD;AACxD;AACA,cAAMS,IAAI,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAEZ,YAAAA,CAAC,EAAEvC,aAAa,CAACuC,CAAnB;AAAsBC,YAAAA,CAAC,EAAExC,aAAa,CAACwC;AAAvC,WAAX;AAAuDY,UAAAA,KAAK,EAAE;AAAEb,YAAAA,CAAC,EAAEA,CAAL;AAAQC,YAAAA,CAAC,EAAEA;AAAX;AAA9D,SAAb;AACA,aAAKjC,IAAL,CAAU2C,IAAV;AACH,OAJM,MAIA,IAAIR,YAAJ,EAAkB;AACrB;AACA,aAAKxB,QAAL,CAAc;AACVjB,UAAAA,aAAa,EAAE,EADL;AAEVD,UAAAA,aAAa,EAAE,EAFL;AAGVE,UAAAA,OAAO,EAAE;AAHC,SAAd;AAKH,OAPM,MAOA;AACH;AACA,aAAKgB,QAAL,CAAc;AACVjB,UAAAA,aAAa,EAAEL,SAAS,CAAC4C,CAAD,CAAT,CAAaD,CAAb,EAAgBtC,aADrB;AAEVD,UAAAA,aAAa,EAAE;AAAEuC,YAAAA,CAAC,EAAEA,CAAL;AAAQC,YAAAA,CAAC,EAAEA;AAAX,WAFL;AAGVtC,UAAAA,OAAO,EAAEN,SAAS,CAAC4C,CAAD,CAAT,CAAaD,CAAb,EAAgBT;AAHf,SAAd;AAKH;AACJ,KAjCD,MAiCO;AACH,UAAI,CAACY,YAAL,EAAmB;AACf;AACA,aAAKxB,QAAL,CAAc;AACVjB,UAAAA,aAAa,EAAEL,SAAS,CAAC4C,CAAD,CAAT,CAAaD,CAAb,EAAgBtC,aADrB;AAEVD,UAAAA,aAAa,EAAE;AAAEuC,YAAAA,CAAC,EAAEA,CAAL;AAAQC,YAAAA,CAAC,EAAEA;AAAX,WAFL;AAGVtC,UAAAA,OAAO,EAAEN,SAAS,CAAC4C,CAAD,CAAT,CAAaD,CAAb,EAAgBT;AAHf,SAAd;AAKH;AACJ;AACJ;;AAEDvB,EAAAA,IAAI,CAAC2C,IAAD,EAAO;AACP,UAAM;AAAEzE,MAAAA,MAAF;AAAUoB,MAAAA,IAAV;AAAgBE,MAAAA;AAAhB,QAA2B,KAAKvB,KAAtC;;AACA,QAAIuB,MAAM,KAAK,IAAf,EAAqB;AACjBhC,MAAAA,WAAW,CAACwC,IAAZ,CAAiB9B,MAAjB,EAAyByE,IAAzB,EAA+BlC,IAA/B,CAAqCC,GAAD,IAAS;AACzC;AACA,cAAMoC,QAAQ,GAAIxD,IAAI,KAAK,IAAV,GAAkB,IAAlB,GAAyB,IAA1C;AACA,aAAKqB,QAAL,CAAc;AACVjB,UAAAA,aAAa,EAAE,EADL;AAEVD,UAAAA,aAAa,EAAE,EAFL;AAGVH,UAAAA,IAAI,EAAEwD;AAHI,SAAd;AAMA,aAAKxC,cAAL;AACA,aAAKL,SAAL;AACH,OAXD;AAYH;AACJ;;AAKDH,EAAAA,aAAa,CAACiD,KAAD,EAAQ;AACjB,UAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,qBAAb,EAAb;AACA,UAAMlB,CAAC,GAAGe,KAAK,CAACI,OAAN,GAAgBH,IAAI,CAACI,IAArB,GAA4BxF,MAAM,CAACyF,SAA7C;AACA,UAAMpB,CAAC,GAAGc,KAAK,CAACO,OAAN,GAAgBN,IAAI,CAACO,GAArB,GAA2B3F,MAAM,CAAC4F,SAA5C;AACA,SAAK5D,WAAL,CAAiB,CAACoC,CAAC,GAAGA,CAAC,GAAGpE,MAAM,CAAC+D,UAAhB,IAA+B/D,MAAM,CAAC+D,UAAvD,EAAoE,CAACM,CAAC,GAAGA,CAAC,GAAGrE,MAAM,CAAC+D,UAAhB,IAA+B/D,MAAM,CAAC+D,UAA1G;AACH;;AAED5B,EAAAA,UAAU,GAAG;AACT,UAAM;AAAEjB,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBM,MAAAA,SAAjB;AAA4BK,MAAAA,aAA5B;AAA2CD,MAAAA,aAA3C;AAA0DlB,MAAAA,EAA1D;AAA8DS,MAAAA,MAA9D;AAAsEL,MAAAA,QAAtE;AAAgFa,MAAAA,MAAhF;AAAwFG,MAAAA,OAAxF;AAAiGR,MAAAA,SAAjG;AAA4GD,MAAAA;AAA5G,QAAwH,KAAKjB,KAAnI;;AAGA,UAAM0E,IAAI,GAAG,CAACc,GAAD,EAAMC,UAAN,KAAqB;AAC9B,UAAIrE,SAAJ,EAAe;AACX,cAAMsC,UAAU,GAAG/D,MAAM,CAAC+D,UAA1B;AACA,cAAM0B,SAAS,GAAGzF,MAAM,CAACyF,SAAzB;AACA,cAAMG,SAAS,GAAG5F,MAAM,CAAC4F,SAAzB;AAEAC,QAAAA,GAAG,CAACE,MAAJ,CAAW7E,KAAX,GAAmB6C,UAAU,IAAI7C,KAAK,GAAG,CAAZ,CAAV,GAA2BlB,MAAM,CAACgG,IAAP,CAAY9E,KAA1D;AACA2E,QAAAA,GAAG,CAACE,MAAJ,CAAW5E,MAAX,GAAoB4C,UAAU,IAAI5C,MAAM,GAAG,CAAb,CAA9B,CANW,CAQX;;AACA,YAAIY,OAAO,KAAK,EAAhB,EAAoB;AAChB8D,UAAAA,GAAG,CAACI,SAAJ,CAAc1E,SAAS,CAAC2E,aAAV,CAAwB5E,OAAO,CAACsC,GAAR,CAAY7B,OAAZ,CAAxB,EAA8CX,MAAM,CAACwC,GAAP,CAAW7B,OAAX,CAA9C,CAAd,EAAkFgC,UAAU,IAAI7C,KAAK,GAAG,CAAZ,CAA5F,EAA4G,CAA5G;AACH,SAXU,CAaX;;;AACA,aAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtC,KAApB,EAA2BsC,CAAC,EAA5B,EAAgC;AAC5B,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvC,MAApB,EAA4BuC,CAAC,EAA7B,EAAiC;AAC7BmC,YAAAA,GAAG,CAACM,SAAJ,GAAiB,CAAC3C,CAAC,GAAGE,CAAL,IAAU,CAAV,KAAgB,CAAjB,GAAsB,SAAtB,GAAkC,WAAlD;AACA,gBAAI0C,OAAO,GAAGX,SAAS,GAAG/B,CAAC,GAAGK,UAA9B;AACA,gBAAIsC,OAAO,GAAGT,SAAS,GAAGpC,CAAC,GAAGO,UAA9B;AACA8B,YAAAA,GAAG,CAACS,QAAJ,CAAaF,OAAb,EAAsBC,OAAtB,EAA+BtC,UAA/B,EAA2CA,UAA3C;AACH;AACJ;;AAED,YAAIxD,IAAI,CAACkE,SAAL,CAAe5C,aAAf,MAAkC,IAAtC,EAA4C;AACxC;AACAgE,UAAAA,GAAG,CAACU,WAAJ,GAAkB,IAAlB;AACAV,UAAAA,GAAG,CAACM,SAAJ,GAAiBxF,EAAE,KAAKc,SAAS,CAACI,aAAa,CAACwC,CAAf,CAAT,CAA2BxC,aAAa,CAACuC,CAAzC,EAA4CF,KAApD,GAA6D,YAA7D,GAA4E,KAA5F;;AACA,eAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1E,aAAa,CAAC2B,MAAlC,EAA0C+C,CAAC,EAA3C,EAA+C;AAC3C,gBAAIJ,OAAO,GAAGX,SAAS,GAAG3D,aAAa,CAAC0E,CAAD,CAAb,CAAiBpC,CAAjB,GAAqBL,UAA/C;AACA,gBAAIsC,OAAO,GAAGT,SAAS,GAAG9D,aAAa,CAAC0E,CAAD,CAAb,CAAiBnC,CAAjB,GAAqBN,UAA/C;AAEA8B,YAAAA,GAAG,CAACS,QAAJ,CAAaF,OAAb,EAAsBC,OAAtB,EAA+BtC,UAA/B,EAA2CA,UAA3C;AACH,WATuC,CAWxC;;;AACA8B,UAAAA,GAAG,CAACM,SAAJ,GAAiBxF,EAAE,KAAKc,SAAS,CAACI,aAAa,CAACwC,CAAf,CAAT,CAA2BxC,aAAa,CAACuC,CAAzC,EAA4CF,KAApD,GAA6D,OAA7D,GAAuE,SAAvF;AACA2B,UAAAA,GAAG,CAACS,QAAJ,CAAab,SAAS,GAAG5D,aAAa,CAACuC,CAAd,GAAkBL,UAA3C,EAAuD6B,SAAS,GAAG/D,aAAa,CAACwC,CAAd,GAAkBN,UAArF,EAAiGA,UAAjG,EAA6GA,UAA7G;AACA8B,UAAAA,GAAG,CAACU,WAAJ,GAAkB,CAAlB;AACH,SAtCU,CAwCX;;;AACA,YAAI9E,SAAS,CAAC,CAAD,CAAT,IAAgBV,QAApB,EAA8B;AAC1B8E,UAAAA,GAAG,CAACM,SAAJ,GAAgB,OAAhB;AACAN,UAAAA,GAAG,CAACY,IAAJ,GAAW,YAAX;;AACA,eAAK,IAAIjD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtC,KAApB,EAA2BsC,CAAC,EAA5B,EAAgC;AAC5B,iBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvC,MAApB,EAA4BuC,CAAC,EAA7B,EAAiC;AAC7B,kBAAIjC,SAAS,CAACiC,CAAD,CAAT,CAAaF,CAAb,EAAgBG,MAAhB,KAA2B,EAA/B,EAAmC;AAE/B,oBAAIyC,OAAO,GAAGX,SAAS,GAAG,CAACjC,CAAC,GAAG,KAAL,IAAcO,UAAxC;AACA,oBAAIsC,OAAO,GAAGT,SAAS,GAAG,CAAClC,CAAC,GAAG,IAAL,IAAaK,UAAvC;;AACA,oBAAI3C,MAAM,CAACqC,MAAP,KAAkB,CAAtB,EAAyB;AACrB;AAEAoC,kBAAAA,GAAG,CAACI,SAAJ,CAAc7E,MAAM,CAACwC,GAAP,CAAWnC,SAAS,CAACiC,CAAD,CAAT,CAAaF,CAAb,EAAgBG,MAA3B,CAAd,EAAkDyC,OAAlD,EAA2DC,OAA3D;AACH,iBAR8B,CAS/B;;AAGH;AACJ;AACJ;AACJ,SA7DU,CA+DX;;;AACAR,QAAAA,GAAG,CAACa,WAAJ,GAAkB,OAAlB;AACAb,QAAAA,GAAG,CAACc,UAAJ,CAAelB,SAAf,EAA0BG,SAA1B,EAAqC7B,UAAU,GAAG7C,KAAlD,EAAyD6C,UAAU,GAAG5C,MAAtE,EAjEW,CAoEX;;AACA,YAAIS,MAAM,KAAK,IAAf,EAAqB;AACjBiE,UAAAA,GAAG,CAACM,SAAJ,GAAgB,uBAAhB;AACAN,UAAAA,GAAG,CAACS,QAAJ,CAAab,SAAb,EAAwBG,SAAxB,EAAmC7B,UAAU,GAAG7C,KAAhD,EAAuD6C,UAAU,GAAG5C,MAApE;AAEA0E,UAAAA,GAAG,CAACM,SAAJ,GAAgB,KAAhB;AACAN,UAAAA,GAAG,CAACY,IAAJ,GAAW,YAAX;AACAZ,UAAAA,GAAG,CAACe,QAAJ,CAAahF,MAAM,CAACiF,IAAP,GAAc,QAA3B,EAAqC9C,UAAU,GAAG7C,KAAb,GAAqB,CAA1D,EAA6D6C,UAAU,GAAG5C,MAAb,GAAsB,CAAnF;AACH;AAEJ;AACJ,KAhFD;;AAiFA,WAAO4D,IAAP;AAEH;;AAED+B,EAAAA,YAAY,GAAG;AACX,UAAM;AAAEnG,MAAAA,EAAF;AAAMe,MAAAA;AAAN,QAAe,KAAKrB,KAA1B;;AACA,QAAIM,EAAE,KAAKe,IAAX,EAAiB;AACb,aAAO,YAAP;AACH;;AACD,WAAO,4BAAP;AACH;;AAGDqF,EAAAA,MAAM,GAAG;AACL,UAAM;AAAElG,MAAAA,UAAF;AAAcG,MAAAA,OAAd;AAAuBC,MAAAA,OAAvB;AAAgCU,MAAAA,KAAhC;AAAuCZ,MAAAA,QAAvC;AAAiDa,MAAAA;AAAjD,QAA4D,KAAKvB,KAAvE;;AAEA,QAAIU,QAAJ,EAAc;AACV,0BACI;AAAA,gCACI;AAAA,qBAAM,KAAK+F,YAAL,EAAN,OAA4B,GAA5B,OAAkClF,MAAM,KAAK,IAAX,IAAmB,kBAAkBA,MAAM,CAACiF,IAA9E;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCAMI;AAAK,YAAA,KAAK,EAAC,MAAX;AAAA,oCACI,QAAC,MAAD;AAAQ,cAAA,IAAI,EAAE,KAAK1E,UAAL,EAAd;AAAiC,cAAA,OAAO,EAAE,KAAKD;AAA/C;AAAA;AAAA;AAAA;AAAA,oBADJ,eAGI;AAAA,wBAAMrB;AAAN;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA,sCACcG,OAAO,IAAIA,OAAO,CAAC6F,IADjC,OACwC5F,OAAO,iBAAI;AAAA,wCAAYA,OAAO,CAAC4F,IAApB;AAAA,8BADnD,OACkF,SADlF,EAC6FlF,KAD7F;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAoBH;;AACD,WAAO,EAAP;AACH;;AA3ViC;;AA8VtC,eAAezB,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCard from './piece-card';\nimport Config from \"./config.json\";\nimport serverConfig from \"../services/server-config.json\";\n\n\nclass GameComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://\" + serverConfig.host + \":3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n\n            //updater\n            isInited: false,\n\n            //game consts\n            player1: {},\n            player2: {},\n            width: 16,\n            height: 16,\n            pieces: {}, // images of pieces\n\n            pieceImages: {}, //cardImages of pieces\n            actions: {}, // actions of pieces\n            pieceCard: new PieceCard(),\n\n            // game state\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            turn: \"undef\",\n            round: 0,\n            winner: null,\n\n            //selection\n            selectedField: {},\n            possibleMoves: [],\n            pieceId: \"\",\n        }\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n        this.loadBoard = this.loadBoard.bind(this);\n        this.loadPieceData = this.loadPieceData.bind(this);\n\n    }\n\n    componentDidMount() {\n        const { isInited } = this.state;\n\n        //Init function \n        if (!isInited) {\n            this.loadPieceData();\n        }\n\n        //start updater\n        const loadTimer = setInterval(() => {\n            this.updateGameData();\n\n        }, Config.updateInterval);\n    }\n\n    //check for ugameupdate\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n\n\n\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round, winner: res.data.winner });\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard();\n            }\n\n            //check game end ?\n        });\n    }\n\n\n    // initial creating piece graphics\n    loadPieceData() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            console.log(bv)\n            var pieces = new Map();\n            var actions = new Map();\n            var pieceImages = new Map();\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (bv[i][j].symbol !== \"\" && pieces.get(bv[i][j].symbol) === undefined) {\n                        var pg = new PieceGenerator(Config.squareSize * 0.8, Config.squareSize * 0.95, bv[i][j].symbol);\n                        pieces.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n\n                        //TODO: load actionsdata\n\n                        mainService.pieceData(bv[i][j].symbol).then(res => {\n                            pieceImages.set(bv[i][j].symbol)\n                            actions.set(bv[i][j].symbol, res.data);\n                        });\n\n\n                    }\n                }\n            }\n\n            this.setState({ pieces: pieces, actions: actions, pieceImages: pieceImages, isInited: true, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    //update Board\n    loadBoard() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            this.setState({ boardData: res.data, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n\n    // save Board data\n    createBoard(board) {\n        let bv = board;\n        console.log(bv);\n        for (let i = 0; i < bv.length; i++) {\n            for (let j = 0; j < bv[0].length; j++) {\n                if (board[i][j] === null) {\n                    bv[i][j] = {\n                        symbol: \"\",\n                        owner: \"\",\n                        possibleMoves: []\n                    };\n                } else {\n                    bv[i][j] = {\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves\n                    };\n                }\n            }\n        }\n        return bv;\n    }\n\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, possibleMoves } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y },\n                    pieceId: boardView[y][x].symbol\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y },\n                    pieceId: boardView[y][x].symbol\n                });\n            }\n        }\n    }\n\n    play(draw) {\n        const { gameId, turn, winner } = this.state;\n        if (winner === null) {\n            mainService.play(gameId, draw).then((res) => {\n                //            console.log(\"played\", turn);\n                const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    turn: nextTurn\n                });\n\n                this.updateGameData();\n                this.loadBoard();\n            });\n        }\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - Config.boardTopx;\n        const y = event.clientY - rect.top - Config.boardTopy;\n        this.selectField((x - x % Config.squareSize) / (Config.squareSize), (y - y % Config.squareSize) / (Config.squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, boardView, possibleMoves, selectedField, me, pieces, isInited, winner, pieceId, pieceCard, actions } = this.state;\n\n\n        const draw = (ctx, frameCount) => {\n            if (boardView) {\n                const squareSize = Config.squareSize;\n                const boardTopx = Config.boardTopx;\n                const boardTopy = Config.boardTopy;\n\n                ctx.canvas.width = squareSize * (width + 1) + Config.card.width;\n                ctx.canvas.height = squareSize * (height + 1);\n\n                //draw card\n                if (pieceId !== \"\") {\n                    ctx.drawImage(pieceCard.drawPieceCard(actions.get(pieceId), pieces.get(pieceId)), squareSize * (width + 1), 0);\n                }\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 === 0) ? \"#D2B48C\" : \"PeachPuff\";\n                        let xOffset = boardTopx + j * squareSize;\n                        let yOffset = boardTopy + i * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.45;\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < possibleMoves.length; k++) {\n                        let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0] && isInited) {\n                    ctx.fillStyle = \"black\";\n                    ctx.font = \"20px Arial\";\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + (i + 0.115) * squareSize;\n                                let yOffset = boardTopy + (j + 0.05) * squareSize;\n                                if (pieces.length !== 0) {\n                                    //  console.log(pieces);\n\n                                    ctx.drawImage(pieces.get(boardView[j][i].symbol), xOffset, yOffset);\n                                }\n                                //}\n\n\n                            }\n                        }\n                    }\n                }\n\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n\n                // draw winner\n                if (winner !== null) {\n                    ctx.fillStyle = \"rgba(100,100,100,0.8)\"\n                    ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n                    ctx.fillStyle = \"red\"\n                    ctx.font = '30px serif';\n                    ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n                }\n\n            }\n        }\n        return draw;\n\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2, round, isInited, winner } = this.state;\n\n        if (isInited) {\n            return (\n                <div>\n                    <div>{this.drawGameText()} {\" \"} {winner !== null && \"The Winner is\" + winner.name}</div>\n                    <div className=\"row\">\n                        {/* <div class=\"mb-3 mt-5\">\n                            <div className=\"card\">\n                                {pieceId !== \"\" && <PieceCardComponent pieceId={pieceId}></PieceCardComponent>}\n                            </div>\n                        </div> */}\n                        <div class=\"mb-5\">\n                            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n\n                            <div>{inviteLink}</div>\n                            <div>\n                                Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>} {\" round:\"}{round}\n                            </div>\n                        </div>\n                    </div >\n                </div>\n            )\n        }\n        return \"\";\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}