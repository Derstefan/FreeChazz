{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.component.jsx\";\nimport React, { Component } from 'react';\n\nclass PieceGeneratorComponent extends Component {\n  static nextRand() {\n    var hi = this.seed / (2147483647 / 48271);\n    var lo = this.seed % (2147483647 / 48271);\n    var test = 48271 * lo - 2147483647 % 48271 * hi;\n\n    if (test > 0) {\n      this.seed = test;\n    } else {\n      this.seed = test + 2147483647;\n    }\n\n    return this.seed * (1.0 / 2147483647);\n  }\n\n  static drawPolygon() {\n    var pointNumber = this.randNumOfRange(3, 5);\n    console.log(\"pointNumber=\" + pointNumber); //console.log(Math.floor(this.nextRand() * 16777215).toString(16));\n\n    var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n    var pts = \"\";\n    var ptsMirror = \"\";\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.randNumOfRange(0, this.width);\n      var y = this.randNumOfRange(0, this.height);\n      pts += x + \",\" + y + \" \";\n      var x2 = this.width - x;\n      ptsMirror += x2 + \",\" + y + \" \"; //  console.log(i);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: pts,\n        fill: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: ptsMirror,\n        fill: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  static randNumOfRange(a, b) {\n    return Math.round(this.nextRand() * (b - a) + a);\n  }\n\n  static drawPiece(width, height, seed, owner) {\n    this.seed = seed;\n    this.width = width;\n    this.height = height;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        height: this.height,\n        width: this.width,\n        children: [this.drawPolygon(), this.drawPolygon(), this.drawPolygon(), this.drawPolygon(), this.drawPolygon()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n  static drawPolygonCanvas(c2) {\n    var pointNumber = this.randNumOfRange(3, 10); //var pointNumber = 3;\n\n    console.log(\"pointNumber=\" + pointNumber); //console.log(Math.floor(this.nextRand() * 16777215).toString(16));\n\n    var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16); // var pts = \"\";\n    // var ptsMirror = \"\";\n\n    c2.fillStyle = color;\n    c2.beginPath();\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.randNumOfRange(0, this.width);\n      var y = this.randNumOfRange(0, this.height); //pts += x + \",\" + y + \" \";\n\n      if (i === 0) {\n        c2.moveTo(x, y);\n      } else {\n        c2.lineTo(x, y);\n      }\n    }\n\n    c2.closePath();\n    c2.fill();\n    c2.fillStyle = color;\n    c2.beginPath();\n\n    for (var j = j; j < pointNumber; j++) {\n      var x = this.randNumOfRange(0, this.width);\n      var y = this.randNumOfRange(0, this.height);\n      var x2 = this.width - x; //  ptsMirror += x2 + \",\" + y + \" \";\n\n      if (j === 0) {\n        c2.moveTo(x2, y);\n      } else {\n        c2.lineTo(x2, y);\n      }\n    }\n\n    c2.closePath();\n    c2.fill(); // return <><polygon points={pts} fill={color} />\n    //     <polygon points={ptsMirror} fill={color} /></>;\n  }\n\n  static randNumOfRange(a, b) {\n    return Math.round(this.nextRand() * (b - a) + a);\n  }\n\n  static drawPieceCanvas(width, height, seed, owner) {\n    this.seed = seed;\n    this.width = width;\n    this.height = height;\n    var canvas2 = document.createElement('canvas');\n    canvas2.width = width;\n    canvas2.height = height;\n    var context2 = canvas2.getContext('2d');\n    this.drawPolygonCanvas(context2);\n    return canvas2;\n  }\n\n}\n\nPieceGeneratorComponent.seed = 213478;\nPieceGeneratorComponent.width = 600;\nPieceGeneratorComponent.height = 600;\nexport default PieceGeneratorComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.component.jsx"],"names":["React","Component","PieceGeneratorComponent","nextRand","hi","seed","lo","test","drawPolygon","pointNumber","randNumOfRange","console","log","color","Math","floor","toString","pts","ptsMirror","i","x","width","y","height","x2","a","b","round","drawPiece","owner","drawPolygonCanvas","c2","fillStyle","beginPath","moveTo","lineTo","closePath","fill","j","drawPieceCanvas","canvas2","document","createElement","context2","getContext"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nclass PieceGeneratorComponent extends Component {\n\n    static seed = 213478;\n    static width = 600;\n    static height = 600;\n\n    static nextRand() {\n        var hi = this.seed / (2147483647 / 48271);\n        var lo = this.seed % (2147483647 / 48271);\n        var test = 48271 * lo - (2147483647 % 48271) * hi;\n        if (test > 0) {\n            this.seed = test;\n        } else {\n            this.seed = test + 2147483647;\n        }\n        return this.seed * (1.0 / 2147483647);\n    }\n\n\n\n    static drawPolygon() {\n\n        var pointNumber = this.randNumOfRange(3, 5);\n        console.log(\"pointNumber=\" + pointNumber)\n        //console.log(Math.floor(this.nextRand() * 16777215).toString(16));\n        var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n\n        var pts = \"\";\n        var ptsMirror = \"\";\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.randNumOfRange(0, this.width);\n            var y = this.randNumOfRange(0, this.height);\n            pts += x + \",\" + y + \" \";\n            var x2 = this.width - x;\n            ptsMirror += x2 + \",\" + y + \" \";\n            //  console.log(i);\n        }\n\n        return <><polygon points={pts} fill={color} />\n            <polygon points={ptsMirror} fill={color} /></>;\n    }\n\n    static randNumOfRange(a, b) {\n        return Math.round(this.nextRand() * (b - a) + a);\n    }\n\n\n    static drawPiece(width, height, seed, owner) {\n        this.seed = seed;\n        this.width = width;\n        this.height = height;\n\n        return (\n            <>\n                <svg height={this.height} width={this.width}>\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                </svg>\n            </>\n        )\n    }\n\n\n\n    static drawPolygonCanvas(c2) {\n\n        var pointNumber = this.randNumOfRange(3, 10);\n        //var pointNumber = 3;\n        console.log(\"pointNumber=\" + pointNumber)\n        //console.log(Math.floor(this.nextRand() * 16777215).toString(16));\n        var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n\n        // var pts = \"\";\n        // var ptsMirror = \"\";\n\n\n        c2.fillStyle = color;\n        c2.beginPath();\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.randNumOfRange(0, this.width);\n            var y = this.randNumOfRange(0, this.height);\n            //pts += x + \",\" + y + \" \";\n\n            if (i === 0) {\n                c2.moveTo(x, y);\n            } else {\n                c2.lineTo(x, y);\n            }\n\n\n        }\n        c2.closePath();\n        c2.fill();\n        c2.fillStyle = color;\n        c2.beginPath();\n\n        for (var j = j; j < pointNumber; j++) {\n            var x = this.randNumOfRange(0, this.width);\n            var y = this.randNumOfRange(0, this.height);\n            var x2 = this.width - x;\n            //  ptsMirror += x2 + \",\" + y + \" \";\n            if (j === 0) {\n                c2.moveTo(x2, y);\n            } else {\n                c2.lineTo(x2, y);\n            }\n        }\n        c2.closePath();\n        c2.fill();\n\n\n        // return <><polygon points={pts} fill={color} />\n        //     <polygon points={ptsMirror} fill={color} /></>;\n    }\n\n    static randNumOfRange(a, b) {\n        return Math.round(this.nextRand() * (b - a) + a);\n    }\n\n\n    static drawPieceCanvas(width, height, seed, owner) {\n        this.seed = seed;\n        this.width = width;\n        this.height = height;\n\n        var canvas2 = document.createElement('canvas');\n        canvas2.width = width;\n        canvas2.height = height;\n        var context2 = canvas2.getContext('2d');\n        this.drawPolygonCanvas(context2)\n\n        return (\n            canvas2\n        )\n    }\n\n\n\n\n}\n\nexport default PieceGeneratorComponent"]},"metadata":{},"sourceType":"module"}