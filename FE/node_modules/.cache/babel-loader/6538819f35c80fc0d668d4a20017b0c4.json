{"ast":null,"code":"import _toConsumableArray from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Component } from 'react';\nimport RandomGenerator from '../random-generator';\nimport UtilFunctions from '../util-functions';\n/**\n * Piece Generator for black and white design as silhouettes\n */\n\nvar ChessPieceGenerator = /*#__PURE__*/function (_Component) {\n  _inherits(ChessPieceGenerator, _Component);\n\n  function ChessPieceGenerator(width, height, seedstr) {\n    var _this;\n\n    _classCallCheck(this, ChessPieceGenerator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChessPieceGenerator).call(this));\n    _this.gen = new RandomGenerator(seedstr);\n    _this.width = width;\n    _this.height = height;\n    _this.canvas2 = document.createElement('canvas');\n    _this.c2 = _this.canvas2.getContext('2d');\n    _this.canvas2.width = width;\n    _this.canvas2.height = height;\n    _this.leftBorder = _this.width / 3;\n    _this.rightBorder = 2 * _this.width / 3;\n    return _this;\n  }\n\n  _createClass(ChessPieceGenerator, [{\n    key: \"randomColor\",\n    value: function randomColor() {\n      var r = Math.floor(this.gen.random() * 230).toString(16);\n      var g = Math.floor(this.gen.random() * 230).toString(16);\n      var b = Math.floor(this.gen.random() * 230).toString(16);\n      return \"#\" + r + g + b;\n    }\n  }, {\n    key: \"randomPointsLeft\",\n    value: function randomPointsLeft(num) {\n      var points = [];\n      var ys = [];\n\n      for (var i = 0; i < num; i++) {\n        var y = this.gen.randNumOfRange(0, this.height);\n        ys.push(y);\n      }\n\n      ys.sort(function (a, b) {\n        return a - b;\n      });\n\n      for (var i = 0; i < num; i++) {\n        var x = this.gen.randNumOfRange(0, this.leftBorder);\n        points.push({\n          x: x,\n          y: ys[i]\n        });\n      }\n\n      console.log(points);\n      return points;\n    }\n  }, {\n    key: \"drawSilhouette\",\n    value: function drawSilhouette(points) {\n      var pointNumber = this.gen.randNumOfRange(8, 13);\n      var points = this.randomPointsLeft(pointNumber);\n      var color = this.randomColor();\n      this.c2.fillStyle = color;\n      var shape = new Path2D();\n\n      for (var i = 0; i < points.length - 1; i++) {\n        if (i === 0) {\n          shape.moveTo(points[i].x, points[i].y);\n        } else if (i % 2 === 0) {\n          shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y);\n        }\n      }\n\n      shape.lineTo(points[points.length - 1].x, points[points.length - 1].y);\n\n      for (var i = points.length - 1; i > 1; i--) {\n        if (i === points.length - 1) {\n          shape.lineTo(this.rightBorder - points[i].x, points[i].y);\n        } else if (i % 2 === 0) {\n          shape.quadraticCurveTo(this.rightBorder - points[i + 1].x, points[i + 1].y, this.rightBorder - points[i].x, points[i].y);\n        }\n      }\n\n      shape.lineTo(this.rightBorder - points[1].x, points[1].y);\n      shape.lineTo(points[0].x, points[0].y);\n      this.c2.fill(shape);\n    }\n  }, {\n    key: \"drawSilhouettes\",\n    value: function drawSilhouettes(num) {\n      var _this2 = this;\n\n      return _toConsumableArray(Array(num).keys()).map(function () {\n        return _this2.drawSilhouette();\n      });\n    }\n  }, {\n    key: \"drawPieceCanvas\",\n    value: function drawPieceCanvas(owner) {\n      if (owner == \"P1\") {\n        this.drawSilhouette();\n        this.drawSilhouette();\n      } else {\n        this.drawSilhouette();\n      } // this.drawMirroredPolygon();\n      // this.drawMirroredPolygonColorDiff();\n      // this.drawMirroredPolygon();\n      // //this.drawMirroredPolygon();\n      // //        this.drawMirroredPolygonColorDiff();\n      // //this.drawMirroredPolygon();\n      // this.drawMirroredPolygon();\n\n\n      return this.canvas2;\n    }\n  }]);\n\n  return ChessPieceGenerator;\n}(Component);\n\nexport default ChessPieceGenerator;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/silhouettes/chess-piece-generator.jsx"],"names":["Component","RandomGenerator","UtilFunctions","ChessPieceGenerator","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","leftBorder","rightBorder","r","Math","floor","random","toString","g","b","num","points","ys","i","y","randNumOfRange","push","sort","a","x","console","log","pointNumber","randomPointsLeft","color","randomColor","fillStyle","shape","Path2D","length","moveTo","quadraticCurveTo","lineTo","fill","Array","keys","map","drawSilhouette","owner"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport RandomGenerator from '../random-generator';\nimport UtilFunctions from '../util-functions';\n\n\n\n/**\n * Piece Generator for black and white design as silhouettes\n */\nclass ChessPieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n        this.leftBorder = this.width / 3;\n        this.rightBorder = 2 * this.width / 3;\n    }\n\n\n\n\n    randomColor() {\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPointsLeft(num) {\n        var points = [];\n        var ys = [];\n        for (var i = 0; i < num; i++) {\n            var y = this.gen.randNumOfRange(0, this.height);\n            ys.push(y);\n        }\n        ys.sort((a, b) => a - b);\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.leftBorder);\n            points.push({ x: x, y: ys[i] });\n        }\n        console.log(points);\n        return points;\n    }\n\n\n\n\n    drawSilhouette(points) {\n\n\n        var pointNumber = this.gen.randNumOfRange(8, 13);\n        var points = this.randomPointsLeft(pointNumber);\n        var color = this.randomColor();\n        this.c2.fillStyle = color;\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length - 1; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        shape.lineTo(points[points.length - 1].x, points[points.length - 1].y);\n        for (var i = points.length - 1; i > 1; i--) {\n            if (i === points.length - 1) {\n                shape.lineTo(this.rightBorder - points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(this.rightBorder - points[i + 1].x, points[i + 1].y, this.rightBorder - points[i].x, points[i].y)\n            }\n        }\n        shape.lineTo(this.rightBorder - points[1].x, points[1].y);\n        shape.lineTo(points[0].x, points[0].y);\n        this.c2.fill(shape);\n    }\n\n\n\n    drawSilhouettes(num) {\n        return [...Array(num).keys()].map(() => this.drawSilhouette());\n    }\n\n\n\n    drawPieceCanvas(owner) {\n        if (owner == \"P1\") {\n            this.drawSilhouette();\n            this.drawSilhouette();\n        } else {\n            this.drawSilhouette();\n        }\n\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // //this.drawMirroredPolygon();\n        // //        this.drawMirroredPolygonColorDiff();\n        // //this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default ChessPieceGenerator"]},"metadata":{},"sourceType":"module"}