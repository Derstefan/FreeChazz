{"ast":null,"code":"var _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCard from './piece-card';\nimport Config from \"./config.json\";\nimport RenderFunctions from \"./render-functions.js\";\nimport serverConfig from \"../services/server-config.json\";\nimport { Engine, Runner, Composite, Bodies, Body } from 'matter-js';\nimport { Button, ThemeProvider } from '@mui/material';\nimport Themes from './themes/themes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://\" + serverConfig.host + \":3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //updater\n      isInited: false,\n      //game consts\n      player1: {},\n      player2: {},\n      width: 16,\n      height: 16,\n      pieceImagesSmall: {},\n      // images of pieces\n      //pieceData for cards\n      pieceImages: {},\n      //cardImages of pieces\n      actions: {},\n      // actions of pieces\n      pieceCard: new PieceCard(),\n      // game state\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      turn: \"undef\",\n      round: 0,\n      winner: null,\n      graveyard: [],\n      //selection\n      selectedField: {},\n      selectedPiece: {},\n      pieceId: \"\",\n      //animation with matter.js\n      engine: Engine.create(),\n      matterBodies: [],\n      showAnimation: false,\n      //newGame Modal\n      open: false\n    }; //matter.js init\n    //start matter.js runner\n\n    Runner.run(Runner.create(), this.state.engine); //this.state.engine.gravity.scale = 0.00;\n\n    this.state.engine.gravity.y = 0.6;\n    this.state.engine.timing.timeScale = 0.8;\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n    this.play = this.play.bind(this);\n    this.loadBoard = this.loadBoard.bind(this);\n    this.loadPieceData = this.loadPieceData.bind(this);\n    this.createMatterBodies = this.createMatterBodies.bind(this);\n    this.copyLink = this.copyLink.bind(this);\n    this.newGame = this.newGame.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      isInited\n    } = this.state; //Init function \n\n    if (!isInited) {\n      this.loadPieceData();\n    } //start updater\n\n\n    const loadTimer = setInterval(() => {\n      this.updateGameData();\n    }, Config.updateInterval);\n  } //check for ugameupdate\n\n\n  updateGameData() {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2,\n        turn: res.data.turn,\n        round: res.data.round,\n        winner: res.data.winner\n      }); //when other player made his turn\n\n      if (turn !== res.data.turn) {\n        this.loadBoard();\n      } //check game end ?\n\n    });\n  } // initial creating piece graphics\n\n\n  loadPieceData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = this.createBoard(res.data.board);\n      var pieceImagesSmall = new Map();\n      var actions = new Map();\n      var pieceImages = new Map();\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (bv[i][j].symbol !== \"\" && pieceImagesSmall.get(bv[i][j].symbol) === undefined) {\n            var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, bv[i][j].seed);\n            pieceImagesSmall.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n            mainService.generatePiece(bv[i][j].seed).then(res2 => {\n              var pg = new PieceGenerator(Config.card.imageWidth, Config.card.imageHeight, \"\" + bv[i][j].seed);\n              pieceImages.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n              actions.set(bv[i][j].symbol, res2.data.actionMap.actions);\n            });\n          }\n        }\n      } //TODO: alternativer RestRequest um gleich alle pieceData zu bekommen\n\n\n      this.setState({\n        pieceImagesSmall: pieceImagesSmall,\n        actions: actions,\n        pieceImages: pieceImages,\n        isInited: true,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  } //update Board\n\n\n  loadBoard() {\n    const {\n      gameId,\n      graveyard,\n      engine,\n      matterBodies,\n      showAnimation\n    } = this.state;\n    var matterBodiesUpdate = matterBodies;\n    mainService.getBoard(gameId).then(res => {\n      //List of deleted pieces TODO: what is if page reloaded and graveyard at first empty -> many animations at start ?\n      let deletedPieces = res.data.graveyard.slice(graveyard.length, res.data.graveyard.size); //matter bodies create, add forces and composite\n\n      if (showAnimation) {\n        if (deletedPieces.length !== 0) {\n          this.createMatterBodies(deletedPieces).forEach(b => {\n            Composite.add(engine.world, b.body);\n            matterBodiesUpdate.push(b);\n          });\n        }\n      } else {\n        this.setState({\n          showAnimation: true\n        });\n      } //  let bodyList = this.createMatterBodies(deletedPieces);\n      //            console.log(bodyList.length);\n      // console.log(Composite.allBodies(engine.world));\n\n\n      let bv = this.createBoard(res.data.board);\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        graveyard: res.data.graveyard,\n        matterBodies: matterBodiesUpdate,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  }\n\n  createMatterBodies(deletedPieces) {\n    const {\n      width,\n      engine\n    } = this.state;\n    var matterBodies = [];\n    deletedPieces.forEach(piece => {\n      //create body\n      var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, piece.seed);\n      let xOffsetPic = Config.boardTopx + (piece.position.x + Config.board.smallImage.xOffset) * Config.squareSize;\n      let yOffsetPic = Config.boardTopy + (piece.position.y + Config.board.smallImage.yOffset) * Config.squareSize;\n      pg.getMatterBodies().forEach(b => {\n        Body.translate(b.body, {\n          x: xOffsetPic,\n          y: yOffsetPic\n        });\n        matterBodies.push(b);\n      });\n      var ground = Bodies.rectangle(0, yOffsetPic + Config.squareSize * 0.7, 21300, 2, {\n        isStatic: true\n      });\n      matterBodies.push({\n        body: ground,\n        color: \"black\",\n        alpha: 1.0,\n        visible: false\n      });\n    });\n    return matterBodies;\n  } // save Board data\n\n\n  createBoard(board) {\n    let bv = board;\n\n    for (let i = 0; i < bv.length; i++) {\n      for (let j = 0; j < bv[0].length; j++) {\n        if (board[i][j] === null) {\n          bv[i][j] = {\n            symbol: \"\",\n            owner: \"\",\n            possibleMoves: [],\n            serial: \"\"\n          };\n        } else {\n          bv[i][j] = {\n            symbol: bv[i][j].symbol,\n            owner: bv[i][j].owner,\n            possibleMoves: bv[i][j].possibleMoves,\n            serial: bv[i][j].serial,\n            seed: bv[i][j].seed\n          };\n        }\n      }\n    }\n\n    return bv;\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField,\n      me,\n      turn,\n      selectedPiece\n    } = this.state;\n    const isPlayerTurn = me === turn;\n    const isEmptyField = boardView[y][x].symbol === \"\";\n    const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n    if (sthSelected) {\n      const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n      const isPossibleMove = selectedPiece.possibleMoves.some(move => move.x === x && move.y === y);\n      const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n      if (isAlreadySelected) {\n        // unselect\n        this.setState({\n          selectedField: {},\n          pieceId: \"\"\n        });\n      } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n        // move\n        const draw = {\n          fromPos: {\n            x: selectedField.x,\n            y: selectedField.y\n          },\n          toPos: {\n            x: x,\n            y: y\n          }\n        };\n        this.play(draw);\n      } else if (isEmptyField) {\n        // unselect\n        this.setState({\n          selectedField: {},\n          pieceId: \"\"\n        });\n      } else {\n        // select new position\n        this.setState({\n          selectedField: {\n            x: x,\n            y: y\n          },\n          selectedPiece: boardView[y][x],\n          pieceId: boardView[y][x].symbol //TODO: statt symbol pieceId\n\n        });\n      }\n    } else {\n      if (!isEmptyField) {\n        // select new position\n        this.setState({\n          selectedField: {\n            x: x,\n            y: y\n          },\n          selectedPiece: boardView[y][x],\n          pieceId: boardView[y][x].symbol //TODO: statt symbol pieceId\n\n        });\n      }\n    }\n  }\n\n  play(draw) {\n    const {\n      gameId,\n      turn,\n      winner\n    } = this.state;\n\n    if (winner === null) {\n      mainService.play(gameId, draw).then(res => {\n        //            console.log(\"played\", turn);\n        const nextTurn = turn === \"P1\" ? \"P2\" : \"P1\";\n        this.setState({\n          selectedField: {},\n          turn: nextTurn\n        });\n        this.updateGameData();\n        this.loadBoard();\n      });\n    }\n  }\n\n  clickOnCanvas(event) {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - Config.boardTopx;\n    const y = event.clientY - rect.top - Config.boardTopy;\n    this.selectField((x - x % Config.squareSize) / Config.squareSize, (y - y % Config.squareSize) / Config.squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      boardView,\n      selectedField,\n      me,\n      pieceImagesSmall,\n      isInited,\n      winner,\n      pieceId,\n      selectedPiece,\n      pieceCard,\n      actions,\n      pieceImages,\n      engine,\n      matterBodies\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        const squareSize = Config.squareSize;\n        const boardTopx = Config.boardTopx;\n        const boardTopy = Config.boardTopy;\n        ctx.canvas.width = squareSize * (width + 1) + Config.card.width;\n        ctx.canvas.height = squareSize * (height + 1); //draw card\n\n        if (pieceId !== \"\") {\n          var cardPicsize = Config.card.width;\n          var grd = ctx.createRadialGradient(squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, 2, squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, cardPicsize * 0.5);\n          grd.addColorStop(0, \"black\");\n\n          if (selectedPiece.owner === me) {\n            grd.addColorStop(1, \"rgba(0,100,0,0.1)\");\n          } else {\n            grd.addColorStop(1, \"rgba(100,0,0,0.1)\");\n          } // Fill with gradient\n\n\n          ctx.fillStyle = grd;\n          ctx.fillRect(squareSize * (width + 1), +cardPicsize * 0.125, cardPicsize, cardPicsize);\n          ctx.drawImage(pieceCard.drawPieceCard(actions.get(pieceId), pieceImages.get(pieceId), selectedPiece.owner), squareSize * (width + 1), 0);\n        } //draw board\n\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 === 0 ? Config.board.color1 : Config.board.color2;\n            let xOffset = boardTopx + i * squareSize;\n            let yOffset = boardTopy + j * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.45;\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < selectedPiece.possibleMoves.length; k++) {\n            let xOffset = boardTopx + selectedPiece.possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + selectedPiece.possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0] && isInited) {\n          ctx.fillStyle = \"black\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let xOffset = boardTopx + i * squareSize;\n                let yOffset = boardTopy + j * squareSize;\n                let xOffsetPic = boardTopx + (i + Config.board.smallImage.xOffset) * squareSize;\n                let yOffsetPic = boardTopy + (j + Config.board.smallImage.yOffset) * squareSize;\n\n                if (pieceImagesSmall.length !== 0) {\n                  //  console.log(pieces);\n                  //green or red shadow\n                  var grd = ctx.createRadialGradient(xOffset + squareSize / 2, yOffset + squareSize * 0.6, 2, xOffset + squareSize / 2, yOffset + squareSize * 0.6, squareSize * 0.5);\n                  grd.addColorStop(0, \"black\");\n\n                  if (boardView[j][i].owner === me) {\n                    grd.addColorStop(1, \"rgba(0,100,0,0.1)\");\n                  } else {\n                    grd.addColorStop(1, \"rgba(100,0,0,0.1)\");\n                  } // Fill with gradient\n\n\n                  ctx.fillStyle = grd;\n                  ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                  ctx.drawImage(pieceImagesSmall.get(boardView[j][i].symbol), xOffsetPic, yOffsetPic);\n                } //}\n\n              }\n            }\n          }\n        } //animation\n        //console.log(\"active bodies:\", matterBodies.length);\n\n\n        if (matterBodies.length != 0) {\n          RenderFunctions.renderMatterAnimation(ctx, matterBodies, frameCount);\n          matterBodies.forEach(b => {\n            if (b.alpha <= 0) {\n              Composite.remove(engine.world, b.body);\n              matterBodies.splice(matterBodies.indexOf(b), 1);\n            }\n          });\n        } // draw winner\n\n\n        if (winner !== null) {\n          ctx.fillStyle = \"rgba(100,100,100,0.8)\";\n          ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n          ctx.fillStyle = \"red\";\n          ctx.font = '30px serif';\n          ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n        }\n      }\n    };\n\n    return draw;\n  }\n\n  drawGameText() {\n    const {\n      me,\n      turn\n    } = this.state;\n\n    if (me === turn) {\n      return \"Your turn!\";\n    }\n\n    return \"Wait for opponents turn...\";\n  }\n\n  copyLink() {\n    const {\n      inviteLink\n    } = this.state;\n    navigator.clipboard.writeText(inviteLink);\n  }\n\n  openModal() {\n    this.setState({\n      open: true\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      open: false\n    });\n  }\n\n  newGame() {\n    const {\n      history\n    } = this.props;\n    history.push(\"/\");\n  }\n\n  render() {\n    const {\n      player1,\n      player2,\n      round,\n      isInited,\n      winner\n    } = this.state;\n\n    if (isInited) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(ThemeProvider, {\n            theme: Themes.theme1,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                onClick: this.openModal,\n                color: \"neutral\",\n                children: \"New Game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                onClick: this.copyLink,\n                color: \"neutral\",\n                children: \"Copy Invitelink\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"col-sm\",\n            children: [this.drawGameText(), \" \", \" \", \" \", winner !== null && \"The Winner is\" + winner.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 107\n            }, this), \"P1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"P2: \", player2.name]\n            }, void 0, true), \" \", \" round:\", round]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"mb-5\",\n            children: /*#__PURE__*/_jsxDEV(Canvas, {\n              draw: this.drawMethod(),\n              onClick: this.clickOnCanvas\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          open: open,\n          onClose: closeModal,\n          \"aria-labelledby\": \"modal-modal-title\",\n          \"aria-describedby\": \"modal-modal-description\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: style,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              id: \"modal-modal-title\",\n              variant: \"h6\",\n              component: \"h2\",\n              children: \"Text in a modal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              id: \"modal-modal-description\",\n              sx: {\n                mt: 2\n              },\n              children: \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }, this);\n    }\n\n    return \"\";\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceGenerator","PieceCard","Config","RenderFunctions","serverConfig","Engine","Runner","Composite","Bodies","Body","Button","ThemeProvider","Themes","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","host","isInited","player1","player2","width","height","pieceImagesSmall","pieceImages","actions","pieceCard","boardData","boardView","turn","round","winner","graveyard","selectedField","selectedPiece","pieceId","engine","create","matterBodies","showAnimation","open","run","gravity","y","timing","timeScale","selectField","bind","clickOnCanvas","drawMethod","play","loadBoard","loadPieceData","createMatterBodies","copyLink","newGame","closeModal","componentDidMount","loadTimer","setInterval","updateGameData","updateInterval","getGameData","then","res","setState","data","getBoard","bv","createBoard","board","Map","i","length","j","symbol","get","undefined","pg","squareSize","smallImage","wScale","hScale","seed","set","drawPieceCanvas","owner","generatePiece","res2","card","imageWidth","imageHeight","actionMap","matterBodiesUpdate","deletedPieces","slice","size","forEach","b","add","world","body","push","piece","xOffsetPic","boardTopx","position","x","xOffset","yOffsetPic","boardTopy","yOffset","getMatterBodies","translate","ground","rectangle","isStatic","color","alpha","visible","possibleMoves","serial","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","frameCount","canvas","cardPicsize","grd","createRadialGradient","addColorStop","fillStyle","fillRect","drawImage","drawPieceCard","color1","color2","strokeStyle","strokeRect","globalAlpha","k","renderMatterAnimation","remove","splice","indexOf","font","fillText","name","drawGameText","navigator","clipboard","writeText","openModal","history","render","theme1","style","mt"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport PieceCard from './piece-card';\nimport Config from \"./config.json\";\nimport RenderFunctions from \"./render-functions.js\";\nimport serverConfig from \"../services/server-config.json\";\nimport { Engine, Runner, Composite, Bodies, Body } from 'matter-js';\nimport { Button, ThemeProvider } from '@mui/material';\nimport Themes from './themes/themes';\n\n\nclass GameComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://\" + serverConfig.host + \":3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n\n            //updater\n            isInited: false,\n\n\n            //game consts\n            player1: {},\n            player2: {},\n            width: 16,\n            height: 16,\n            pieceImagesSmall: {}, // images of pieces\n\n            //pieceData for cards\n            pieceImages: {}, //cardImages of pieces\n            actions: {}, // actions of pieces\n            pieceCard: new PieceCard(),\n\n            // game state\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            turn: \"undef\",\n            round: 0,\n            winner: null,\n            graveyard: [],\n\n            //selection\n            selectedField: {},\n            selectedPiece: {},\n            pieceId: \"\",\n\n\n            //animation with matter.js\n            engine: Engine.create(),\n            matterBodies: [],\n            showAnimation: false,\n\n            //newGame Modal\n            open: false,\n\n\n        }\n\n        //matter.js init\n        //start matter.js runner\n        Runner.run(Runner.create(), this.state.engine);\n\n        //this.state.engine.gravity.scale = 0.00;\n        this.state.engine.gravity.y = 0.6;\n        this.state.engine.timing.timeScale = 0.8;\n\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n        this.loadBoard = this.loadBoard.bind(this);\n        this.loadPieceData = this.loadPieceData.bind(this);\n        this.createMatterBodies = this.createMatterBodies.bind(this);\n        this.copyLink = this.copyLink.bind(this);\n        this.newGame = this.newGame.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n\n\n    }\n\n    componentDidMount() {\n        const { isInited } = this.state;\n\n        //Init function \n        if (!isInited) {\n            this.loadPieceData();\n        }\n\n        //start updater\n        const loadTimer = setInterval(() => {\n            this.updateGameData();\n\n        }, Config.updateInterval);\n    }\n\n    //check for ugameupdate\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round, winner: res.data.winner });\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard();\n            }\n\n            //check game end ?\n        });\n    }\n\n\n    // initial creating piece graphics\n    loadPieceData() {\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = this.createBoard(res.data.board);\n            var pieceImagesSmall = new Map();\n            var actions = new Map();\n            var pieceImages = new Map();\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (bv[i][j].symbol !== \"\" && pieceImagesSmall.get(bv[i][j].symbol) === undefined) {\n                        var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, bv[i][j].seed);\n                        pieceImagesSmall.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n\n                        mainService.generatePiece(bv[i][j].seed).then(res2 => {\n                            var pg = new PieceGenerator(Config.card.imageWidth, Config.card.imageHeight, \"\" + bv[i][j].seed);\n                            pieceImages.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner))\n                            actions.set(bv[i][j].symbol, res2.data.actionMap.actions);\n                        });\n                    }\n                }\n            }\n            //TODO: alternativer RestRequest um gleich alle pieceData zu bekommen\n\n            this.setState({ pieceImagesSmall: pieceImagesSmall, actions: actions, pieceImages: pieceImages, isInited: true, boardView: bv, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    //update Board\n    loadBoard() {\n        const { gameId, graveyard, engine, matterBodies, showAnimation } = this.state;\n        var matterBodiesUpdate = matterBodies;\n        mainService.getBoard(gameId).then((res) => {\n            //List of deleted pieces TODO: what is if page reloaded and graveyard at first empty -> many animations at start ?\n\n            let deletedPieces = res.data.graveyard.slice(graveyard.length, res.data.graveyard.size);\n\n            //matter bodies create, add forces and composite\n            if (showAnimation) {\n                if (deletedPieces.length !== 0) {\n                    this.createMatterBodies(deletedPieces).forEach(b => {\n                        Composite.add(engine.world, b.body);\n                        matterBodiesUpdate.push(b);\n                    });\n                }\n            } else {\n                this.setState({ showAnimation: true });\n            }\n\n\n            //  let bodyList = this.createMatterBodies(deletedPieces);\n            //            console.log(bodyList.length);\n            // console.log(Composite.allBodies(engine.world));\n\n\n            let bv = this.createBoard(res.data.board);\n            this.setState({ boardData: res.data, boardView: bv, graveyard: res.data.graveyard, matterBodies: matterBodiesUpdate, width: bv[0].length, height: bv.length });\n        });\n    }\n\n    createMatterBodies(deletedPieces) {\n        const { width, engine } = this.state;\n        var matterBodies = [];\n        deletedPieces.forEach(piece => {\n            //create body\n            var pg = new PieceGenerator(Config.squareSize * Config.board.smallImage.wScale, Config.squareSize * Config.board.smallImage.hScale, piece.seed);\n            let xOffsetPic = Config.boardTopx + (piece.position.x + Config.board.smallImage.xOffset) * Config.squareSize;\n            let yOffsetPic = Config.boardTopy + (piece.position.y + Config.board.smallImage.yOffset) * Config.squareSize;\n\n            pg.getMatterBodies().forEach(b => {\n                Body.translate(b.body, { x: xOffsetPic, y: yOffsetPic });\n                matterBodies.push(b);\n            });\n            var ground = Bodies.rectangle(0, yOffsetPic + Config.squareSize * 0.7, 21300, 2, { isStatic: true });\n            matterBodies.push({ body: ground, color: \"black\", alpha: 1.0, visible: false });\n        });\n\n        return matterBodies;\n\n    }\n\n\n    // save Board data\n    createBoard(board) {\n        let bv = board;\n\n        for (let i = 0; i < bv.length; i++) {\n            for (let j = 0; j < bv[0].length; j++) {\n                if (board[i][j] === null) {\n                    bv[i][j] = {\n                        symbol: \"\",\n                        owner: \"\",\n                        possibleMoves: [],\n                        serial: \"\"\n                    };\n                } else {\n                    bv[i][j] = {\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves,\n                        serial: bv[i][j].serial,\n                        seed: bv[i][j].seed\n                    };\n                }\n            }\n        }\n        return bv;\n    }\n\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, selectedPiece } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = selectedPiece.possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me === boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else {\n                // select new position\n                this.setState({\n                    selectedField: { x: x, y: y },\n                    selectedPiece: boardView[y][x],\n                    pieceId: boardView[y][x].symbol //TODO: statt symbol pieceId\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    selectedField: { x: x, y: y },\n                    selectedPiece: boardView[y][x],\n                    pieceId: boardView[y][x].symbol //TODO: statt symbol pieceId\n                });\n            }\n        }\n    }\n\n    play(draw) {\n        const { gameId, turn, winner } = this.state;\n        if (winner === null) {\n            mainService.play(gameId, draw).then((res) => {\n                //            console.log(\"played\", turn);\n                const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n                this.setState({\n                    selectedField: {},\n                    turn: nextTurn\n                });\n\n                this.updateGameData();\n                this.loadBoard();\n            });\n        }\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - Config.boardTopx;\n        const y = event.clientY - rect.top - Config.boardTopy;\n        this.selectField((x - x % Config.squareSize) / (Config.squareSize), (y - y % Config.squareSize) / (Config.squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, boardView, selectedField, me, pieceImagesSmall, isInited, winner, pieceId, selectedPiece, pieceCard, actions, pieceImages, engine, matterBodies } = this.state;\n\n\n        const draw = (ctx, frameCount) => {\n            if (boardView) {\n                const squareSize = Config.squareSize;\n                const boardTopx = Config.boardTopx;\n                const boardTopy = Config.boardTopy;\n\n                ctx.canvas.width = squareSize * (width + 1) + Config.card.width;\n                ctx.canvas.height = squareSize * (height + 1);\n\n                //draw card\n                if (pieceId !== \"\") {\n                    var cardPicsize = Config.card.width;\n                    var grd = ctx.createRadialGradient(squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, 2, squareSize * (width + 1) + cardPicsize / 2, 0 + cardPicsize * 0.625, cardPicsize * 0.5);\n                    grd.addColorStop(0, \"black\");\n                    if (selectedPiece.owner === me) {\n                        grd.addColorStop(1, \"rgba(0,100,0,0.1)\");\n                    } else {\n                        grd.addColorStop(1, \"rgba(100,0,0,0.1)\");\n                    }\n                    // Fill with gradient\n                    ctx.fillStyle = grd;\n                    ctx.fillRect(squareSize * (width + 1), + cardPicsize * 0.125, cardPicsize, cardPicsize);\n\n                    ctx.drawImage(pieceCard.drawPieceCard(actions.get(pieceId), pieceImages.get(pieceId), selectedPiece.owner), squareSize * (width + 1), 0);\n                }\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 === 0) ? Config.board.color1 : Config.board.color2;\n                        let xOffset = boardTopx + i * squareSize;\n                        let yOffset = boardTopy + j * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.45;\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < selectedPiece.possibleMoves.length; k++) {\n                        let xOffset = boardTopx + selectedPiece.possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + selectedPiece.possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0] && isInited) {\n                    ctx.fillStyle = \"black\";\n\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + i * squareSize;\n                                let yOffset = boardTopy + j * squareSize;\n                                let xOffsetPic = boardTopx + (i + Config.board.smallImage.xOffset) * squareSize;\n                                let yOffsetPic = boardTopy + (j + Config.board.smallImage.yOffset) * squareSize;\n\n                                if (pieceImagesSmall.length !== 0) {\n                                    //  console.log(pieces);\n\n\n                                    //green or red shadow\n                                    var grd = ctx.createRadialGradient(xOffset + squareSize / 2, yOffset + squareSize * 0.6, 2, xOffset + squareSize / 2, yOffset + squareSize * 0.6, squareSize * 0.5);\n                                    grd.addColorStop(0, \"black\");\n                                    if (boardView[j][i].owner === me) {\n                                        grd.addColorStop(1, \"rgba(0,100,0,0.1)\");\n                                    } else {\n                                        grd.addColorStop(1, \"rgba(100,0,0,0.1)\");\n                                    }\n                                    // Fill with gradient\n                                    ctx.fillStyle = grd;\n                                    ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n\n                                    ctx.drawImage(pieceImagesSmall.get(boardView[j][i].symbol), xOffsetPic, yOffsetPic);\n                                }\n                                //}\n\n\n                            }\n                        }\n                    }\n                }\n                //animation\n                //console.log(\"active bodies:\", matterBodies.length);\n                if (matterBodies.length != 0) {\n                    RenderFunctions.renderMatterAnimation(ctx, matterBodies, frameCount);\n                    matterBodies.forEach(b => {\n                        if (b.alpha <= 0) {\n                            Composite.remove(engine.world, b.body);\n                            matterBodies.splice(matterBodies.indexOf(b), 1);\n                        }\n                    })\n                }\n\n\n\n                // draw winner\n                if (winner !== null) {\n                    ctx.fillStyle = \"rgba(100,100,100,0.8)\"\n                    ctx.fillRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n                    ctx.fillStyle = \"red\"\n                    ctx.font = '30px serif';\n                    ctx.fillText(winner.name + ' wins!', squareSize * width / 3, squareSize * height / 2);\n                }\n\n            }\n        }\n        return draw;\n\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n    copyLink() {\n        const { inviteLink } = this.state;\n        navigator.clipboard.writeText(inviteLink);\n    }\n\n    openModal() {\n        this.setState({ open: true });\n    }\n\n    closeModal() {\n        this.setState({ open: false });\n    }\n\n    newGame() {\n        const { history } = this.props;\n\n        history.push(\"/\");\n    }\n\n\n    render() {\n        const { player1, player2, round, isInited, winner } = this.state;\n\n        if (isInited) {\n            return (\n                <div>\n                    <div className=\"row\">\n                        <ThemeProvider theme={Themes.theme1}>\n                            <div class=\"col-\"><Button variant=\"outlined\" onClick={this.openModal} color=\"neutral\">New Game</Button></div>\n                            <div class=\"col-\"><Button variant=\"outlined\" onClick={this.copyLink} color=\"neutral\">Copy Invitelink</Button></div>\n                        </ThemeProvider>\n                        <div class=\"col-sm\">\n                            {this.drawGameText()} {\" \"} {winner !== null && \"The Winner is\" + winner.name}<br />\n                            P1: {player1 && player1.name} {player2 && <>P2: {player2.name}</>} {\" round:\"}{round}\n\n                        </div>\n\n                    </div>\n                    <div className=\"row\">\n                        <div class=\"mb-5\">\n                            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n\n                        </div>\n                    </div >\n                    {/*new game modal??*/}\n                    <Modal\n                        open={open}\n                        onClose={closeModal}\n                        aria-labelledby=\"modal-modal-title\"\n                        aria-describedby=\"modal-modal-description\"\n                    >\n                        <Box sx={style}>\n                            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                                Text in a modal\n                            </Typography>\n                            <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n                                Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n                            </Typography>\n                        </Box>\n                    </Modal>\n                </div >\n            )\n        }\n        return \"\";\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}