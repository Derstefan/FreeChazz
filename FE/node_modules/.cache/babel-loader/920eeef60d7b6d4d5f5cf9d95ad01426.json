{"ast":null,"code":"import { Component } from 'react';\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\nimport { Bodies } from 'matter-js';\n\nclass PieceGenerator extends Component {\n  constructor(width, height, seedstr) {\n    super();\n    this.gen = new RandomGenerator(seedstr);\n    this.width = width;\n    this.height = height;\n    this.canvas2 = document.createElement('canvas');\n    this.c2 = this.canvas2.getContext('2d');\n    this.canvas2.width = width;\n    this.canvas2.height = height;\n  }\n\n  randomColor() {\n    var r = Math.floor(this.gen.random() * 230).toString(16);\n    var g = Math.floor(this.gen.random() * 230).toString(16);\n    var b = Math.floor(this.gen.random() * 230).toString(16);\n    return \"#\" + r + g + b;\n  }\n\n  randomPoints(num) {\n    var points = [];\n\n    for (var i = 0; i < num; i++) {\n      var x = this.gen.randNumOfRange(0, this.width);\n      var y = this.gen.randNumOfRange(0, this.height);\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n\n    return points;\n  }\n\n  drawShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else {\n        shape.lineTo(points[i].x, points[i].y);\n\n        if (i >= 1) {\n          Bodies.fromVertices(0, 0, [points[i - 2], points[i - 1], points[i]]);\n        }\n      }\n    }\n\n    return shape;\n  }\n\n  drawMirrorShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      var x = this.width - points[i].x;\n\n      if (i === 0) {\n        shape.moveTo(x, points[i].y);\n      } else {\n        shape.lineTo(x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawCurvedShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        shape.moveTo(points[i].x, points[i].y);\n      } else if (i % 2 === 0) {\n        shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y);\n      }\n    }\n\n    return shape;\n  }\n\n  drawCurvedMirrorShape(points) {\n    var shape = new Path2D();\n\n    for (var i = 0; i < points.length; i++) {\n      var x = this.width - points[i].x;\n\n      if (i === 0) {\n        shape.moveTo(x, points[i].y);\n      } else if (i % 2 === 0) {\n        var x1 = this.width - points[i - 1].x;\n        var x2 = this.width - points[i].x;\n        shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y);\n      }\n    }\n\n    return shape;\n  } // ----------------------------------------------------------------------------------------------------------------\n\n\n  drawCurvedMirroredPolygon() {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPoints(pointNumber); //console.log(UtilFunctions.polygonArea(points));\n\n    var color = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedShape(points));\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedMirrorShape(points));\n  }\n\n  drawMirroredPolygon() {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPoints(pointNumber); //console.log(UtilFunctions.polygonArea(points));\n\n    var color = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawShape(points));\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawMirrorShape(points));\n  }\n\n  drawCurvedMirroredPolygonColorDiff() {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPoints(pointNumber);\n    var color = this.randomColor();\n    var color2 = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawCurvedShape(points));\n    this.c2.fillStyle = color2;\n    this.c2.fill(this.drawCurvedMirrorShape(points));\n  }\n\n  drawMirroredPolygonColorDiff() {\n    var pointNumber = this.gen.randNumOfRange(3, 10);\n    var points = this.randomPoints(pointNumber);\n    var color = this.randomColor();\n    var color2 = this.randomColor();\n    this.c2.fillStyle = color;\n    this.c2.fill(this.drawShape(points));\n    this.c2.fillStyle = color2;\n    this.c2.fill(this.drawMirrorShape(points));\n  }\n\n  drawPolygons(num) {\n    return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n  }\n\n  drawPieceCanvas(owner) {\n    this.drawPolygons(this.gen.randNumOfRange(3, 5)); // this.drawMirroredPolygon();\n    // this.drawMirroredPolygonColorDiff();\n    // this.drawMirroredPolygon();\n    // //this.drawMirroredPolygon();\n    // //        this.drawMirroredPolygonColorDiff();\n    // //this.drawMirroredPolygon();\n    // this.drawMirroredPolygon();\n\n    return this.canvas2;\n  }\n\n}\n\nexport default PieceGenerator;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/generator/piece-generator.jsx"],"names":["Component","RandomGenerator","UtilFunctions","Bodies","PieceGenerator","constructor","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","randomColor","r","Math","floor","random","toString","g","b","randomPoints","num","points","i","x","randNumOfRange","y","push","drawShape","shape","Path2D","length","moveTo","lineTo","fromVertices","drawMirrorShape","drawCurvedShape","quadraticCurveTo","drawCurvedMirrorShape","x1","x2","drawCurvedMirroredPolygon","pointNumber","color","fillStyle","fill","drawMirroredPolygon","drawCurvedMirroredPolygonColorDiff","color2","drawMirroredPolygonColorDiff","drawPolygons","Array","keys","map","drawPieceCanvas","owner"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport RandomGenerator from './random-generator';\nimport UtilFunctions from './util-functions';\nimport { Bodies } from 'matter-js';\n\nclass PieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        this.canvas2 = document.createElement('canvas');\n        this.c2 = this.canvas2.getContext('2d');\n        this.canvas2.width = width;\n        this.canvas2.height = height;\n    }\n\n\n\n\n    randomColor() {\n        var r = Math.floor(this.gen.random() * 230).toString(16);\n        var g = Math.floor(this.gen.random() * 230).toString(16);\n        var b = Math.floor(this.gen.random() * 230).toString(16);\n        return \"#\" + r + g + b;\n    }\n\n    randomPoints(num) {\n        var points = [];\n        for (var i = 0; i < num; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n        return points;\n    }\n\n\n\n    drawShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else {\n                shape.lineTo(points[i].x, points[i].y);\n                if (i >= 1) {\n                    Bodies.fromVertices(0, 0, [points[i - 2], points[i - 1], points[i]]);\n                }\n            }\n        }\n\n        return shape;\n    }\n\n    drawMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else {\n                shape.lineTo(x, points[i].y);\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedShape(points) {\n\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                shape.moveTo(points[i].x, points[i].y);\n            } else if (i % 2 === 0) {\n                shape.quadraticCurveTo(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n    drawCurvedMirrorShape(points) {\n        var shape = new Path2D();\n        for (var i = 0; i < points.length; i++) {\n            var x = this.width - points[i].x;\n            if (i === 0) {\n                shape.moveTo(x, points[i].y);\n            } else if (i % 2 === 0) {\n                var x1 = this.width - points[i - 1].x;\n                var x2 = this.width - points[i].x;\n                shape.quadraticCurveTo(x1, points[i - 1].y, x2, points[i].y)\n            }\n        }\n        return shape;\n    }\n\n\n    // ----------------------------------------------------------------------------------------------------------------\n\n    drawCurvedMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygon() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        //console.log(UtilFunctions.polygonArea(points));\n        var color = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawMirrorShape(points));\n    }\n\n    drawCurvedMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawCurvedShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawCurvedMirrorShape(points));\n    }\n\n    drawMirroredPolygonColorDiff() {\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        var points = this.randomPoints(pointNumber);\n        var color = this.randomColor();\n        var color2 = this.randomColor();\n\n        this.c2.fillStyle = color;\n        this.c2.fill(this.drawShape(points));\n        this.c2.fillStyle = color2;\n        this.c2.fill(this.drawMirrorShape(points));\n    }\n\n\n    drawPolygons(num) {\n        return [...Array(num).keys()].map(() => this.gen.random() > 0.1 ? this.drawMirroredPolygon() : this.drawMirroredPolygonColorDiff());\n    }\n\n\n\n    drawPieceCanvas(owner) {\n\n        this.drawPolygons(this.gen.randNumOfRange(3, 5));\n        // this.drawMirroredPolygon();\n        // this.drawMirroredPolygonColorDiff();\n        // this.drawMirroredPolygon();\n        // //this.drawMirroredPolygon();\n        // //        this.drawMirroredPolygonColorDiff();\n        // //this.drawMirroredPolygon();\n        // this.drawMirroredPolygon();\n\n        return (\n            this.canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGenerator"]},"metadata":{},"sourceType":"module"}