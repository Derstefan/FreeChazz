{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //game\n      player1: {},\n      player2: {},\n      boardData: {},\n      // data from server\n      boardView: undefined,\n      // symbol, playertype, selected, canMoveTo\n      width: 16,\n      height: 16,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      //consts\n      squareSize: 25\n    };\n    this.loadGameData();\n    this.loadBoard();\n    this.selectField = this.selectField.bind(this);\n  }\n\n  loadGameData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      //console.log(res.data);\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2\n      });\n    });\n  }\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = res.data.board;\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (res.data.board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      }\n\n      console.log(bv);\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  }\n\n  selectField(x, y) {\n    const {\n      boardView\n    } = this.state;\n    let newBoard = boardView;\n\n    if (boardView[y][x].canMoveTo) {//\n    }\n\n    const possibleMoves = newBoard[y][x].possibleMoves;\n\n    for (let i = 0; i < boardView.length; i++) {\n      for (let j = 0; j < boardView[0].length; j++) {\n        newBoard[i][j].canMoveTo = false;\n      }\n    }\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      newBoard[possibleMoves[i].y][possibleMoves[i].x].canMoveTo = true;\n      console.log(\"move: \", possibleMoves[i].x, \", \", possibleMoves[i].y);\n    }\n\n    this.setState({\n      boardView: newBoard,\n      selectedField: {\n        x: x,\n        y: y\n      }\n    }); //console.log(boardView);\n  }\n\n  removeMoveTos(boardView) {}\n\n  mouseOverField(x, y) {//    console.log(\"mouseOver:\",x,\",\",y);\n  }\n\n  clickOnCanvas(event) {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    console.log(\"x: \" + x + \" y: \" + y);\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      width,\n      height,\n      squareSize,\n      boardView,\n      possibleMoves\n    } = this.state;\n    var ctx = null;\n\n    const draw = (ctx, frameCount) => {\n      const boardTopx = 25;\n      const boardTopy = 25;\n      ctx.canvas.width = squareSize * (width + 1);\n      ctx.canvas.height = squareSize * (height + 1);\n\n      for (let i = 0; i < width; i++) {\n        for (let j = 0; j < height; j++) {\n          ctx.fillStyle = (i + j) % 2 == 0 ? \"white\" : \"gray\";\n          let xOffset = boardTopx + j * squareSize;\n          let yOffset = boardTopy + i * squareSize;\n          ctx.fillRect(xOffset, yOffset, squareSize, squareSize); //                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n        }\n      }\n\n      for (let k = 0; k < possibleMoves; k++) {} // draw the border around the chessboard\n\n\n      ctx.strokeStyle = \"black\";\n      ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inviteLink, /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), \"here is the Game: Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Player2: \", player2.name]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: draw,\n        onClick: this.clickOnCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","inviteLink","player1","player2","boardData","boardView","undefined","width","height","selectedField","possibleMoves","squareSize","loadGameData","loadBoard","selectField","bind","getGameData","then","res","setState","data","getBoard","bv","board","i","length","j","symbol","owner","console","log","x","y","newBoard","canMoveTo","removeMoveTos","mouseOverField","clickOnCanvas","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","render","ctx","draw","frameCount","boardTopx","boardTopy","canvas","fillStyle","xOffset","yOffset","fillRect","k","strokeStyle","strokeRect","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n\n\n    \n    constructor(props) {\n        super(props)\n\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            \n            //game\n            player1: {},\n            player2: {},\n            boardData: {}, // data from server\n            boardView: undefined, // symbol, playertype, selected, canMoveTo\n            width:16,\n            height:16,\n\n            //selection\n            selectedField:{},\n            possibleMoves:[],\n\n            //consts\n            squareSize: 25\n        }\n        this.loadGameData();\n        this.loadBoard();\n        this.selectField = this.selectField.bind(this);\n    }\n\n    loadGameData() {\n        const { gameId } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            //console.log(res.data);\n            this.setState({ player1: res.data.player1, player2: res.data.player2 });\n        });\n    \n    }\n\n    \n\n    loadBoard(){\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv=res.data.board;\n            \n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if(res.data.board[i][j]===null){\n                        bv[i][j]={\n                            symbol: \"\",\n                            owner: \"\",\n                            possibleMoves: []};\n                    } else {\n                        bv[i][j]={\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves};\n                    }\n                }\n            }\n            console.log(bv);\n            this.setState({ boardData:res.data,boardView:bv,width:bv[0].length,height:bv.length});\n\n        });\n    }\n\n    selectField(x,y){\n        const {boardView} =this.state;\n        let newBoard=boardView;\n        if(boardView[y][x].canMoveTo){\n            //\n        }\n        const possibleMoves =newBoard[y][x].possibleMoves; \n        for (let i = 0; i < boardView.length; i++) {\n            for (let j = 0; j < boardView[0].length; j++) {\n                newBoard[i][j].canMoveTo=false;\n            }\n        }\n\n        for(let i=0;i<possibleMoves.length;i++){\n            newBoard[possibleMoves[i].y][possibleMoves[i].x].canMoveTo = true;\n            console.log(\"move: \",possibleMoves[i].x, \", \", possibleMoves[i].y);\n        }\n        this.setState({boardView:newBoard, selectedField:{x:x,y:y}});\n        //console.log(boardView);\n    }\n\n    removeMoveTos(boardView){\n\n    }\n\n    mouseOverField(x,y){\n        //    console.log(\"mouseOver:\",x,\",\",y);\n    }\n\n\n    clickOnCanvas(event){\n        const rect = event.target.getBoundingClientRect()\n        const x = event.clientX - rect.left\n        const y = event.clientY - rect.top\n        console.log(\"x: \" + x + \" y: \" + y)\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2 ,width,height,squareSize,boardView,possibleMoves} = this.state;\n        var ctx = null;\n\n        const draw = (ctx, frameCount) => {\n            const boardTopx = 25;\n            const boardTopy = 25;\n\n            ctx.canvas.width=squareSize*(width+1)\n            ctx.canvas.height=squareSize*(height+1)\n            for(let i=0; i<width; i++) {\n              for(let j=0; j<height; j++) {\n                ctx.fillStyle = ((i+j)%2==0) ? \"white\":\"gray\";\n                let xOffset = boardTopx + j*squareSize;\n                let yOffset = boardTopy + i*squareSize;\n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n//                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n              }\n            }\n\n            for(let k=0; k<possibleMoves; k++) {\n                \n            }\n            // draw the border around the chessboard\n            ctx.strokeStyle = \"black\";\n            ctx.strokeRect(boardTopx, boardTopy, squareSize*width, squareSize*height)\n\n\n          }\n          \n        return (\n            <div>\n                {inviteLink}\n                <div></div>\n                here is the Game: Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>}\n                <div></div>\n            <Canvas draw={draw} onClick={this.clickOnCanvas} />\n            </div>\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}