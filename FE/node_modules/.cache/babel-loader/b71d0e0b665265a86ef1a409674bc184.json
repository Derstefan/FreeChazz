{"ast":null,"code":"var _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/piece-card.component.jsx\";\nimport React, { Component } from 'react';\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport mainService from '../services/main.service';\n/**\n * \n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieceCardComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //    pieceId: this.props.pieceId,\n      width: 160,\n      height: 300,\n      pieceImage: \"\",\n      piece: {},\n      //consts\n      actionsSize: 9,\n      actionsOffsetX: 13,\n      actionsOffsetY: 160,\n      imageOffsetX: 32,\n      imageOffsetY: 10\n    };\n  }\n\n  componentDidMount() {\n    const {\n      pieceId\n    } = this.props;\n    console.log(\"pieceId \", pieceId);\n\n    if (pieceId) {\n      if (pieceId !== \"\") {\n        mainService.pieceData(pieceId).then(res => {\n          var pg = new PieceGenerator(100, 120, \"\" + pieceId);\n          this.setState({\n            piece: res.data,\n            pieceImage: pg.drawPieceCanvas(\"P1\")\n          }); // console.log(res.data);\n        });\n      }\n    }\n  } // static getDerivedStateFromProps(props, state) {\n  //     if (props.pieceId !== state.pieceId) {\n  //         //Change in props\n  //         console.log(props.pieceId);\n  //         return {\n  //             pieceId: props.pieceId\n  //         };\n  //     }\n  //     return null; // No change to state\n  // }\n\n\n  drawCanvas() {\n    const {\n      piece,\n      pieceImage,\n      width,\n      height,\n      actionsSize,\n      actionsOffsetX,\n      actionsOffsetY\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      ctx.canvas.width = width;\n      ctx.canvas.height = height;\n\n      if (piece.actions !== undefined) {\n        ctx.drawImage(pieceImage, 32, 10); // draw actions\n\n        for (var i = 0; i < piece.actions.length; i++) {\n          for (var j = 0; j < piece.actions.actions[0].length; j++) {\n            if (piece.actions.actions[i][j] !== \"-\") {\n              if (piece.actions.actions[i][j] === \"P\") {\n                ctx.fillStyle = \"#11AA11\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              } else if (piece.actions.actions[i][j] === \"E\") {\n                ctx.fillStyle = \"#BB1111\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              } else if (piece.actions.actions[i][j] === \"F\") {\n                ctx.fillStyle = \"#1111BB\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              } else {\n                ctx.fillStyle = \"#666666\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              }\n            }\n          }\n        }\n\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = \"#AAAAAA\";\n\n        for (i = 0; i < piece.actions.actions.length + 1; i++) {\n          //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.actions.actions.length + 1 * actionsSize);\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n          ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + piece.actions.actions.length * actionsSize);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n          ctx.lineTo(actionsOffsetX + piece.actions.actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n          ctx.stroke();\n        }\n      }\n    };\n\n    return draw;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawCanvas()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 22\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default PieceCardComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/piece-card.component.jsx"],"names":["React","Component","Canvas","PieceGenerator","mainService","PieceCardComponent","constructor","props","state","width","height","pieceImage","piece","actionsSize","actionsOffsetX","actionsOffsetY","imageOffsetX","imageOffsetY","componentDidMount","pieceId","console","log","pieceData","then","res","pg","setState","data","drawPieceCanvas","drawCanvas","draw","ctx","frameCount","canvas","actions","undefined","drawImage","i","length","j","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../components/canvas.component';\nimport PieceGenerator from '../components/generator/piece-generator';\nimport mainService from '../services/main.service';\n\n/**\n * \n */\nclass PieceCardComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n\n        this.state = {\n            //    pieceId: this.props.pieceId,\n            width: 160,\n            height: 300,\n            pieceImage: \"\",\n\n            piece: {},\n\n            //consts\n            actionsSize: 9,\n            actionsOffsetX: 13,\n            actionsOffsetY: 160,\n\n            imageOffsetX: 32,\n            imageOffsetY: 10\n        }\n    }\n\n    componentDidMount() {\n        const { pieceId } = this.props;\n\n        console.log(\"pieceId \", pieceId);\n        if (pieceId) {\n            if (pieceId !== \"\") {\n                mainService.pieceData(pieceId).then(res => {\n                    var pg = new PieceGenerator(100, 120, \"\" + pieceId);\n                    this.setState({\n                        piece: res.data,\n                        pieceImage: pg.drawPieceCanvas(\"P1\")\n                    });\n                    // console.log(res.data);\n                }\n                );\n            }\n        }\n    }\n\n\n    // static getDerivedStateFromProps(props, state) {\n    //     if (props.pieceId !== state.pieceId) {\n    //         //Change in props\n    //         console.log(props.pieceId);\n    //         return {\n    //             pieceId: props.pieceId\n    //         };\n    //     }\n    //     return null; // No change to state\n    // }\n\n\n\n    drawCanvas() {\n        const { piece, pieceImage, width, height, actionsSize, actionsOffsetX, actionsOffsetY } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            if (piece.actions !== undefined) {\n                ctx.drawImage(pieceImage, 32, 10);\n                // draw actions\n\n                for (var i = 0; i < piece.actions.length; i++) {\n                    for (var j = 0; j < piece.actions.actions[0].length; j++) {\n                        if (piece.actions.actions[i][j] !== \"-\") {\n                            if (piece.actions.actions[i][j] === \"P\") {\n                                ctx.fillStyle = \"#11AA11\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            } else if (piece.actions.actions[i][j] === \"E\") {\n                                ctx.fillStyle = \"#BB1111\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            } else if (piece.actions.actions[i][j] === \"F\") {\n                                ctx.fillStyle = \"#1111BB\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            } else {\n                                ctx.fillStyle = \"#666666\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            }\n                        }\n                    }\n                }\n\n                ctx.lineWidth = 0.5;\n                ctx.strokeStyle = \"#AAAAAA\";\n                for (i = 0; i < piece.actions.actions.length + 1; i++) {\n                    //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.actions.actions.length + 1 * actionsSize);\n\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                    ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.actions.actions.length) * actionsSize);\n                    ctx.stroke();\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                    ctx.lineTo(actionsOffsetX + (piece.actions.actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                    ctx.stroke();\n\n                }\n            }\n\n\n\n\n        }\n        return draw;\n    }\n\n\n\n\n    render() {\n\n        return (<div><Canvas draw={this.drawCanvas()} /> </div>);\n    }\n}\n\nexport default PieceCardComponent"]},"metadata":{},"sourceType":"module"}