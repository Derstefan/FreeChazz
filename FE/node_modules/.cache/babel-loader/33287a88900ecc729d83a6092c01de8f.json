{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-card.component.jsx\";\nimport React, { Component } from 'react';\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\nclass PieceCardComponent extends Component {\n  constructor(props) {\n    super(props); //console.log(\"id: \", this.props.match.params.id);\n\n    this.state = {\n      pieceId: this.props.key,\n      width: 160,\n      height: 300,\n      pieceImage: \"\",\n      piece: {},\n      //consts\n      actionsSize: 7,\n      actionsOffsetX: 10,\n      actionsOffsetY: 160,\n      imageOffsetX: 32,\n      imageOffsetY: 10\n    };\n  }\n\n  componentDidMount() {\n    const {\n      pieceId\n    } = this.state; // const { pieceId } = this.state;\n    // if (pieceId !== key) {\n    //     this.setState({ pieceId: key });\n    // }\n\n    console.log(\"key\", key);\n    mainService.pieceData(key).then(res => {\n      var pg = new PieceGenerator(100, 120, \"\" + key);\n      this.setState({\n        piece: res.data,\n        pieceImage: pg.drawPieceCanvas(\"P1\")\n      }); //      console.log(res.data);\n    });\n  }\n\n  drawCanvas() {\n    const {\n      piece,\n      pieceImage,\n      width,\n      height,\n      actionsSize,\n      actionsOffsetX,\n      actionsOffsetY\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      ctx.canvas.width = width;\n      ctx.canvas.height = height;\n\n      if (piece.moves !== undefined) {\n        ctx.drawImage(pieceImage, 32, 10); // draw actions\n\n        for (var i = 0; i < piece.moves.actions.length; i++) {\n          for (var j = 0; j < piece.moves.actions[0].length; j++) {\n            if (piece.moves.actions[i][j] !== \"-\") {\n              if (piece.moves.actions[i][j] === \"P\") {\n                ctx.fillStyle = \"#11AA11\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              } else {\n                ctx.fillStyle = \"#666666\";\n                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n              }\n            }\n          }\n        }\n\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = \"#666666\";\n\n        for (var i = 0; i < piece.moves.actions.length + 1; i++) {\n          //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.moves.actions.length + 1 * actionsSize);\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n          ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + piece.moves.actions.length * actionsSize);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n          ctx.lineTo(actionsOffsetX + piece.moves.actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n          ctx.stroke();\n        }\n      }\n    };\n\n    return draw;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawCanvas()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 22\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default PieceCardComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-card.component.jsx"],"names":["React","Component","Canvas","PieceGenerator","mainService","PieceCardComponent","constructor","props","state","pieceId","key","width","height","pieceImage","piece","actionsSize","actionsOffsetX","actionsOffsetY","imageOffsetX","imageOffsetY","componentDidMount","console","log","pieceData","then","res","pg","setState","data","drawPieceCanvas","drawCanvas","draw","ctx","frameCount","canvas","moves","undefined","drawImage","i","actions","length","j","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\n\nclass PieceCardComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        //console.log(\"id: \", this.props.match.params.id);\n        this.state = {\n            pieceId: this.props.key,\n            width: 160,\n            height: 300,\n            pieceImage: \"\",\n\n            piece: {},\n\n            //consts\n            actionsSize: 7,\n            actionsOffsetX: 10,\n            actionsOffsetY: 160,\n\n            imageOffsetX: 32,\n            imageOffsetY: 10\n        }\n\n    }\n\n    componentDidMount() {\n        const { pieceId } = this.state;\n        // const { pieceId } = this.state;\n        // if (pieceId !== key) {\n        //     this.setState({ pieceId: key });\n        // }\n        console.log(\"key\", key);\n\n        mainService.pieceData(key).then(res => {\n            var pg = new PieceGenerator(100, 120, \"\" + key);\n            this.setState({\n                piece: res.data,\n                pieceImage: pg.drawPieceCanvas(\"P1\")\n            });\n            //      console.log(res.data);\n\n        }\n        );\n    }\n\n\n\n\n\n\n    drawCanvas() {\n        const { piece, pieceImage, width, height, actionsSize, actionsOffsetX, actionsOffsetY } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            if (piece.moves !== undefined) {\n                ctx.drawImage(pieceImage, 32, 10);\n                // draw actions\n\n                for (var i = 0; i < piece.moves.actions.length; i++) {\n                    for (var j = 0; j < piece.moves.actions[0].length; j++) {\n                        if (piece.moves.actions[i][j] !== \"-\") {\n                            if (piece.moves.actions[i][j] === \"P\") {\n                                ctx.fillStyle = \"#11AA11\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            } else {\n                                ctx.fillStyle = \"#666666\";\n                                ctx.fillRect(actionsOffsetX + i * actionsSize, actionsOffsetY + j * actionsSize, actionsSize, actionsSize);\n                            }\n                        }\n                    }\n                }\n\n                ctx.lineWidth = 0.5;\n                ctx.strokeStyle = \"#666666\";\n                for (var i = 0; i < piece.moves.actions.length + 1; i++) {\n                    //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + piece.moves.actions.length + 1 * actionsSize);\n\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                    ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (piece.moves.actions.length) * actionsSize);\n                    ctx.stroke();\n\n                    ctx.beginPath();\n                    ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                    ctx.lineTo(actionsOffsetX + (piece.moves.actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                    ctx.stroke();\n\n                }\n            }\n\n\n\n\n        }\n        return draw;\n    }\n\n\n\n\n    render() {\n        return (<div><Canvas draw={this.drawCanvas()} /> </div>);\n    }\n}\n\nexport default PieceCardComponent"]},"metadata":{},"sourceType":"module"}