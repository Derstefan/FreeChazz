{"ast":null,"code":"import Config from \"./config.json\";\n\nclass PieceCard {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n    this.canvas.width = Config.card.width;\n    this.canvas.height = Config.card.height;\n  }\n\n  drawCanvas(actions, pieceImage, owner) {\n    const actionsSize = Config.card.actionsSize;\n    const actionsOffsetX = Config.card.actionsOffsetX;\n    const actionsOffsetY = Config.card.actionsOffsetY;\n    var ctx = this.ctx;\n\n    if (actions !== undefined) {\n      ctx.canvas.width = Config.card.width;\n      ctx.canvas.height = Config.card.height;\n      ctx.drawImage(pieceImage, 32, 10); // draw actions\n\n      var actionLegend = [];\n\n      for (var i = 0; i < actions.length; i++) {\n        for (var j = 0; j < actions[0].length; j++) {\n          if (actions[i][j] !== \"-\") {\n            var offsetY;\n\n            if (owner === \"P1\") {\n              offsetY = actionsOffsetY + (actions[0].length - 1 - j) * actionsSize;\n            } else {\n              offsetY = actionsOffsetY + j * actionsSize;\n            }\n\n            if (!actionLegend.includes(actions[i][j])) {\n              actionLegend.push(actions[i][j]);\n            }\n\n            ctx.fillStyle = this.mapActionToColor(actions[i][j]);\n            ctx.fillRect(actionsOffsetX + i * actionsSize, offsetY, actionsSize, actionsSize);\n          }\n        }\n      }\n\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = \"#AAAAAA\";\n\n      for (i = 0; i < actions.length + 1; i++) {\n        //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n        //console.log(i);\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n        ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + actions.length * actionsSize);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n        ctx.lineTo(actionsOffsetX + actions.length * actionsSize, actionsOffsetY + i * actionsSize);\n        ctx.stroke();\n      } // Legend\n\n\n      for (i = 0; i < actionLegend; i++) {\n        ctx.fillStyle = this.mapActionToColor(actionLegend[i]);\n        console.log(actionLegend[i]);\n        ctx.fillRect(actionsOffsetX + actions.length * actionsSize + i * 2 * actionsSize, actionsOffsetY, actionsSize, actionsSize);\n      }\n    }\n  }\n\n  mapActionToColor(str) {\n    if (str === \"P\") {\n      return \"#11AA11\";\n    } else if (str === \"E\") {\n      return \"#BBBB11\";\n    } else if (str === \"F\") {\n      return \"#1111BB\";\n    } else if (str === \"M\") {\n      return \"#11BBBB\";\n    } else {\n      return \"#666666\";\n    }\n  }\n\n  drawPieceCard(actions, pieceImage, owner) {\n    this.drawCanvas(actions, pieceImage, owner);\n    return this.canvas;\n  }\n\n}\n\nexport default PieceCard;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/piece-card.jsx"],"names":["Config","PieceCard","constructor","canvas","document","createElement","ctx","getContext","width","card","height","drawCanvas","actions","pieceImage","owner","actionsSize","actionsOffsetX","actionsOffsetY","undefined","drawImage","actionLegend","i","length","j","offsetY","includes","push","fillStyle","mapActionToColor","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","console","log","str","drawPieceCard"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;;AAEA,MAAMC,SAAN,CAAgB;AAEZC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAcC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACA,SAAKC,GAAL,GAAW,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAX;AACA,SAAKJ,MAAL,CAAYK,KAAZ,GAAoBR,MAAM,CAACS,IAAP,CAAYD,KAAhC;AACA,SAAKL,MAAL,CAAYO,MAAZ,GAAqBV,MAAM,CAACS,IAAP,CAAYC,MAAjC;AACH;;AAEDC,EAAAA,UAAU,CAACC,OAAD,EAAUC,UAAV,EAAsBC,KAAtB,EAA6B;AACnC,UAAMC,WAAW,GAAGf,MAAM,CAACS,IAAP,CAAYM,WAAhC;AACA,UAAMC,cAAc,GAAGhB,MAAM,CAACS,IAAP,CAAYO,cAAnC;AACA,UAAMC,cAAc,GAAGjB,MAAM,CAACS,IAAP,CAAYQ,cAAnC;AACA,QAAIX,GAAG,GAAG,KAAKA,GAAf;;AAEA,QAAIM,OAAO,KAAKM,SAAhB,EAA2B;AACvBZ,MAAAA,GAAG,CAACH,MAAJ,CAAWK,KAAX,GAAmBR,MAAM,CAACS,IAAP,CAAYD,KAA/B;AACAF,MAAAA,GAAG,CAACH,MAAJ,CAAWO,MAAX,GAAoBV,MAAM,CAACS,IAAP,CAAYC,MAAhC;AAEAJ,MAAAA,GAAG,CAACa,SAAJ,CAAcN,UAAd,EAA0B,EAA1B,EAA8B,EAA9B,EAJuB,CAMvB;;AAEA,UAAIO,YAAY,GAAG,EAAnB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACU,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,OAAO,CAAC,CAAD,CAAP,CAAWU,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AACxC,cAAIX,OAAO,CAACS,CAAD,CAAP,CAAWE,CAAX,MAAkB,GAAtB,EAA2B;AACvB,gBAAIC,OAAJ;;AACA,gBAAIV,KAAK,KAAK,IAAd,EAAoB;AAChBU,cAAAA,OAAO,GAAGP,cAAc,GAAG,CAACL,OAAO,CAAC,CAAD,CAAP,CAAWU,MAAX,GAAoB,CAApB,GAAwBC,CAAzB,IAA8BR,WAAzD;AACH,aAFD,MAEO;AACHS,cAAAA,OAAO,GAAGP,cAAc,GAAGM,CAAC,GAAGR,WAA/B;AACH;;AACD,gBAAI,CAACK,YAAY,CAACK,QAAb,CAAsBb,OAAO,CAACS,CAAD,CAAP,CAAWE,CAAX,CAAtB,CAAL,EAA2C;AACvCH,cAAAA,YAAY,CAACM,IAAb,CAAkBd,OAAO,CAACS,CAAD,CAAP,CAAWE,CAAX,CAAlB;AACH;;AACDjB,YAAAA,GAAG,CAACqB,SAAJ,GAAgB,KAAKC,gBAAL,CAAsBhB,OAAO,CAACS,CAAD,CAAP,CAAWE,CAAX,CAAtB,CAAhB;AACAjB,YAAAA,GAAG,CAACuB,QAAJ,CAAab,cAAc,GAAGK,CAAC,GAAGN,WAAlC,EAA+CS,OAA/C,EAAwDT,WAAxD,EAAqEA,WAArE;AACH;AACJ;AACJ;;AAGDT,MAAAA,GAAG,CAACwB,SAAJ,GAAgB,GAAhB;AACAxB,MAAAA,GAAG,CAACyB,WAAJ,GAAkB,SAAlB;;AACA,WAAKV,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,OAAO,CAACU,MAAR,GAAiB,CAAjC,EAAoCD,CAAC,EAArC,EAAyC;AACrC;AACA;AAEAf,QAAAA,GAAG,CAAC0B,SAAJ;AACA1B,QAAAA,GAAG,CAAC2B,MAAJ,CAAWjB,cAAc,GAAGK,CAAC,GAAGN,WAAhC,EAA6CE,cAA7C;AACAX,QAAAA,GAAG,CAAC4B,MAAJ,CAAWlB,cAAc,GAAGK,CAAC,GAAGN,WAAhC,EAA6CE,cAAc,GAAIL,OAAO,CAACU,MAAT,GAAmBP,WAAjF;AACAT,QAAAA,GAAG,CAAC6B,MAAJ;AAEA7B,QAAAA,GAAG,CAAC0B,SAAJ;AACA1B,QAAAA,GAAG,CAAC2B,MAAJ,CAAWjB,cAAX,EAA2BC,cAAc,GAAGI,CAAC,GAAGN,WAAhD;AACAT,QAAAA,GAAG,CAAC4B,MAAJ,CAAWlB,cAAc,GAAIJ,OAAO,CAACU,MAAT,GAAmBP,WAA/C,EAA4DE,cAAc,GAAGI,CAAC,GAAGN,WAAjF;AACAT,QAAAA,GAAG,CAAC6B,MAAJ;AACH,OA5CsB,CA8CvB;;;AACA,WAAKd,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,YAAhB,EAA8BC,CAAC,EAA/B,EAAmC;AAC/Bf,QAAAA,GAAG,CAACqB,SAAJ,GAAgB,KAAKC,gBAAL,CAAsBR,YAAY,CAACC,CAAD,CAAlC,CAAhB;AACAe,QAAAA,OAAO,CAACC,GAAR,CAAYjB,YAAY,CAACC,CAAD,CAAxB;AACAf,QAAAA,GAAG,CAACuB,QAAJ,CAAab,cAAc,GAAGJ,OAAO,CAACU,MAAR,GAAiBP,WAAlC,GAAgDM,CAAC,GAAG,CAAJ,GAAQN,WAArE,EAAkFE,cAAlF,EAAkGF,WAAlG,EAA+GA,WAA/G;AACH;AAEJ;AACJ;;AAEDa,EAAAA,gBAAgB,CAACU,GAAD,EAAM;AAClB,QAAIA,GAAG,KAAK,GAAZ,EAAiB;AACb,aAAO,SAAP;AACH,KAFD,MAEO,IAAIA,GAAG,KAAK,GAAZ,EAAiB;AACpB,aAAO,SAAP;AACH,KAFM,MAEA,IAAIA,GAAG,KAAK,GAAZ,EAAiB;AACpB,aAAO,SAAP;AACH,KAFM,MAEA,IAAIA,GAAG,KAAK,GAAZ,EAAiB;AACpB,aAAO,SAAP;AACH,KAFM,MAEA;AACH,aAAO,SAAP;AACH;AACJ;;AAEDC,EAAAA,aAAa,CAAC3B,OAAD,EAAUC,UAAV,EAAsBC,KAAtB,EAA6B;AACtC,SAAKH,UAAL,CAAgBC,OAAhB,EAAyBC,UAAzB,EAAqCC,KAArC;AACA,WACI,KAAKX,MADT;AAGH;;AA1FW;;AA6FhB,eAAeF,SAAf","sourcesContent":["import Config from \"./config.json\";\n\nclass PieceCard {\n\n    constructor() {\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = Config.card.width;\n        this.canvas.height = Config.card.height;\n    }\n\n    drawCanvas(actions, pieceImage, owner) {\n        const actionsSize = Config.card.actionsSize;\n        const actionsOffsetX = Config.card.actionsOffsetX;\n        const actionsOffsetY = Config.card.actionsOffsetY;\n        var ctx = this.ctx;\n\n        if (actions !== undefined) {\n            ctx.canvas.width = Config.card.width;\n            ctx.canvas.height = Config.card.height;\n\n            ctx.drawImage(pieceImage, 32, 10);\n\n            // draw actions\n\n            var actionLegend = [];\n\n            for (var i = 0; i < actions.length; i++) {\n                for (var j = 0; j < actions[0].length; j++) {\n                    if (actions[i][j] !== \"-\") {\n                        var offsetY;\n                        if (owner === \"P1\") {\n                            offsetY = actionsOffsetY + (actions[0].length - 1 - j) * actionsSize;\n                        } else {\n                            offsetY = actionsOffsetY + j * actionsSize\n                        }\n                        if (!actionLegend.includes(actions[i][j])) {\n                            actionLegend.push(actions[i][j]);\n                        }\n                        ctx.fillStyle = this.mapActionToColor(actions[i][j]);\n                        ctx.fillRect(actionsOffsetX + i * actionsSize, offsetY, actionsSize, actionsSize);\n                    }\n                }\n            }\n\n\n            ctx.lineWidth = 0.5;\n            ctx.strokeStyle = \"#AAAAAA\";\n            for (i = 0; i < actions.length + 1; i++) {\n                //  ctx.drawline(actionsOffsetX + i * actionsSize, actionsOffsetY, actionsOffsetX + i * actionsSize, actionsOffsetX + actions.length + 1 * actionsSize);\n                //console.log(i);\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX + i * actionsSize, actionsOffsetY);\n                ctx.lineTo(actionsOffsetX + i * actionsSize, actionsOffsetY + (actions.length) * actionsSize);\n                ctx.stroke();\n\n                ctx.beginPath();\n                ctx.moveTo(actionsOffsetX, actionsOffsetY + i * actionsSize);\n                ctx.lineTo(actionsOffsetX + (actions.length) * actionsSize, actionsOffsetY + i * actionsSize);\n                ctx.stroke();\n            }\n\n            // Legend\n            for (i = 0; i < actionLegend; i++) {\n                ctx.fillStyle = this.mapActionToColor(actionLegend[i]);\n                console.log(actionLegend[i]);\n                ctx.fillRect(actionsOffsetX + actions.length * actionsSize + i * 2 * actionsSize, actionsOffsetY, actionsSize, actionsSize);\n            }\n\n        }\n    }\n\n    mapActionToColor(str) {\n        if (str === \"P\") {\n            return \"#11AA11\";\n        } else if (str === \"E\") {\n            return \"#BBBB11\";\n        } else if (str === \"F\") {\n            return \"#1111BB\";\n        } else if (str === \"M\") {\n            return \"#11BBBB\";\n        } else {\n            return \"#666666\";\n        }\n    }\n\n    drawPieceCard(actions, pieceImage, owner) {\n        this.drawCanvas(actions, pieceImage, owner);\n        return (\n            this.canvas\n        );\n    }\n}\n\nexport default PieceCard"]},"metadata":{},"sourceType":"module"}