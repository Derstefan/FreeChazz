{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from '../components/piece.component';\nimport PieceGeneratorComponent from '../generator/piece-generator.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport PieceCardComponent from '../components/piece-card.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //game\n      player1: {},\n      player2: {},\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      width: 16,\n      height: 16,\n      turn: \"P1\",\n      round: 0,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      pieceId: \"\",\n      //pieces\n      pieces: {},\n      pieceCard: {},\n      //updater\n      loadTimer: undefined,\n      isInited: false,\n      //consts\n      squareSize: 45,\n      boardTopx: 30,\n      boardTopy: 30,\n      updateInterval: 2000\n    };\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n    this.play = this.play.bind(this);\n    this.loadBoard = this.loadBoard.bind(this);\n    this.loadPieceData = this.loadPieceData.bind(this);\n    this.updatePieceCard = this.updatePieceCard.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      isInited\n    } = this.state;\n    this.updateGameData();\n\n    if (!isInited) {\n      this.loadBoard(true);\n    }\n\n    const loadTimer = setInterval(() => {\n      this.updateGameData();\n    }, this.state.updateInterval);\n  }\n\n  loadPieceData(bv) {\n    const {\n      squareSize\n    } = this.state; // console.log(\"is inside\", inited);\n\n    var pieces = new Map(); // fill pieces canvas buffer\n\n    for (let i = 0; i < bv.length; i++) {\n      for (let j = 0; j < bv[0].length; j++) {\n        // TODO: P1 und P2 unterscheidung?\n        // console.log(bv[i][j].symbol);\n        if (bv[i][j].symbol !== \"\" && pieces.get(bv[i][j].symbol) === undefined) {\n          var pg = new PieceGenerator(squareSize * 0.8, squareSize * 0.95, bv[i][j].symbol); //TODO: owner!!!\n\n          pieces.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner)); // pieces[bv[i][j].symbol] = PieceGeneratorComponent.drawPieceCanvas(squareSize * 0.8, squareSize * 0.95, bv[i][j].symbol, bv[i][j].owner);\n        }\n      }\n    } //        console.log(str);\n    //        console.log(pieces);\n    //console.log(\"size\", pieces);\n\n\n    this.setState({\n      pieces: pieces,\n      isInited: true,\n      boardView: bv,\n      width: bv[0].length,\n      height: bv.length\n    });\n  }\n\n  updateGameData() {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2,\n        turn: res.data.turn,\n        round: res.data.round\n      }); //when other player made his turn\n\n      if (turn !== res.data.turn) {\n        this.loadBoard(false);\n      } //check game end ?\n\n    });\n  }\n\n  loadBoard(init) {\n    const {\n      gameId,\n      squareSize\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = res.data.board;\n      console.log(bv);\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (res.data.board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      }\n\n      if (init) {\n        this.loadPieceData(bv);\n      } else {\n        this.setState({\n          boardData: res.data,\n          boardView: bv,\n          width: bv[0].length,\n          height: bv.length\n        });\n      }\n    });\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField,\n      me,\n      turn,\n      possibleMoves\n    } = this.state;\n    const isPlayerTurn = me === turn;\n    const isEmptyField = boardView[y][x].symbol === \"\";\n    const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n    if (sthSelected) {\n      const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n      const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n      const isOwnSelected = me == boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n      if (isAlreadySelected) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {},\n          pieceId: \"\"\n        });\n      } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n        // move\n        const draw = {\n          fromPos: {\n            x: selectedField.x,\n            y: selectedField.y\n          },\n          toPos: {\n            x: x,\n            y: y\n          }\n        };\n        this.play(draw);\n      } else if (isEmptyField) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {},\n          pieceId: \"\"\n        });\n      } else {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          },\n          pieceId: boardView[y][x].symbol,\n          pieceCard: /*#__PURE__*/_jsxDEV(PieceCardComponent, {\n            pieceId: boardView[y][x].symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 32\n          }, this)\n        });\n      }\n    } else {\n      if (!isEmptyField) {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          },\n          pieceId: boardView[y][x].symbol,\n          pieceCard: /*#__PURE__*/_jsxDEV(PieceCardComponent, {\n            pieceId: boardView[y][x].symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 32\n          }, this)\n        });\n      }\n    }\n  }\n\n  play(draw) {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.play(gameId, draw).then(res => {\n      console.log(\"played\", turn);\n      const nextTurn = turn === \"P1\" ? \"P2\" : \"P1\";\n      this.setState({\n        possibleMoves: [],\n        selectedField: {},\n        turn: nextTurn\n      });\n      this.updateGameData();\n      this.loadBoard();\n    });\n  }\n\n  clickOnCanvas(event) {\n    const {\n      squareSize,\n      boardTopy,\n      boardTopx\n    } = this.state;\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - boardTopx;\n    const y = event.clientY - rect.top - boardTopy; //console.log(\"x: \" + x + \" y: \" + y);\n\n    this.selectField((x - x % squareSize) / squareSize, (y - y % squareSize) / squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      squareSize,\n      boardView,\n      possibleMoves,\n      boardTopy,\n      boardTopx,\n      selectedField,\n      me,\n      pieces,\n      isInited\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        ctx.canvas.width = squareSize * (width + 1);\n        ctx.canvas.height = squareSize * (height + 1); //draw board\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 == 0 ? \"#D2B48C\" : \"PeachPuff\";\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          }\n        }\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.45;\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < possibleMoves.length; k++) {\n            let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0] && isInited) {\n          ctx.fillStyle = \"black\";\n          ctx.font = \"20px Arial\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let xOffset = boardTopx + (i + 0.115) * squareSize;\n                let yOffset = boardTopy + (j + 0.05) * squareSize;\n\n                if (pieces.length !== 0) {\n                  //  console.log(pieces);\n                  ctx.drawImage(pieces.get(boardView[j][i].symbol), xOffset, yOffset);\n                } //}\n\n              }\n            }\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n      }\n    };\n\n    return draw;\n  }\n\n  drawPiece(pieceCode, player) {\n    if (player === \"P1\") {//return \"♖\";\n    }\n\n    return pieceCode; //        return \"♜\";\n  }\n\n  drawGameText() {\n    const {\n      me,\n      turn\n    } = this.state;\n\n    if (me === turn) {\n      return \"Your turn!\";\n    }\n\n    return \"Wait for opponents turn...\";\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      boardView,\n      selectedField,\n      turn,\n      me,\n      round,\n      isInited\n    } = this.state;\n    var piece = \"\";\n\n    if (boardView[0] && selectedField.x) {\n      piece = boardView[selectedField.y][selectedField.x]; //console.log(piece);\n    }\n\n    console.log(\"pieceId (game component) :\", this.state.pieceId); // TODO: aufteilen in GameData und PieceData ?\n\n    if (isInited) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"            \", this.drawGameText()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"mb-3 mt-5\",\n            children: [\"       \", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              children: [\"             \", this.state.pieceId !== \"\" && this.state.pieceCard]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 51\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"mb-5\",\n            children: [/*#__PURE__*/_jsxDEV(Canvas, {\n              draw: this.drawMethod(),\n              onClick: this.clickOnCanvas\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: inviteLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\"Player2: \", player2.name]\n              }, void 0, true), \" \", \" round:\", round]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 21\n      }, this);\n    }\n\n    return \"\";\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceComponent","PieceGeneratorComponent","PieceGenerator","PieceCardComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","player1","player2","boardData","boardView","width","height","turn","round","selectedField","possibleMoves","pieceId","pieces","pieceCard","loadTimer","undefined","isInited","squareSize","boardTopx","boardTopy","updateInterval","selectField","bind","clickOnCanvas","drawMethod","play","loadBoard","loadPieceData","updatePieceCard","componentDidMount","updateGameData","setInterval","bv","Map","i","length","j","symbol","get","pg","set","drawPieceCanvas","owner","setState","getGameData","then","res","data","init","getBoard","board","console","log","x","y","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","frameCount","canvas","fillStyle","xOffset","yOffset","fillRect","globalAlpha","k","font","drawImage","strokeStyle","strokeRect","drawPiece","pieceCode","drawGameText","render","piece","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,kBAAP,MAA+B,oCAA/B;;AAKA,MAAMC,aAAN,SAA4BP,SAA5B,CAAsC;AAIlCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCJ,MADxC;AAETK,MAAAA,EAAE,EAAEJ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCE,MAFpC;AAGTC,MAAAA,UAAU,EAAE,oCAAoCN,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCJ,MAHhF;AAKT;AACAQ,MAAAA,OAAO,EAAE,EANA;AAOTC,MAAAA,OAAO,EAAE,EAPA;AAQTC,MAAAA,SAAS,EAAE,EARF;AAQM;AACfC,MAAAA,SAAS,EAAE,EATF;AASM;AACfC,MAAAA,KAAK,EAAE,EAVE;AAWTC,MAAAA,MAAM,EAAE,EAXC;AAYTC,MAAAA,IAAI,EAAE,IAZG;AAaTC,MAAAA,KAAK,EAAE,CAbE;AAgBT;AACAC,MAAAA,aAAa,EAAE,EAjBN;AAkBTC,MAAAA,aAAa,EAAE,EAlBN;AAmBTC,MAAAA,OAAO,EAAE,EAnBA;AAqBT;AACAC,MAAAA,MAAM,EAAE,EAtBC;AAuBTC,MAAAA,SAAS,EAAE,EAvBF;AAyBT;AACAC,MAAAA,SAAS,EAAEC,SA1BF;AA2BTC,MAAAA,QAAQ,EAAE,KA3BD;AA8BT;AACAC,MAAAA,UAAU,EAAE,EA/BH;AAgCTC,MAAAA,SAAS,EAAE,EAhCF;AAiCTC,MAAAA,SAAS,EAAE,EAjCF;AAkCTC,MAAAA,cAAc,EAAE;AAlCP,KAAb;AAoCA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,IAAL,GAAY,KAAKA,IAAL,CAAUH,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKK,aAAL,GAAqB,KAAKA,aAAL,CAAmBL,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKM,eAAL,GAAuB,KAAKA,eAAL,CAAqBN,IAArB,CAA0B,IAA1B,CAAvB;AAEH;;AAEDO,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEb,MAAAA;AAAF,QAAe,KAAKxB,KAA1B;AACA,SAAKsC,cAAL;;AAEA,QAAI,CAACd,QAAL,EAAe;AACX,WAAKU,SAAL,CAAe,IAAf;AACH;;AACD,UAAMZ,SAAS,GAAGiB,WAAW,CAAC,MAAM;AAChC,WAAKD,cAAL;AAEH,KAH4B,EAG1B,KAAKtC,KAAL,CAAW4B,cAHe,CAA7B;AAIH;;AAEDO,EAAAA,aAAa,CAACK,EAAD,EAAK;AACd,UAAM;AAAEf,MAAAA;AAAF,QAAiB,KAAKzB,KAA5B,CADc,CAGd;;AACA,QAAIoB,MAAM,GAAG,IAAIqB,GAAJ,EAAb,CAJc,CAMd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,EAAE,CAACG,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAAC,CAAD,CAAF,CAAMG,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC;AACA;AAEA,YAAIJ,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,EAASC,MAAT,KAAoB,EAApB,IAA0BzB,MAAM,CAAC0B,GAAP,CAAWN,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,EAASC,MAApB,MAAgCtB,SAA9D,EAAyE;AAErE,cAAIwB,EAAE,GAAG,IAAIpD,cAAJ,CAAmB8B,UAAU,GAAG,GAAhC,EAAqCA,UAAU,GAAG,IAAlD,EAAwDe,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,EAASC,MAAjE,CAAT,CAFqE,CAEa;;AAClFzB,UAAAA,MAAM,CAAC4B,GAAP,CAAWR,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,EAASC,MAApB,EAA4BE,EAAE,CAACE,eAAH,CAAmBT,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,EAASM,KAA5B,CAA5B,EAHqE,CAIrE;AAEH;AACJ;AACJ,KApBa,CAqBd;AACA;AACA;;;AACA,SAAKC,QAAL,CAAc;AAAE/B,MAAAA,MAAM,EAAEA,MAAV;AAAkBI,MAAAA,QAAQ,EAAE,IAA5B;AAAkCZ,MAAAA,SAAS,EAAE4B,EAA7C;AAAiD3B,MAAAA,KAAK,EAAE2B,EAAE,CAAC,CAAD,CAAF,CAAMG,MAA9D;AAAsE7B,MAAAA,MAAM,EAAE0B,EAAE,CAACG;AAAjF,KAAd;AACH;;AAIDL,EAAAA,cAAc,GAAG;AACb,UAAM;AAAErC,MAAAA,MAAF;AAAUc,MAAAA;AAAV,QAAmB,KAAKf,KAA9B;AACAT,IAAAA,WAAW,CAAC6D,WAAZ,CAAwBnD,MAAxB,EAAgCoD,IAAhC,CAAsCC,GAAD,IAAS;AAC1C,WAAKH,QAAL,CAAc;AAAE1C,QAAAA,OAAO,EAAE6C,GAAG,CAACC,IAAJ,CAAS9C,OAApB;AAA6BC,QAAAA,OAAO,EAAE4C,GAAG,CAACC,IAAJ,CAAS7C,OAA/C;AAAwDK,QAAAA,IAAI,EAAEuC,GAAG,CAACC,IAAJ,CAASxC,IAAvE;AAA6EC,QAAAA,KAAK,EAAEsC,GAAG,CAACC,IAAJ,CAASvC;AAA7F,OAAd,EAD0C,CAG1C;;AACA,UAAID,IAAI,KAAKuC,GAAG,CAACC,IAAJ,CAASxC,IAAtB,EAA4B;AAExB,aAAKmB,SAAL,CAAe,KAAf;AACH,OAPyC,CAS1C;;AACH,KAVD;AAWH;;AAIDA,EAAAA,SAAS,CAACsB,IAAD,EAAO;AACZ,UAAM;AAAEvD,MAAAA,MAAF;AAAUwB,MAAAA;AAAV,QAAyB,KAAKzB,KAApC;AACAT,IAAAA,WAAW,CAACkE,QAAZ,CAAqBxD,MAArB,EAA6BoD,IAA7B,CAAmCC,GAAD,IAAS;AACvC,UAAId,EAAE,GAAGc,GAAG,CAACC,IAAJ,CAASG,KAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYpB,EAAZ;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,EAAE,CAACG,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAAC,CAAD,CAAF,CAAMG,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,cAAIU,GAAG,CAACC,IAAJ,CAASG,KAAT,CAAehB,CAAf,EAAkBE,CAAlB,MAAyB,IAA7B,EAAmC;AAC/BJ,YAAAA,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,IAAW;AACPC,cAAAA,MAAM,EAAE,EADD;AAEPK,cAAAA,KAAK,EAAE,EAFA;AAGPhC,cAAAA,aAAa,EAAE;AAHR,aAAX;AAKH,WAND,MAMO;AACHsB,YAAAA,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,IAAW;AACPC,cAAAA,MAAM,EAAEL,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,EAASC,MADV;AAEPK,cAAAA,KAAK,EAAEV,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,EAASM,KAFT;AAGPhC,cAAAA,aAAa,EAAEsB,EAAE,CAACE,CAAD,CAAF,CAAME,CAAN,EAAS1B;AAHjB,aAAX;AAKH;AACJ;AACJ;;AACD,UAAIsC,IAAJ,EAAU;AACN,aAAKrB,aAAL,CAAmBK,EAAnB;AACH,OAFD,MAEO;AACH,aAAKW,QAAL,CAAc;AAAExC,UAAAA,SAAS,EAAE2C,GAAG,CAACC,IAAjB;AAAuB3C,UAAAA,SAAS,EAAE4B,EAAlC;AAAsC3B,UAAAA,KAAK,EAAE2B,EAAE,CAAC,CAAD,CAAF,CAAMG,MAAnD;AAA2D7B,UAAAA,MAAM,EAAE0B,EAAE,CAACG;AAAtE,SAAd;AACH;AACJ,KAzBD;AA0BH;;AAEDd,EAAAA,WAAW,CAACgC,CAAD,EAAIC,CAAJ,EAAO;AACd,UAAM;AAAElD,MAAAA,SAAF;AAAaK,MAAAA,aAAb;AAA4BX,MAAAA,EAA5B;AAAgCS,MAAAA,IAAhC;AAAsCG,MAAAA;AAAtC,QAAwD,KAAKlB,KAAnE;AACA,UAAM+D,YAAY,GAAGzD,EAAE,KAAKS,IAA5B;AACA,UAAMiD,YAAY,GAAGpD,SAAS,CAACkD,CAAD,CAAT,CAAaD,CAAb,EAAgBhB,MAAhB,KAA2B,EAAhD;AACA,UAAMoB,WAAW,GAAG/D,IAAI,CAACgE,SAAL,CAAejD,aAAf,MAAkC,IAAtD;;AAEA,QAAIgD,WAAJ,EAAiB;AACb,YAAME,iBAAiB,GAAGlD,aAAa,CAAC4C,CAAd,KAAoBA,CAApB,IAAyB5C,aAAa,CAAC6C,CAAd,KAAoBA,CAAvE;AACA,YAAMM,cAAc,GAAGlD,aAAa,CAACmD,IAAd,CAAmBC,IAAI,IAAIA,IAAI,CAACT,CAAL,KAAWA,CAAX,IAAgBS,IAAI,CAACR,CAAL,KAAWA,CAAtD,CAAvB;AACA,YAAMS,aAAa,GAAGjE,EAAE,IAAIM,SAAS,CAACK,aAAa,CAAC6C,CAAf,CAAT,CAA2B7C,aAAa,CAAC4C,CAAzC,EAA4CX,KAAxE,CAHa,CAKb;;AAEA,UAAIiB,iBAAJ,EAAuB;AACnB;AACA,aAAKhB,QAAL,CAAc;AACVjC,UAAAA,aAAa,EAAE,EADL;AAEVD,UAAAA,aAAa,EAAE,EAFL;AAGVE,UAAAA,OAAO,EAAE;AAHC,SAAd;AAKH,OAPD,MAOO,IAAIoD,aAAa,IAAIH,cAAjB,IAAmCL,YAAvC,EAAqD;AACxD;AACA,cAAMS,IAAI,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAEZ,YAAAA,CAAC,EAAE5C,aAAa,CAAC4C,CAAnB;AAAsBC,YAAAA,CAAC,EAAE7C,aAAa,CAAC6C;AAAvC,WAAX;AAAuDY,UAAAA,KAAK,EAAE;AAAEb,YAAAA,CAAC,EAAEA,CAAL;AAAQC,YAAAA,CAAC,EAAEA;AAAX;AAA9D,SAAb;AACA,aAAK7B,IAAL,CAAUuC,IAAV;AACH,OAJM,MAIA,IAAIR,YAAJ,EAAkB;AACrB;AACA,aAAKb,QAAL,CAAc;AACVjC,UAAAA,aAAa,EAAE,EADL;AAEVD,UAAAA,aAAa,EAAE,EAFL;AAGVE,UAAAA,OAAO,EAAE;AAHC,SAAd;AAKH,OAPM,MAOA;AACH;AACA,aAAKgC,QAAL,CAAc;AACVjC,UAAAA,aAAa,EAAEN,SAAS,CAACkD,CAAD,CAAT,CAAaD,CAAb,EAAgB3C,aADrB;AAEVD,UAAAA,aAAa,EAAE;AAAE4C,YAAAA,CAAC,EAAEA,CAAL;AAAQC,YAAAA,CAAC,EAAEA;AAAX,WAFL;AAGV3C,UAAAA,OAAO,EAAEP,SAAS,CAACkD,CAAD,CAAT,CAAaD,CAAb,EAAgBhB,MAHf;AAIVxB,UAAAA,SAAS,eAAE,QAAC,kBAAD;AAAoB,YAAA,OAAO,EAAET,SAAS,CAACkD,CAAD,CAAT,CAAaD,CAAb,EAAgBhB;AAA7C;AAAA;AAAA;AAAA;AAAA;AAJD,SAAd;AAMH;AACJ,KAlCD,MAkCO;AACH,UAAI,CAACmB,YAAL,EAAmB;AACf;AACA,aAAKb,QAAL,CAAc;AACVjC,UAAAA,aAAa,EAAEN,SAAS,CAACkD,CAAD,CAAT,CAAaD,CAAb,EAAgB3C,aADrB;AAEVD,UAAAA,aAAa,EAAE;AAAE4C,YAAAA,CAAC,EAAEA,CAAL;AAAQC,YAAAA,CAAC,EAAEA;AAAX,WAFL;AAGV3C,UAAAA,OAAO,EAAEP,SAAS,CAACkD,CAAD,CAAT,CAAaD,CAAb,EAAgBhB,MAHf;AAIVxB,UAAAA,SAAS,eAAE,QAAC,kBAAD;AAAoB,YAAA,OAAO,EAAET,SAAS,CAACkD,CAAD,CAAT,CAAaD,CAAb,EAAgBhB;AAA7C;AAAA;AAAA;AAAA;AAAA;AAJD,SAAd;AAMH;AACJ;AACJ;;AAEDZ,EAAAA,IAAI,CAACuC,IAAD,EAAO;AACP,UAAM;AAAEvE,MAAAA,MAAF;AAAUc,MAAAA;AAAV,QAAmB,KAAKf,KAA9B;AACAT,IAAAA,WAAW,CAAC0C,IAAZ,CAAiBhC,MAAjB,EAAyBuE,IAAzB,EAA+BnB,IAA/B,CAAqCC,GAAD,IAAS;AACzCK,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB7C,IAAtB;AACA,YAAM4D,QAAQ,GAAI5D,IAAI,KAAK,IAAV,GAAkB,IAAlB,GAAyB,IAA1C;AACA,WAAKoC,QAAL,CAAc;AACVjC,QAAAA,aAAa,EAAE,EADL;AAEVD,QAAAA,aAAa,EAAE,EAFL;AAGVF,QAAAA,IAAI,EAAE4D;AAHI,OAAd;AAMA,WAAKrC,cAAL;AACA,WAAKJ,SAAL;AACH,KAXD;AAYH;;AAKDH,EAAAA,aAAa,CAAC6C,KAAD,EAAQ;AACjB,UAAM;AAAEnD,MAAAA,UAAF;AAAcE,MAAAA,SAAd;AAAyBD,MAAAA;AAAzB,QAAuC,KAAK1B,KAAlD;AACA,UAAM6E,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,qBAAb,EAAb;AACA,UAAMlB,CAAC,GAAGe,KAAK,CAACI,OAAN,GAAgBH,IAAI,CAACI,IAArB,GAA4BvD,SAAtC;AACA,UAAMoC,CAAC,GAAGc,KAAK,CAACM,OAAN,GAAgBL,IAAI,CAACM,GAArB,GAA2BxD,SAArC,CAJiB,CAKjB;;AACA,SAAKE,WAAL,CAAiB,CAACgC,CAAC,GAAGA,CAAC,GAAGpC,UAAT,IAAwBA,UAAzC,EAAsD,CAACqC,CAAC,GAAGA,CAAC,GAAGrC,UAAT,IAAwBA,UAA9E;AACH;;AAEDO,EAAAA,UAAU,GAAG;AACT,UAAM;AAAEnB,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBW,MAAAA,UAAjB;AAA6Bb,MAAAA,SAA7B;AAAwCM,MAAAA,aAAxC;AAAuDS,MAAAA,SAAvD;AAAkED,MAAAA,SAAlE;AAA6ET,MAAAA,aAA7E;AAA4FX,MAAAA,EAA5F;AAAgGc,MAAAA,MAAhG;AAAwGI,MAAAA;AAAxG,QAAqH,KAAKxB,KAAhI;;AAGA,UAAMwE,IAAI,GAAG,CAACY,GAAD,EAAMC,UAAN,KAAqB;AAC9B,UAAIzE,SAAJ,EAAe;AAEXwE,QAAAA,GAAG,CAACE,MAAJ,CAAWzE,KAAX,GAAmBY,UAAU,IAAIZ,KAAK,GAAG,CAAZ,CAA7B;AACAuE,QAAAA,GAAG,CAACE,MAAJ,CAAWxE,MAAX,GAAoBW,UAAU,IAAIX,MAAM,GAAG,CAAb,CAA9B,CAHW,CAKX;;AACA,aAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,KAApB,EAA2B6B,CAAC,EAA5B,EAAgC;AAC5B,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9B,MAApB,EAA4B8B,CAAC,EAA7B,EAAiC;AAC7BwC,YAAAA,GAAG,CAACG,SAAJ,GAAiB,CAAC7C,CAAC,GAAGE,CAAL,IAAU,CAAV,IAAe,CAAhB,GAAqB,SAArB,GAAiC,WAAjD;AACA,gBAAI4C,OAAO,GAAG9D,SAAS,GAAGkB,CAAC,GAAGnB,UAA9B;AACA,gBAAIgE,OAAO,GAAG9D,SAAS,GAAGe,CAAC,GAAGjB,UAA9B;AACA2D,YAAAA,GAAG,CAACM,QAAJ,CAAaF,OAAb,EAAsBC,OAAtB,EAA+BhE,UAA/B,EAA2CA,UAA3C;AACH;AACJ;;AACD,YAAIvB,IAAI,CAACgE,SAAL,CAAejD,aAAf,MAAkC,IAAtC,EAA4C;AACxC;AACAmE,UAAAA,GAAG,CAACO,WAAJ,GAAkB,IAAlB;AACAP,UAAAA,GAAG,CAACG,SAAJ,GAAiBjF,EAAE,KAAKM,SAAS,CAACK,aAAa,CAAC6C,CAAf,CAAT,CAA2B7C,aAAa,CAAC4C,CAAzC,EAA4CX,KAApD,GAA6D,YAA7D,GAA4E,KAA5F;;AACA,eAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1E,aAAa,CAACyB,MAAlC,EAA0CiD,CAAC,EAA3C,EAA+C;AAC3C,gBAAIJ,OAAO,GAAG9D,SAAS,GAAGR,aAAa,CAAC0E,CAAD,CAAb,CAAiB/B,CAAjB,GAAqBpC,UAA/C;AACA,gBAAIgE,OAAO,GAAG9D,SAAS,GAAGT,aAAa,CAAC0E,CAAD,CAAb,CAAiB9B,CAAjB,GAAqBrC,UAA/C;AAEA2D,YAAAA,GAAG,CAACM,QAAJ,CAAaF,OAAb,EAAsBC,OAAtB,EAA+BhE,UAA/B,EAA2CA,UAA3C;AACH,WATuC,CAWxC;;;AACA2D,UAAAA,GAAG,CAACG,SAAJ,GAAiBjF,EAAE,KAAKM,SAAS,CAACK,aAAa,CAAC6C,CAAf,CAAT,CAA2B7C,aAAa,CAAC4C,CAAzC,EAA4CX,KAApD,GAA6D,OAA7D,GAAuE,SAAvF;AACAkC,UAAAA,GAAG,CAACM,QAAJ,CAAahE,SAAS,GAAGT,aAAa,CAAC4C,CAAd,GAAkBpC,UAA3C,EAAuDE,SAAS,GAAGV,aAAa,CAAC6C,CAAd,GAAkBrC,UAArF,EAAiGA,UAAjG,EAA6GA,UAA7G;AACA2D,UAAAA,GAAG,CAACO,WAAJ,GAAkB,CAAlB;AACH,SA7BU,CA+BX;;;AACA,YAAI/E,SAAS,CAAC,CAAD,CAAT,IAAgBY,QAApB,EAA8B;AAC1B4D,UAAAA,GAAG,CAACG,SAAJ,GAAgB,OAAhB;AACAH,UAAAA,GAAG,CAACS,IAAJ,GAAW,YAAX;;AACA,eAAK,IAAInD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,KAApB,EAA2B6B,CAAC,EAA5B,EAAgC;AAC5B,iBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9B,MAApB,EAA4B8B,CAAC,EAA7B,EAAiC;AAC7B,kBAAIhC,SAAS,CAACgC,CAAD,CAAT,CAAaF,CAAb,EAAgBG,MAAhB,KAA2B,EAA/B,EAAmC;AAE/B,oBAAI2C,OAAO,GAAG9D,SAAS,GAAG,CAACgB,CAAC,GAAG,KAAL,IAAcjB,UAAxC;AACA,oBAAIgE,OAAO,GAAG9D,SAAS,GAAG,CAACiB,CAAC,GAAG,IAAL,IAAanB,UAAvC;;AACA,oBAAIL,MAAM,CAACuB,MAAP,KAAkB,CAAtB,EAAyB;AACrB;AAEAyC,kBAAAA,GAAG,CAACU,SAAJ,CAAc1E,MAAM,CAAC0B,GAAP,CAAWlC,SAAS,CAACgC,CAAD,CAAT,CAAaF,CAAb,EAAgBG,MAA3B,CAAd,EAAkD2C,OAAlD,EAA2DC,OAA3D;AACH,iBAR8B,CAS/B;;AAGH;AACJ;AACJ;AACJ,SApDU,CAsDX;;;AACAL,QAAAA,GAAG,CAACW,WAAJ,GAAkB,OAAlB;AACAX,QAAAA,GAAG,CAACY,UAAJ,CAAetE,SAAf,EAA0BC,SAA1B,EAAqCF,UAAU,GAAGZ,KAAlD,EAAyDY,UAAU,GAAGX,MAAtE;AAEH;AACJ,KA5DD;;AA6DA,WAAO0D,IAAP;AAEH;;AAEDyB,EAAAA,SAAS,CAACC,SAAD,EAAY3F,MAAZ,EAAoB;AACzB,QAAIA,MAAM,KAAK,IAAf,EAAqB,CACjB;AAEH;;AACD,WAAO2F,SAAP,CALyB,CAMzB;AACH;;AAEDC,EAAAA,YAAY,GAAG;AACX,UAAM;AAAE7F,MAAAA,EAAF;AAAMS,MAAAA;AAAN,QAAe,KAAKf,KAA1B;;AACA,QAAIM,EAAE,KAAKS,IAAX,EAAiB;AACb,aAAO,YAAP;AACH;;AACD,WAAO,4BAAP;AACH;;AAODqF,EAAAA,MAAM,GAAG;AACL,UAAM;AAAE5F,MAAAA,UAAF;AAAcC,MAAAA,OAAd;AAAuBC,MAAAA,OAAvB;AAAgCE,MAAAA,SAAhC;AAA2CK,MAAAA,aAA3C;AAA0DF,MAAAA,IAA1D;AAAgET,MAAAA,EAAhE;AAAoEU,MAAAA,KAApE;AAA2EQ,MAAAA;AAA3E,QAAwF,KAAKxB,KAAnG;AACA,QAAIqG,KAAK,GAAG,EAAZ;;AACA,QAAIzF,SAAS,CAAC,CAAD,CAAT,IAAgBK,aAAa,CAAC4C,CAAlC,EAAqC;AACjCwC,MAAAA,KAAK,GAAGzF,SAAS,CAACK,aAAa,CAAC6C,CAAf,CAAT,CAA2B7C,aAAa,CAAC4C,CAAzC,CAAR,CADiC,CAEjC;AACH;;AAEDF,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0C,KAAK5D,KAAL,CAAWmB,OAArD,EARK,CASL;;AACA,QAAIK,QAAJ,EAAc;AACV,0BAAQ;AAAA,gCACJ;AAAA,qCAAkB,KAAK2E,YAAL,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADI,eAEJ;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACI;AAAK,YAAA,KAAK,EAAC,WAAX;AAAA,+CAA8B;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,0CAAoC,KAAKnG,KAAL,CAAWmB,OAAX,KAAuB,EAAvB,IAA6B,KAAKnB,KAAL,CAAWqB,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,KAAK,EAAC,MAAX;AAAA,oCAEI,QAAC,MAAD;AAAQ,cAAA,IAAI,EAAE,KAAKW,UAAL,EAAd;AAAiC,cAAA,OAAO,EAAE,KAAKD;AAA/C;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAII;AAAA,wBACKvB;AADL;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAOI;AAAA,sCACcC,OAAO,IAAIA,OAAO,CAAC6F,IADjC,OACwC5F,OAAO,iBAAI;AAAA,wCAAYA,OAAO,CAAC4F,IAApB;AAAA,8BADnD,OACkF,SADlF,EAC6FtF,KAD7F;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFI;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAmBH;;AACD,WAAO,EAAP;AACH;;AAzViC;;AA4VtC,eAAenB,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from '../components/piece.component';\nimport PieceGeneratorComponent from '../generator/piece-generator.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport PieceCardComponent from '../components/piece-card.component';\n\n\n\n\nclass GameComponent extends Component {\n\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n\n            //game\n            player1: {},\n            player2: {},\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            width: 16,\n            height: 16,\n            turn: \"P1\",\n            round: 0,\n\n\n            //selection\n            selectedField: {},\n            possibleMoves: [],\n            pieceId: \"\",\n\n            //pieces\n            pieces: {},\n            pieceCard: {},\n\n            //updater\n            loadTimer: undefined,\n            isInited: false,\n\n\n            //consts\n            squareSize: 45,\n            boardTopx: 30,\n            boardTopy: 30,\n            updateInterval: 2000\n        }\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n        this.loadBoard = this.loadBoard.bind(this);\n        this.loadPieceData = this.loadPieceData.bind(this);\n        this.updatePieceCard = this.updatePieceCard.bind(this);\n\n    }\n\n    componentDidMount() {\n        const { isInited } = this.state;\n        this.updateGameData();\n\n        if (!isInited) {\n            this.loadBoard(true);\n        }\n        const loadTimer = setInterval(() => {\n            this.updateGameData();\n\n        }, this.state.updateInterval);\n    }\n\n    loadPieceData(bv) {\n        const { squareSize } = this.state;\n\n        // console.log(\"is inside\", inited);\n        var pieces = new Map();\n\n        // fill pieces canvas buffer\n        for (let i = 0; i < bv.length; i++) {\n            for (let j = 0; j < bv[0].length; j++) {\n                // TODO: P1 und P2 unterscheidung?\n                // console.log(bv[i][j].symbol);\n\n                if (bv[i][j].symbol !== \"\" && pieces.get(bv[i][j].symbol) === undefined) {\n\n                    var pg = new PieceGenerator(squareSize * 0.8, squareSize * 0.95, bv[i][j].symbol);//TODO: owner!!!\n                    pieces.set(bv[i][j].symbol, pg.drawPieceCanvas(bv[i][j].owner));\n                    // pieces[bv[i][j].symbol] = PieceGeneratorComponent.drawPieceCanvas(squareSize * 0.8, squareSize * 0.95, bv[i][j].symbol, bv[i][j].owner);\n\n                }\n            }\n        }\n        //        console.log(str);\n        //        console.log(pieces);\n        //console.log(\"size\", pieces);\n        this.setState({ pieces: pieces, isInited: true, boardView: bv, width: bv[0].length, height: bv.length });\n    }\n\n\n\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round });\n\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard(false);\n            }\n\n            //check game end ?\n        });\n    }\n\n\n\n    loadBoard(init) {\n        const { gameId, squareSize } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = res.data.board;\n            console.log(bv);\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (res.data.board[i][j] === null) {\n                        bv[i][j] = {\n                            symbol: \"\",\n                            owner: \"\",\n                            possibleMoves: []\n                        };\n                    } else {\n                        bv[i][j] = {\n                            symbol: bv[i][j].symbol,\n                            owner: bv[i][j].owner,\n                            possibleMoves: bv[i][j].possibleMoves\n                        };\n                    }\n                }\n            }\n            if (init) {\n                this.loadPieceData(bv);\n            } else {\n                this.setState({ boardData: res.data, boardView: bv, width: bv[0].length, height: bv.length });\n            }\n        });\n    }\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, possibleMoves } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me == boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {},\n                    pieceId: \"\"\n                });\n            } else {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y },\n                    pieceId: boardView[y][x].symbol,\n                    pieceCard: <PieceCardComponent pieceId={boardView[y][x].symbol}></PieceCardComponent>\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y },\n                    pieceId: boardView[y][x].symbol,\n                    pieceCard: <PieceCardComponent pieceId={boardView[y][x].symbol}></PieceCardComponent>\n                });\n            }\n        }\n    }\n\n    play(draw) {\n        const { gameId, turn } = this.state;\n        mainService.play(gameId, draw).then((res) => {\n            console.log(\"played\", turn);\n            const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n            this.setState({\n                possibleMoves: [],\n                selectedField: {},\n                turn: nextTurn\n            });\n\n            this.updateGameData();\n            this.loadBoard();\n        });\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const { squareSize, boardTopy, boardTopx } = this.state;\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - boardTopx;\n        const y = event.clientY - rect.top - boardTopy;\n        //console.log(\"x: \" + x + \" y: \" + y);\n        this.selectField((x - x % squareSize) / (squareSize), (y - y % squareSize) / (squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, squareSize, boardView, possibleMoves, boardTopy, boardTopx, selectedField, me, pieces, isInited } = this.state;\n\n\n        const draw = (ctx, frameCount) => {\n            if (boardView) {\n\n                ctx.canvas.width = squareSize * (width + 1)\n                ctx.canvas.height = squareSize * (height + 1)\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 == 0) ? \"#D2B48C\" : \"PeachPuff\";\n                        let xOffset = boardTopx + j * squareSize;\n                        let yOffset = boardTopy + i * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.45;\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < possibleMoves.length; k++) {\n                        let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0] && isInited) {\n                    ctx.fillStyle = \"black\";\n                    ctx.font = \"20px Arial\";\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + (i + 0.115) * squareSize;\n                                let yOffset = boardTopy + (j + 0.05) * squareSize;\n                                if (pieces.length !== 0) {\n                                    //  console.log(pieces);\n\n                                    ctx.drawImage(pieces.get(boardView[j][i].symbol), xOffset, yOffset);\n                                }\n                                //}\n\n\n                            }\n                        }\n                    }\n                }\n\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n            }\n        }\n        return draw;\n\n    }\n\n    drawPiece(pieceCode, player) {\n        if (player === \"P1\") {\n            //return \"♖\";\n\n        }\n        return pieceCode;\n        //        return \"♜\";\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n\n\n\n\n\n    render() {\n        const { inviteLink, player1, player2, boardView, selectedField, turn, me, round, isInited } = this.state;\n        var piece = \"\";\n        if (boardView[0] && selectedField.x) {\n            piece = boardView[selectedField.y][selectedField.x];\n            //console.log(piece);\n        }\n\n        console.log(\"pieceId (game component) :\", this.state.pieceId);\n        // TODO: aufteilen in GameData und PieceData ?\n        if (isInited) {\n            return (<div>\n                <div>            {this.drawGameText()}</div>\n                <div className=\"row\">\n                    <div class=\"mb-3 mt-5\">       <div className=\"card\">             {this.state.pieceId !== \"\" && this.state.pieceCard}</div></div>\n                    <div class=\"mb-5\">\n\n                        <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n                        {/* <div>{piece.symbol} {\" \"}{piece.owner}</div>*/}\n                        <div>\n                            {inviteLink}\n                        </div>\n                        <div>\n                            Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>} {\" round:\"}{round}\n                        </div>\n                    </div>\n\n                </div >\n            </div>\n            )\n        }\n        return \"\";\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}