{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //game\n      player1: {},\n      player2: {},\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      width: 16,\n      height: 16,\n      turn: \"Player1\",\n      // TODO: sth better than String switching?\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      //consts\n      squareSize: 25,\n      boardTopx: 25,\n      boardTopy: 25\n    };\n    this.loadGameData();\n    this.loadBoard();\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n  }\n\n  componentDidMount() {}\n\n  loadGameData() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2\n      });\n    });\n  }\n\n  loadBoard() {\n    const {\n      gameId\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = res.data.board;\n      console.log(bv);\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (res.data.board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      }\n\n      this.setState({\n        boardData: res.data,\n        boardView: bv,\n        width: bv[0].length,\n        height: bv.length\n      });\n    });\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField,\n      me,\n      turn,\n      possibleMoves\n    } = this.state;\n    const isPlayerTurn = me === turn;\n    const isEmptyField = boardView[y][x].symbol === \"\";\n    const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n    if (sthSelected) {\n      const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n      const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n      const isOwnSelected = me == boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n      if (isAlreadySelected) {\n        // unselect\n        console.log(\"unselect\");\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else if (isOwnSelected && isPossibleMove) {\n        // move\n        console.log(\"move\");\n      } else if (isEmptyField) {\n        // unselect\n        console.log(\"unselect2\");\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else {\n        // select new position\n        console.log(\"newpos\");\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    } else {\n      if (!isEmptyField) {\n        // select new position\n        console.log(\"newPos2\");\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    } // if(selectedField.x===x && selectedField.y===y){\n    //     // unselect then --> (later maybe not, reflexive abilities)\n    //     this.setState({possibleMoves:[],\n    //         selectedField:{}});\n    // } else {\n    //     if(boardView[y][x].symbol===\"\"){\n    //         // dont select/ unselect\n    //         this.setState({possibleMoves:[],\n    //             selectedField:{}});                \n    //     } else {\n    //         //select field and show possible move of piece\n    //         this.setState({possibleMoves:boardView[y][x].possibleMoves,\n    //             selectedField:{x:x,y:y}});\n    //         }\n    // }\n\n  }\n\n  play(draw) {\n    const {\n      gameId\n    } = this.state;\n    mainService.play(gameId, draw).then(res => {\n      console.log(\"played\");\n    });\n  }\n\n  clickOnCanvas(event) {\n    const {\n      squareSize,\n      boardTopy,\n      boardTopx\n    } = this.state;\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - boardTopx;\n    const y = event.clientY - rect.top - boardTopy; //console.log(\"x: \" + x + \" y: \" + y);\n\n    this.selectField((x - x % squareSize) / squareSize, (y - y % squareSize) / squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      squareSize,\n      boardView,\n      possibleMoves,\n      boardTopy,\n      boardTopx,\n      selectedField,\n      me\n    } = this.state;\n    var ctx = null;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        ctx.canvas.width = squareSize * (width + 1);\n        ctx.canvas.height = squareSize * (height + 1); //draw board\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 == 0 ? \"lightgray\" : \"gray\";\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize); //                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n          }\n        }\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.45;\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < possibleMoves.length; k++) {\n            let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0]) {\n          ctx.fillStyle = \"black\";\n          ctx.font = \"20px Arial\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let symbol = boardView[j][i].owner === \"Player1\" ? \"♖\" : \"♜\";\n                let xOffset = boardTopx + (i + 0.12) * squareSize;\n                let yOffset = boardTopy + (j + 0.8) * squareSize;\n                ctx.fillText(symbol, xOffset, yOffset);\n              }\n            }\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n      }\n    };\n\n    return draw;\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      boardView,\n      selectedField\n    } = this.state;\n    var piece = \"\";\n\n    if (boardView[0] && selectedField.x) {\n      piece = boardView[selectedField.y][selectedField.x]; //console.log(piece);\n    } // TODO: aufteilen in GameData und PieceData ?\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inviteLink, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"here is the Game: Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Player2: \", player2.name]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawMethod(),\n        onClick: this.clickOnCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","player1","player2","boardData","boardView","width","height","turn","selectedField","possibleMoves","squareSize","boardTopx","boardTopy","loadGameData","loadBoard","selectField","bind","clickOnCanvas","drawMethod","componentDidMount","getGameData","then","res","setState","data","getBoard","bv","board","console","log","i","length","j","symbol","owner","x","y","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","play","draw","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","frameCount","canvas","fillStyle","xOffset","yOffset","fillRect","globalAlpha","k","font","fillText","strokeStyle","strokeRect","render","piece","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from './piece.component';\n\nclass GameComponent extends Component {\n    \n\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me:JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            \n            //game\n            player1: {},\n            player2: {},\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            width:16,\n            height:16,\n            turn:\"Player1\",// TODO: sth better than String switching?\n\n            //selection\n            selectedField:{},\n            possibleMoves:[],\n\n            //consts\n            squareSize: 25,\n            boardTopx :25,\n            boardTopy : 25\n        }\n        this.loadGameData();\n        this.loadBoard();\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n    }\n\ncomponentDidMount(){\n\n}\n\n    loadGameData() {\n        const { gameId } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            this.setState({ player1: res.data.player1, player2: res.data.player2 });\n        });\n    }\n\n    \n\n    loadBoard(){\n        const { gameId } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv=res.data.board;\n            console.log(bv);\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if(res.data.board[i][j]===null){\n                        bv[i][j]={\n                            symbol: \"\",\n                            owner: \"\",\n                            possibleMoves: []};\n                    } else {\n                        bv[i][j]={\n                        symbol: bv[i][j].symbol,\n                        owner: bv[i][j].owner,\n                        possibleMoves: bv[i][j].possibleMoves};\n                    }\n                }\n            }\n            this.setState({ boardData:res.data,boardView:bv,width:bv[0].length,height:bv.length});\n\n        });\n    }\n\n    selectField(x,y){\n        const {boardView,selectedField,me,turn,possibleMoves} =this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol===\"\";\n        const sthSelected = JSON.stringify(selectedField)!==\"{}\";\n\n        if(sthSelected){\n            const isAlreadySelected = selectedField.x===x && selectedField.y===y;\n            const isPossibleMove = possibleMoves.some(move => move.x === x && move.y===y);\n            const isOwnSelected = me==boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if(isAlreadySelected){\n                // unselect\n                console.log(\"unselect\");\n                this.setState({possibleMoves:[],\n                selectedField:{}});\n            } else if(isOwnSelected && isPossibleMove){\n                // move\n                console.log(\"move\");\n\n            } else if(isEmptyField){\n                // unselect\n                console.log(\"unselect2\");\n                this.setState({possibleMoves:[],\n                selectedField:{}});\n            } else {\n                // select new position\n                console.log(\"newpos\");\n                this.setState({possibleMoves:boardView[y][x].possibleMoves,\n                selectedField:{x:x,y:y}});\n            }\n        } else {\n            if(!isEmptyField){\n                // select new position\n                console.log(\"newPos2\");\n                this.setState({possibleMoves:boardView[y][x].possibleMoves,\n                    selectedField:{x:x,y:y}});\n            }\n        }\n        \n\n\n\n\n        // if(selectedField.x===x && selectedField.y===y){\n        //     // unselect then --> (later maybe not, reflexive abilities)\n        //     this.setState({possibleMoves:[],\n        //         selectedField:{}});\n        // } else {\n        //     if(boardView[y][x].symbol===\"\"){\n        //         // dont select/ unselect\n        //         this.setState({possibleMoves:[],\n        //             selectedField:{}});                \n        //     } else {\n        //         //select field and show possible move of piece\n        //         this.setState({possibleMoves:boardView[y][x].possibleMoves,\n        //             selectedField:{x:x,y:y}});\n        //         }\n        // }\n\n    }\n\n    play(draw){\n        const {gameId} = this.state;\n        mainService.play(gameId,draw).then((res) => {\n            console.log(\"played\");\n        });\n    }\n\n\n\n\n    clickOnCanvas(event){\n        const {squareSize,boardTopy,boardTopx} = this.state;\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left-boardTopx;\n        const y = event.clientY - rect.top- boardTopy;\n        //console.log(\"x: \" + x + \" y: \" + y);\n        this.selectField((x - x % squareSize)/(squareSize),(y - y % squareSize)/(squareSize));\n    }\n\n    drawMethod(){\n        const {width,height,squareSize,boardView,possibleMoves,boardTopy,boardTopx,selectedField,me} = this.state;\n        var ctx = null;\n\n        const draw = (ctx, frameCount) => {\n\n        if(boardView){\n    \n            ctx.canvas.width=squareSize*(width+1)\n            ctx.canvas.height=squareSize*(height+1)\n\n            //draw board\n            for(let i=0; i<width; i++) {\n              for(let j=0; j<height; j++) {\n                ctx.fillStyle = ((i+j)%2==0) ? \"lightgray\":\"gray\";\n                let xOffset = boardTopx + j*squareSize;\n                let yOffset = boardTopy + i*squareSize;\n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n//                ctx.fillRect(Math.sin(i*0.2)*xOffset, Math.sin(j*frameCount*0.001)*yOffset, squareSize, squareSize);\n              }\n            }\n            if(JSON.stringify(selectedField)!==\"{}\"){\n            // draw moves\n            ctx.globalAlpha = 0.45;\n            ctx.fillStyle=(me===boardView[selectedField.y][selectedField.x].owner)?\"lightgreen\":\"red\";\n            for(let k=0; k<possibleMoves.length; k++) {\n                let xOffset = boardTopx + possibleMoves[k].x*squareSize;\n                let yOffset = boardTopy + possibleMoves[k].y*squareSize;\n                \n                ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n            }\n\n            //draw selected\n            ctx.fillStyle=(me===boardView[selectedField.y][selectedField.x].owner)?\"green\":\"darkred\";\n            ctx.fillRect(boardTopx + selectedField.x*squareSize, boardTopy + selectedField.y*squareSize, squareSize, squareSize);\n            ctx.globalAlpha = 1;\n        }\n\n            // draw pieces\n            if(boardView[0]){\n            ctx.fillStyle = \"black\";\n            ctx.font = \"20px Arial\";\n            for(let i=0; i<width; i++) {\n                for(let j=0; j<height; j++) {\n                    if(boardView[j][i].symbol!==\"\"){\n                        let symbol = (boardView[j][i].owner===\"Player1\")?\"♖\":\"♜\";\n                        let xOffset = boardTopx + (i+0.12)*squareSize;\n                        let yOffset = boardTopy + (j+0.8)*squareSize;\n                        ctx.fillText(symbol,xOffset,yOffset);\n                    }\n                }\n            }\n        }\n\n            // draw the border around the chessboard\n            ctx.strokeStyle = \"black\";\n            ctx.strokeRect(boardTopx, boardTopy, squareSize*width, squareSize*height)\n    \n    }\n    }\n    return draw;\n    }\n\n\n\n\n    \n    render() {\n        const { inviteLink, player1, player2, boardView,selectedField } = this.state;\n        var piece= \"\";\n        if(boardView[0] && selectedField.x){\n            piece = boardView[selectedField.y][selectedField.x];\n            //console.log(piece);\n        }\n\n        // TODO: aufteilen in GameData und PieceData ?\n\n        return (\n            <div>\n                {inviteLink}\n                <div>\n                here is the Game: Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>}\n                </div>\n            <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />\n           {/* <div>{piece.symbol} {\" \"}{piece.owner}</div>*/}\n            </div>\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}