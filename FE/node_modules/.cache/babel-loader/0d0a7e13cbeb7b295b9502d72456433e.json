{"ast":null,"code":"import React, { Component } from 'react';\nimport RandomGenerator from './random-generator';\n\nclass PieceGeneratorComponent extends Component {\n  // static nextRand() {\n  //     var hi = this.seed / (2147483647 / 48271);\n  //     var lo = this.seed % (2147483647 / 48271);\n  //     var test = 48271 * lo - (2147483647 % 48271) * hi;\n  //     if (test > 0) {\n  //         this.seed = test;\n  //     } else {\n  //         this.seed = test + 2147483647;\n  //     }\n  //     return this.seed * (1.0 / 2147483647);\n  // }\n  // static drawPolygon() {\n  //     var pointNumber = this.randNumOfRange(3, 5);\n  //     console.log(\"pointNumber=\" + pointNumber)\n  //     //console.log(Math.floor(this.nextRand() * 16777215).toString(16));\n  //     var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n  //     var pts = \"\";\n  //     var ptsMirror = \"\";\n  //     for (var i = 0; i < pointNumber; i++) {\n  //         var x = this.randNumOfRange(0, this.width);\n  //         var y = this.randNumOfRange(0, this.height);\n  //         pts += x + \",\" + y + \" \";\n  //         var x2 = this.width - x;\n  //         ptsMirror += x2 + \",\" + y + \" \";\n  //         //  console.log(i);\n  //     }\n  //     return <><polygon points={pts} fill={color} />\n  //         <polygon points={ptsMirror} fill={color} /></>;\n  // }\n  // static drawPiece(width, height, seed, owner) {\n  //     this.seed = seed;\n  //     this.width = width;\n  //     this.height = height;\n  //     return (\n  //         <>\n  //             <svg height={this.height} width={this.width}>\n  //                 {this.drawPolygon()}\n  //                 {this.drawPolygon()}\n  //                 {this.drawPolygon()}\n  //                 {this.drawPolygon()}\n  //                 {this.drawPolygon()}\n  //             </svg>\n  //         </>\n  //     )\n  // }\n  static drawPolygonCanvas(c2) {\n    var pointNumber = this.randNumOfRange(3, 10); //console.log(\"pointNumber=\" + pointNumber)\n\n    var color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n    var points = [];\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.randNumOfRange(0, this.width);\n      var y = this.randNumOfRange(0, this.height);\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n\n    c2.fillStyle = color;\n    c2.beginPath();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        c2.moveTo(points[i].x, points[i].y);\n      } else {\n        c2.lineTo(points[i].x, points[i].y);\n      }\n    }\n\n    c2.closePath();\n    c2.fill();\n    c2.fillStyle = color;\n    c2.beginPath();\n\n    for (var j = 0; j < points.length; j++) {\n      var x2 = this.width - points[j].x;\n\n      if (j === 0) {\n        c2.moveTo(x2, points[j].y);\n      } else {\n        c2.lineTo(x2, points[j].y);\n      }\n    }\n\n    c2.closePath();\n    c2.fill();\n  }\n\n  static drawPieceCanvas(width, height, seedstr, owner) {\n    this.seedstr = seedstr;\n    this.gen = new RandomGenerator(seedstr);\n    this.width = width;\n    this.height = height;\n    var canvas2 = document.createElement('canvas');\n    canvas2.width = width;\n    canvas2.height = height;\n    var context2 = canvas2.getContext('2d');\n    this.drawPolygonCanvas(context2);\n    this.drawPolygonCanvas(context2);\n    this.drawPolygonCanvas(context2);\n    this.drawPolygonCanvas(context2);\n    return canvas2;\n  }\n\n}\n\nPieceGeneratorComponent.width = 600;\nPieceGeneratorComponent.height = 600;\nexport default PieceGeneratorComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.component.jsx"],"names":["React","Component","RandomGenerator","PieceGeneratorComponent","drawPolygonCanvas","c2","pointNumber","randNumOfRange","color","Math","floor","random","toString","points","i","x","width","y","height","push","fillStyle","beginPath","length","moveTo","lineTo","closePath","fill","j","x2","drawPieceCanvas","seedstr","owner","gen","canvas2","document","createElement","context2","getContext"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport RandomGenerator from './random-generator';\n\nclass PieceGeneratorComponent extends Component {\n\n    static gen;\n    static width = 600;\n    static height = 600;\n\n    // static nextRand() {\n    //     var hi = this.seed / (2147483647 / 48271);\n    //     var lo = this.seed % (2147483647 / 48271);\n    //     var test = 48271 * lo - (2147483647 % 48271) * hi;\n    //     if (test > 0) {\n    //         this.seed = test;\n    //     } else {\n    //         this.seed = test + 2147483647;\n    //     }\n    //     return this.seed * (1.0 / 2147483647);\n    // }\n\n\n\n    // static drawPolygon() {\n\n    //     var pointNumber = this.randNumOfRange(3, 5);\n    //     console.log(\"pointNumber=\" + pointNumber)\n    //     //console.log(Math.floor(this.nextRand() * 16777215).toString(16));\n    //     var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n\n    //     var pts = \"\";\n    //     var ptsMirror = \"\";\n    //     for (var i = 0; i < pointNumber; i++) {\n    //         var x = this.randNumOfRange(0, this.width);\n    //         var y = this.randNumOfRange(0, this.height);\n    //         pts += x + \",\" + y + \" \";\n    //         var x2 = this.width - x;\n    //         ptsMirror += x2 + \",\" + y + \" \";\n    //         //  console.log(i);\n    //     }\n\n    //     return <><polygon points={pts} fill={color} />\n    //         <polygon points={ptsMirror} fill={color} /></>;\n    // }\n\n\n    // static drawPiece(width, height, seed, owner) {\n    //     this.seed = seed;\n    //     this.width = width;\n    //     this.height = height;\n\n    //     return (\n    //         <>\n    //             <svg height={this.height} width={this.width}>\n    //                 {this.drawPolygon()}\n    //                 {this.drawPolygon()}\n    //                 {this.drawPolygon()}\n    //                 {this.drawPolygon()}\n    //                 {this.drawPolygon()}\n    //             </svg>\n    //         </>\n    //     )\n    // }\n\n\n\n    static drawPolygonCanvas(c2) {\n\n        var pointNumber = this.randNumOfRange(3, 10);\n        //console.log(\"pointNumber=\" + pointNumber)\n        var color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n        var points = [];\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.randNumOfRange(0, this.width);\n            var y = this.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n\n\n        c2.fillStyle = color;\n        c2.beginPath();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                c2.moveTo(points[i].x, points[i].y);\n            } else {\n                c2.lineTo(points[i].x, points[i].y);\n            }\n        }\n        c2.closePath();\n        c2.fill();\n\n        c2.fillStyle = color;\n        c2.beginPath();\n\n        for (var j = 0; j < points.length; j++) {\n            var x2 = this.width - points[j].x;\n            if (j === 0) {\n                c2.moveTo(x2, points[j].y);\n            } else {\n                c2.lineTo(x2, points[j].y);\n            }\n        }\n        c2.closePath();\n        c2.fill();\n    }\n\n\n\n\n    static drawPieceCanvas(width, height, seedstr, owner) {\n        this.seedstr = seedstr;\n        this.gen = new RandomGenerator(seedstr);\n\n        this.width = width;\n        this.height = height;\n\n        var canvas2 = document.createElement('canvas');\n        canvas2.width = width;\n        canvas2.height = height;\n        var context2 = canvas2.getContext('2d');\n        this.drawPolygonCanvas(context2);\n        this.drawPolygonCanvas(context2);\n        this.drawPolygonCanvas(context2);\n        this.drawPolygonCanvas(context2);\n\n        return (\n            canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGeneratorComponent"]},"metadata":{},"sourceType":"module"}