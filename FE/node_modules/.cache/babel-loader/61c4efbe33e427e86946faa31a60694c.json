{"ast":null,"code":"import React, { Component } from 'react';\nimport RandomGenerator from './random-generator';\n\nclass PieceGenerator extends Component {\n  constructor(width, height, seedstr) {\n    super();\n    this.gen = new RandomGenerator(seedstr);\n    this.width = width;\n    this.height = height;\n    var canvas2 = document.createElement('canvas');\n    var c2 = canvas2.getContext('2d');\n    canvas2.width = width;\n    canvas2.height = height;\n  }\n\n  drawPolygonCanvas() {\n    // TODO:     var shape1 = new Path2D();\n    // circle.arc(100, 35, 25, 0, 2 * Math.PI);\n    // ctx.stroke(rectangle);\n    // ctx.fill(circle);\n    var pointNumber = this.gen.randNumOfRange(3, 10); //console.log(\"pointNumber=\" + pointNumber)\n\n    var r = Math.floor(this.gen.random() * 255).toString(16);\n    var g = Math.floor(this.gen.random() * 255).toString(16);\n    var b = Math.floor(this.gen.random() * 255).toString(16);\n    var color = \"#\" + r + g + b; // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n    // 16 777 216\n\n    console.log(color);\n    var points = [];\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.gen.randNumOfRange(0, this.width);\n      var y = this.gen.randNumOfRange(0, this.height);\n      points.push({\n        x: x,\n        y: y\n      });\n    }\n\n    this.c2.fillStyle = color;\n    this.c2.beginPath();\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        this.c2.moveTo(points[i].x, points[i].y);\n      } else {\n        this.c2.lineTo(points[i].x, points[i].y);\n      }\n    }\n\n    this.c2.closePath();\n    this.c2.fill();\n    this.c2.fillStyle = color;\n    this.c2.beginPath();\n\n    for (var j = 0; j < points.length; j++) {\n      var x2 = this.width - points[j].x;\n\n      if (j === 0) {\n        this.c2.moveTo(x2, points[j].y);\n      } else {\n        this.c2.lineTo(x2, points[j].y);\n      }\n    }\n\n    c2.closePath();\n    c2.fill();\n  }\n\n  drawShape() {\n    var shape = new Path2D();\n    return shape;\n  }\n\n  drawPieceCanvas(owner) {\n    this.drawPolygonCanvas();\n    this.drawPolygonCanvas();\n    this.drawPolygonCanvas();\n    this.drawPolygonCanvas();\n    return canvas2;\n  }\n\n}\n\nexport default PieceGenerator;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.jsx"],"names":["React","Component","RandomGenerator","PieceGenerator","constructor","width","height","seedstr","gen","canvas2","document","createElement","c2","getContext","drawPolygonCanvas","pointNumber","randNumOfRange","r","Math","floor","random","toString","g","b","color","console","log","points","i","x","y","push","fillStyle","beginPath","length","moveTo","lineTo","closePath","fill","j","x2","drawShape","shape","Path2D","drawPieceCanvas","owner"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport RandomGenerator from './random-generator';\n\nclass PieceGenerator extends Component {\n\n    constructor(width, height, seedstr) {\n        super();\n        this.gen = new RandomGenerator(seedstr);\n        this.width = width;\n        this.height = height;\n        var canvas2 = document.createElement('canvas');\n        var c2 = canvas2.getContext('2d');\n        canvas2.width = width;\n        canvas2.height = height;\n    }\n\n\n\n    drawPolygonCanvas() {\n\n        // TODO:     var shape1 = new Path2D();\n        // circle.arc(100, 35, 25, 0, 2 * Math.PI);\n\n        // ctx.stroke(rectangle);\n        // ctx.fill(circle);\n\n\n        var pointNumber = this.gen.randNumOfRange(3, 10);\n        //console.log(\"pointNumber=\" + pointNumber)\n        var r = Math.floor(this.gen.random() * 255).toString(16);\n        var g = Math.floor(this.gen.random() * 255).toString(16);\n        var b = Math.floor(this.gen.random() * 255).toString(16);\n        var color = \"#\" + r + g + b;\n\n\n        // var color = \"#\" + Math.floor(this.random() * 255).toString(2);\n        // 16 777 216\n        console.log(color);\n\n        var points = [];\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.gen.randNumOfRange(0, this.width);\n            var y = this.gen.randNumOfRange(0, this.height);\n            points.push({ x: x, y: y });\n        }\n\n\n        this.c2.fillStyle = color;\n        this.c2.beginPath();\n        for (var i = 0; i < points.length; i++) {\n            if (i === 0) {\n                this.c2.moveTo(points[i].x, points[i].y);\n            } else {\n                this.c2.lineTo(points[i].x, points[i].y);\n            }\n        }\n        this.c2.closePath();\n        this.c2.fill();\n\n        this.c2.fillStyle = color;\n        this.c2.beginPath();\n\n        for (var j = 0; j < points.length; j++) {\n            var x2 = this.width - points[j].x;\n            if (j === 0) {\n                this.c2.moveTo(x2, points[j].y);\n            } else {\n                this.c2.lineTo(x2, points[j].y);\n            }\n        }\n        c2.closePath();\n        c2.fill();\n    }\n\n\n    drawShape() {\n        var shape = new Path2D();\n\n\n        return shape;\n    }\n\n\n\n\n    drawPieceCanvas(owner) {\n\n\n        this.drawPolygonCanvas();\n        this.drawPolygonCanvas();\n        this.drawPolygonCanvas();\n        this.drawPolygonCanvas();\n\n        return (\n            canvas2\n        );\n    }\n\n\n\n\n}\n\nexport default PieceGenerator"]},"metadata":{},"sourceType":"module"}