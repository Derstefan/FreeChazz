{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-data.component.jsx\";\nimport React, { Component } from 'react';\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\nclass PieceDataComponent extends Component {\n  constructor(props) {\n    super(props);\n    var pg = new PieceGenerator(300, 400, \"\" + this.props.match.params.id);\n    console.log(\"props: \" + this.props);\n    this.state = {\n      pieceId: this.props.match.params.id,\n      width: 300,\n      height: 400,\n      pieceImage: pg.drawPieceCanvas(\"P1\"),\n      piece: {}\n    };\n  }\n\n  componentDidMount() {\n    const {\n      pieceId\n    } = this.props;\n    mainService.pieceData(pieceId).then(res => this.setState({\n      piece: res.data\n    }));\n  }\n\n  drawMethod() {\n    const {\n      pieceImage,\n      width,\n      height\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      ctx.canvas.width = width;\n      ctx.canvas.height = height;\n      ctx.drawImage(pieceImage, 0, 0);\n    };\n\n    return draw;\n  }\n\n  render() {\n    const {\n      symbol,\n      selected,\n      canMove\n    } = this.props;\n    let style = {};\n    let str = symbol;\n\n    if (selected || canMove) {\n      style = {\n        color: 'green'\n      };\n\n      if (str === \"\") {//   str='X';\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Canvas, {\n      draw: this.drawMethod()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default PieceDataComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/components/piece-data.component.jsx"],"names":["React","Component","Canvas","PieceGenerator","mainService","PieceDataComponent","constructor","props","pg","match","params","id","console","log","state","pieceId","width","height","pieceImage","drawPieceCanvas","piece","componentDidMount","pieceData","then","res","setState","data","drawMethod","draw","ctx","frameCount","canvas","drawImage","render","symbol","selected","canMove","style","str","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;AAEA,MAAMC,kBAAN,SAAiCJ,SAAjC,CAA2C;AAEvCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEf,UAAMA,KAAN;AACA,QAAIC,EAAE,GAAG,IAAIL,cAAJ,CAAmB,GAAnB,EAAwB,GAAxB,EAA6B,KAAK,KAAKI,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA1D,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAY,KAAKN,KAA7B;AAEA,SAAKO,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKR,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EADxB;AAETK,MAAAA,KAAK,EAAE,GAFE;AAGTC,MAAAA,MAAM,EAAE,GAHC;AAITC,MAAAA,UAAU,EAAEV,EAAE,CAACW,eAAH,CAAmB,IAAnB,CAJH;AAKTC,MAAAA,KAAK,EAAE;AALE,KAAb;AAUH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEN,MAAAA;AAAF,QAAc,KAAKR,KAAzB;AACAH,IAAAA,WAAW,CAACkB,SAAZ,CAAsBP,OAAtB,EAA+BQ,IAA/B,CAAoCC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEL,MAAAA,KAAK,EAAEI,GAAG,CAACE;AAAb,KAAd,CAA3C;AAEH;;AAKDC,EAAAA,UAAU,GAAG;AACT,UAAM;AAAET,MAAAA,UAAF;AAAcF,MAAAA,KAAd;AAAqBC,MAAAA;AAArB,QAAgC,KAAKH,KAA3C;;AAEA,UAAMc,IAAI,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAC9BD,MAAAA,GAAG,CAACE,MAAJ,CAAWf,KAAX,GAAmBA,KAAnB;AACAa,MAAAA,GAAG,CAACE,MAAJ,CAAWd,MAAX,GAAoBA,MAApB;AACAY,MAAAA,GAAG,CAACG,SAAJ,CAAcd,UAAd,EAA0B,CAA1B,EAA6B,CAA7B;AACH,KAJD;;AAKA,WAAOU,IAAP;AACH;;AAGDK,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,QAAgC,KAAK7B,KAA3C;AACA,QAAI8B,KAAK,GAAG,EAAZ;AACA,QAAIC,GAAG,GAAGJ,MAAV;;AACA,QAAKC,QAAQ,IAAIC,OAAjB,EAA2B;AACvBC,MAAAA,KAAK,GAAG;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAR;;AACA,UAAID,GAAG,KAAK,EAAZ,EAAgB,CACZ;AACH;AACJ;;AACD,wBAAQ,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAE,KAAKX,UAAL;AAAd;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;;AApDsC;;AAuD3C,eAAetB,kBAAf","sourcesContent":["import React, { Component } from 'react'\nimport Canvas from '../game/canvas.component';\nimport PieceGenerator from '../generator/piece-generator';\nimport mainService from '../services/main.service';\n\nclass PieceDataComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        var pg = new PieceGenerator(300, 400, \"\" + this.props.match.params.id);\n        console.log(\"props: \" + this.props);\n\n        this.state = {\n            pieceId: this.props.match.params.id,\n            width: 300,\n            height: 400,\n            pieceImage: pg.drawPieceCanvas(\"P1\"),\n            piece: {}\n        }\n\n\n\n    }\n\n    componentDidMount() {\n        const { pieceId } = this.props;\n        mainService.pieceData(pieceId).then(res => this.setState({ piece: res.data }));\n\n    }\n\n\n\n\n    drawMethod() {\n        const { pieceImage, width, height } = this.state;\n\n        const draw = (ctx, frameCount) => {\n            ctx.canvas.width = width\n            ctx.canvas.height = height\n            ctx.drawImage(pieceImage, 0, 0);\n        }\n        return draw;\n    }\n\n\n    render() {\n        const { symbol, selected, canMove } = this.props;\n        let style = {};\n        let str = symbol\n        if ((selected || canMove)) {\n            style = { color: 'green' };\n            if (str === \"\") {\n                //   str='X';\n            }\n        }\n        return (<Canvas draw={this.drawMethod()} />);\n    }\n}\n\nexport default PieceDataComponent"]},"metadata":{},"sourceType":"module"}