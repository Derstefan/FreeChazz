{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.component.jsx\";\nimport React, { Component } from 'react';\n\nclass PieceGeneratorComponent extends Component {\n  // static loadConf() {\n  //     //Configuration\n  //     return {\n  //         seed: 237849\n  //     };\n  // }\n  static randomNumber(seed) {\n    var rand = seed;\n    var hi = seed / (2147483647 / 48271);\n    var lo = seed % (2147483647 / 48271);\n    var test = 48271 * lo - 2147483647 % 48271 * hi;\n\n    if (test > 0) {\n      rand = test;\n    } else {\n      rand = test + this.M;\n    }\n\n    return {\n      nexSeed: rand,\n      r: rand * (1.0 / 2147483647)\n    };\n  }\n\n  static drawPolygon() {\n    // const conf = this.loadConf();\n    // const width = conf.width;\n    // const height = conf.height;\n    var pointNumber = this.randNumOfRange(3, 6);\n    console.log(Math.floor(Math.random() * 16777215).toString(16));\n    var color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n    var pts = \"\";\n    var ptsMirror = \"\";\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.randNumOfRange(0, this.width);\n      var y = this.randNumOfRange(0, this.height);\n      pts += x + \",\" + y + \" \";\n      var x2 = this.width - x;\n      ptsMirror += x2 + \",\" + y + \" \";\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: pts,\n        fill: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: ptsMirror,\n        fill: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  static randNumOfRange(a, b) {\n    return Math.round(this.randomNumber(seed).r * (b - a) + a);\n  }\n\n  static filter() {\n    return /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"filter\", {\n        id: \"f1\",\n        x: \"0\",\n        y: \"0\",\n        children: /*#__PURE__*/_jsxDEV(\"feGaussianBlur\", {\n          in: \"SourceGraphic\",\n          stdDeviation: \"15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n\n  static drawPiece(seed) {\n    this.seed = seed;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        height: this.height,\n        width: this.width,\n        children: [this.drawPolygon(), this.drawPolygon(), this.drawPolygon(), this.drawPolygon(), this.drawPolygon()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), this.randomNumber(seed).r]\n    }, void 0, true);\n  }\n\n}\n\nPieceGeneratorComponent.seed = 213478;\nPieceGeneratorComponent.width = 460;\nPieceGeneratorComponent.height = 660;\nexport default PieceGeneratorComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.component.jsx"],"names":["React","Component","PieceGeneratorComponent","randomNumber","seed","rand","hi","lo","test","M","nexSeed","r","drawPolygon","pointNumber","randNumOfRange","console","log","Math","floor","random","toString","color","pts","ptsMirror","i","x","width","y","height","x2","a","b","round","filter","drawPiece"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nclass PieceGeneratorComponent extends Component {\n\n    static seed = 213478;;\n    static width = 460;\n    static height = 660;\n\n\n    // static loadConf() {\n    //     //Configuration\n    //     return {\n\n    //         seed: 237849\n    //     };\n    // }\n\n    static randomNumber(seed) {\n        var rand = seed;\n        var hi = seed / (2147483647 / 48271);\n        var lo = seed % (2147483647 / 48271);\n        var test = 48271 * lo - (2147483647 % 48271) * hi;\n        if (test > 0) {\n            rand = test;\n        } else {\n            rand = test + this.M;\n        }\n        return { nexSeed: rand, r: rand * (1.0 / 2147483647) };\n    }\n\n\n\n    static drawPolygon() {\n        // const conf = this.loadConf();\n\n        // const width = conf.width;\n        // const height = conf.height;\n\n\n        var pointNumber = this.randNumOfRange(3, 6);\n        console.log(Math.floor(Math.random() * 16777215).toString(16));\n        var color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n\n        var pts = \"\";\n        var ptsMirror = \"\";\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.randNumOfRange(0, this.width);\n            var y = this.randNumOfRange(0, this.height);\n            pts += x + \",\" + y + \" \";\n            var x2 = this.width - x;\n            ptsMirror += x2 + \",\" + y + \" \";\n        }\n\n        return <><polygon points={pts} fill={color} />\n            <polygon points={ptsMirror} fill={color} /></>;\n    }\n\n    static randNumOfRange(a, b) {\n        return Math.round(this.randomNumber(seed).r * (b - a) + a);\n    }\n\n    static filter() {\n        return <defs>\n            <filter id=\"f1\" x=\"0\" y=\"0\">\n                <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n            </filter>\n        </defs>;\n    }\n\n\n    static drawPiece(seed) {\n        this.seed = seed;\n        return (\n            <>\n                <svg height={this.height} width={this.width}>\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                    {this.drawPolygon()}\n                </svg>\n                {this.randomNumber(seed).r}\n            </>\n        )\n    }\n\n\n\n}\n\nexport default PieceGeneratorComponent"]},"metadata":{},"sourceType":"module"}