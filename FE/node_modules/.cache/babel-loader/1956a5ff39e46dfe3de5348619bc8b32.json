{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx\";\nimport React, { Component } from 'react';\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from '../components/piece.component';\nimport PieceGeneratorComponent from '../generator/piece-generator.component';\n\nclass GameComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      me: JSON.parse(localStorage.getItem(\"auth\")).player,\n      inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n      //game\n      player1: {},\n      player2: {},\n      boardData: {},\n      // data from server\n      boardView: {},\n      // symbol, playertype\n      width: 16,\n      height: 16,\n      turn: \"P1\",\n      round: 0,\n      isInited: false,\n      //selection\n      selectedField: {},\n      possibleMoves: [],\n      //pieces\n      pieces: {},\n      //consts\n      squareSize: 60,\n      boardTopx: 30,\n      boardTopy: 30,\n      updateInterval: 2000\n    };\n    this.selectField = this.selectField.bind(this);\n    this.clickOnCanvas = this.clickOnCanvas.bind(this);\n    this.drawMethod = this.drawMethod.bind(this);\n    this.play = this.play.bind(this);\n    this.loadBoard = this.loadBoard.bind(this);\n    this.loadPieceData = this.loadPieceData.bind(this);\n    this.updateGameData();\n    this.loadBoard();\n    const loadTimer = setInterval(() => {\n      this.updateGameData();\n    }, this.state.updateInterval);\n  }\n\n  componentDidMount() {}\n\n  loadPieceData(bv) {\n    const {\n      squareSize\n    } = this.state; // console.log(\"is inside\", inited);\n\n    var pieces = []; // fill pieces canvas buffer\n\n    for (let i = 0; i < bv.length; i++) {\n      for (let j = 0; j < bv[0].length; j++) {\n        // TODO: P1 und P2 unterscheidung?\n        if (bv[i][j].symbol !== \"\" && pieces[bv[i][j].symbol] === undefined) {\n          //                            pieces[bv[i][j].symbol] = PieceGeneratorComponent.drawPieceCanvas(squareSize * 0.8, squareSize * 0.95, bv[i][j].symbol, bv[i][j].owner);\n          pieces[bv[i][j].symbol] = PieceGeneratorComponent.drawPieceCanvas(squareSize * 0.8, squareSize * 0.95, bv[i][j].symbol, bv[i][j].owner);\n        }\n      }\n    }\n\n    console.log(\"pieces added\"); //console.log(\"size\", pieces);\n\n    this.setState({\n      pieces: pieces,\n      isInited: true,\n      boardView: bv,\n      width: bv[0].length,\n      height: bv.length\n    });\n  }\n\n  updateGameData() {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.getGameData(gameId).then(res => {\n      this.setState({\n        player1: res.data.player1,\n        player2: res.data.player2,\n        turn: res.data.turn,\n        round: res.data.round\n      }); //when other player made his turn\n\n      if (turn !== res.data.turn) {\n        this.loadBoard(false);\n      } //check game end ?\n\n    });\n  }\n\n  loadBoard(init) {\n    const {\n      gameId,\n      squareSize\n    } = this.state;\n    mainService.getBoard(gameId).then(res => {\n      let bv = res.data.board; //console.log(bv);\n\n      for (let i = 0; i < bv.length; i++) {\n        for (let j = 0; j < bv[0].length; j++) {\n          if (res.data.board[i][j] === null) {\n            bv[i][j] = {\n              symbol: \"\",\n              owner: \"\",\n              possibleMoves: []\n            };\n          } else {\n            bv[i][j] = {\n              symbol: bv[i][j].symbol,\n              owner: bv[i][j].owner,\n              possibleMoves: bv[i][j].possibleMoves\n            };\n          }\n        }\n      }\n\n      if (init) {\n        this.loadPieceData(bv);\n      } else {\n        this.setState({\n          boardData: res.data,\n          boardView: bv,\n          width: bv[0].length,\n          height: bv.length\n        });\n      }\n    });\n  }\n\n  selectField(x, y) {\n    const {\n      boardView,\n      selectedField,\n      me,\n      turn,\n      possibleMoves\n    } = this.state;\n    const isPlayerTurn = me === turn;\n    const isEmptyField = boardView[y][x].symbol === \"\";\n    const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n    if (sthSelected) {\n      const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n      const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n      const isOwnSelected = me == boardView[selectedField.y][selectedField.x].owner; // move,unselect, another select ?\n\n      if (isAlreadySelected) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n        // move\n        const draw = {\n          fromPos: {\n            x: selectedField.x,\n            y: selectedField.y\n          },\n          toPos: {\n            x: x,\n            y: y\n          }\n        };\n        this.play(draw);\n      } else if (isEmptyField) {\n        // unselect\n        this.setState({\n          possibleMoves: [],\n          selectedField: {}\n        });\n      } else {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    } else {\n      if (!isEmptyField) {\n        // select new position\n        this.setState({\n          possibleMoves: boardView[y][x].possibleMoves,\n          selectedField: {\n            x: x,\n            y: y\n          }\n        });\n      }\n    }\n  }\n\n  play(draw) {\n    const {\n      gameId,\n      turn\n    } = this.state;\n    mainService.play(gameId, draw).then(res => {\n      console.log(\"played\", turn);\n      const nextTurn = turn === \"P1\" ? \"P2\" : \"P1\";\n      this.setState({\n        possibleMoves: [],\n        selectedField: {},\n        turn: nextTurn\n      });\n      this.updateGameData();\n      this.loadBoard();\n    });\n  }\n\n  clickOnCanvas(event) {\n    const {\n      squareSize,\n      boardTopy,\n      boardTopx\n    } = this.state;\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left - boardTopx;\n    const y = event.clientY - rect.top - boardTopy; //console.log(\"x: \" + x + \" y: \" + y);\n\n    this.selectField((x - x % squareSize) / squareSize, (y - y % squareSize) / squareSize);\n  }\n\n  drawMethod() {\n    const {\n      width,\n      height,\n      squareSize,\n      boardView,\n      possibleMoves,\n      boardTopy,\n      boardTopx,\n      selectedField,\n      me,\n      pieces,\n      isInited\n    } = this.state;\n\n    const draw = (ctx, frameCount) => {\n      if (boardView) {\n        ctx.canvas.width = squareSize * (width + 1);\n        ctx.canvas.height = squareSize * (height + 1); //draw board\n\n        for (let i = 0; i < width; i++) {\n          for (let j = 0; j < height; j++) {\n            ctx.fillStyle = (i + j) % 2 == 0 ? \"#D2B48C\" : \"PeachPuff\";\n            let xOffset = boardTopx + j * squareSize;\n            let yOffset = boardTopy + i * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          }\n        }\n\n        if (JSON.stringify(selectedField) !== \"{}\") {\n          // draw moves\n          ctx.globalAlpha = 0.45;\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"lightgreen\" : \"red\";\n\n          for (let k = 0; k < possibleMoves.length; k++) {\n            let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n            let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n            ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n          } //draw selected\n\n\n          ctx.fillStyle = me === boardView[selectedField.y][selectedField.x].owner ? \"green\" : \"darkred\";\n          ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n          ctx.globalAlpha = 1;\n        } // draw pieces\n\n\n        if (boardView[0]) {\n          ctx.fillStyle = \"black\";\n          ctx.font = \"20px Arial\";\n\n          for (let i = 0; i < width; i++) {\n            for (let j = 0; j < height; j++) {\n              if (boardView[j][i].symbol !== \"\") {\n                let xOffset = boardTopx + (i + 0.115) * squareSize;\n                let yOffset = boardTopy + (j + 0.05) * squareSize;\n\n                if (pieces.length !== 0) {\n                  //  console.log(pieces);\n                  ctx.drawImage(pieces[boardView[j][i].symbol], xOffset, yOffset);\n                } //}\n\n              }\n            }\n          }\n        } // draw the border around the chessboard\n\n\n        ctx.strokeStyle = \"black\";\n        ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height);\n      }\n    };\n\n    return draw;\n  }\n\n  drawPiece(pieceCode, player) {\n    if (player === \"P1\") {//return \"♖\";\n    }\n\n    return pieceCode; //        return \"♜\";\n  }\n\n  drawGameText() {\n    const {\n      me,\n      turn\n    } = this.state;\n\n    if (me === turn) {\n      return \"Your turn!\";\n    }\n\n    return \"Wait for opponents turn...\";\n  }\n\n  render() {\n    const {\n      inviteLink,\n      player1,\n      player2,\n      boardView,\n      selectedField,\n      turn,\n      me,\n      round,\n      isInited\n    } = this.state;\n    var piece = \"\";\n\n    if (boardView[0] && selectedField.x) {\n      piece = boardView[selectedField.y][selectedField.x]; //console.log(piece);\n    } // TODO: aufteilen in GameData und PieceData ?\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"            \", this.drawGameText()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), isInited && /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.drawMethod(),\n        onClick: this.clickOnCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: inviteLink\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Player1: \", player1 && player1.name, \" \", player2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Player2: \", player2.name]\n        }, void 0, true), \" \", \" round:\", round]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/game/game.component.jsx"],"names":["React","Component","mainService","Canvas","PieceComponent","PieceGeneratorComponent","GameComponent","constructor","props","state","gameId","JSON","parse","localStorage","getItem","me","player","inviteLink","player1","player2","boardData","boardView","width","height","turn","round","isInited","selectedField","possibleMoves","pieces","squareSize","boardTopx","boardTopy","updateInterval","selectField","bind","clickOnCanvas","drawMethod","play","loadBoard","loadPieceData","updateGameData","loadTimer","setInterval","componentDidMount","bv","i","length","j","symbol","undefined","drawPieceCanvas","owner","console","log","setState","getGameData","then","res","data","init","getBoard","board","x","y","isPlayerTurn","isEmptyField","sthSelected","stringify","isAlreadySelected","isPossibleMove","some","move","isOwnSelected","draw","fromPos","toPos","nextTurn","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","ctx","frameCount","canvas","fillStyle","xOffset","yOffset","fillRect","globalAlpha","k","font","drawImage","strokeStyle","strokeRect","drawPiece","pieceCode","drawGameText","render","piece","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mainService from '../services/main.service';\nimport Canvas from './canvas.component';\nimport PieceComponent from '../components/piece.component';\nimport PieceGeneratorComponent from '../generator/piece-generator.component';\n\nclass GameComponent extends Component {\n\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameId: JSON.parse(localStorage.getItem(\"auth\")).gameId,\n            me: JSON.parse(localStorage.getItem(\"auth\")).player,\n            inviteLink: \"http://localhost:3000/joingame/\" + JSON.parse(localStorage.getItem(\"auth\")).gameId,\n\n            //game\n            player1: {},\n            player2: {},\n            boardData: {}, // data from server\n            boardView: {}, // symbol, playertype\n            width: 16,\n            height: 16,\n            turn: \"P1\",\n            round: 0,\n            isInited: false,\n\n            //selection\n            selectedField: {},\n            possibleMoves: [],\n\n            //pieces\n            pieces: {},\n\n\n\n            //consts\n            squareSize: 60,\n            boardTopx: 30,\n            boardTopy: 30,\n            updateInterval: 2000\n        }\n\n        this.selectField = this.selectField.bind(this);\n        this.clickOnCanvas = this.clickOnCanvas.bind(this);\n        this.drawMethod = this.drawMethod.bind(this);\n        this.play = this.play.bind(this);\n        this.loadBoard = this.loadBoard.bind(this);\n        this.loadPieceData = this.loadPieceData.bind(this);\n\n        this.updateGameData();\n        this.loadBoard();\n\n        const loadTimer = setInterval(() => {\n\n            this.updateGameData();\n        }, this.state.updateInterval);\n    }\n\n    componentDidMount() {\n\n    }\n\n    loadPieceData(bv) {\n        const { squareSize } = this.state;\n\n        // console.log(\"is inside\", inited);\n        var pieces = [];\n        // fill pieces canvas buffer\n        for (let i = 0; i < bv.length; i++) {\n            for (let j = 0; j < bv[0].length; j++) {\n                // TODO: P1 und P2 unterscheidung?\n                if (bv[i][j].symbol !== \"\" && pieces[bv[i][j].symbol] === undefined) {\n\n                    //                            pieces[bv[i][j].symbol] = PieceGeneratorComponent.drawPieceCanvas(squareSize * 0.8, squareSize * 0.95, bv[i][j].symbol, bv[i][j].owner);\n                    pieces[bv[i][j].symbol] = PieceGeneratorComponent.drawPieceCanvas(squareSize * 0.8, squareSize * 0.95, bv[i][j].symbol, bv[i][j].owner);\n                }\n            }\n        }\n        console.log(\"pieces added\");\n        //console.log(\"size\", pieces);\n        this.setState({ pieces: pieces, isInited: true, boardView: bv, width: bv[0].length, height: bv.length });\n    }\n\n\n\n    updateGameData() {\n        const { gameId, turn } = this.state;\n        mainService.getGameData(gameId).then((res) => {\n            this.setState({ player1: res.data.player1, player2: res.data.player2, turn: res.data.turn, round: res.data.round });\n\n            //when other player made his turn\n            if (turn !== res.data.turn) {\n\n                this.loadBoard(false);\n            }\n\n            //check game end ?\n        });\n    }\n\n\n\n    loadBoard(init) {\n        const { gameId, squareSize } = this.state;\n        mainService.getBoard(gameId).then((res) => {\n            let bv = res.data.board;\n            //console.log(bv);\n            for (let i = 0; i < bv.length; i++) {\n                for (let j = 0; j < bv[0].length; j++) {\n                    if (res.data.board[i][j] === null) {\n                        bv[i][j] = {\n                            symbol: \"\",\n                            owner: \"\",\n                            possibleMoves: []\n                        };\n                    } else {\n                        bv[i][j] = {\n                            symbol: bv[i][j].symbol,\n                            owner: bv[i][j].owner,\n                            possibleMoves: bv[i][j].possibleMoves\n                        };\n                    }\n                }\n            }\n            if (init) {\n                this.loadPieceData(bv);\n            } else {\n                this.setState({ boardData: res.data, boardView: bv, width: bv[0].length, height: bv.length });\n            }\n        });\n    }\n\n    selectField(x, y) {\n        const { boardView, selectedField, me, turn, possibleMoves } = this.state;\n        const isPlayerTurn = me === turn;\n        const isEmptyField = boardView[y][x].symbol === \"\";\n        const sthSelected = JSON.stringify(selectedField) !== \"{}\";\n\n        if (sthSelected) {\n            const isAlreadySelected = selectedField.x === x && selectedField.y === y;\n            const isPossibleMove = possibleMoves.some(move => move.x === x && move.y === y);\n            const isOwnSelected = me == boardView[selectedField.y][selectedField.x].owner;\n\n            // move,unselect, another select ?\n\n            if (isAlreadySelected) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {}\n                });\n            } else if (isOwnSelected && isPossibleMove && isPlayerTurn) {\n                // move\n                const draw = { fromPos: { x: selectedField.x, y: selectedField.y }, toPos: { x: x, y: y } }\n                this.play(draw);\n            } else if (isEmptyField) {\n                // unselect\n                this.setState({\n                    possibleMoves: [],\n                    selectedField: {}\n                });\n            } else {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y }\n                });\n            }\n        } else {\n            if (!isEmptyField) {\n                // select new position\n                this.setState({\n                    possibleMoves: boardView[y][x].possibleMoves,\n                    selectedField: { x: x, y: y }\n                });\n            }\n        }\n    }\n\n    play(draw) {\n        const { gameId, turn } = this.state;\n        mainService.play(gameId, draw).then((res) => {\n            console.log(\"played\", turn);\n            const nextTurn = (turn === \"P1\") ? \"P2\" : \"P1\";\n            this.setState({\n                possibleMoves: [],\n                selectedField: {},\n                turn: nextTurn\n            });\n\n            this.updateGameData();\n            this.loadBoard();\n        });\n    }\n\n\n\n\n    clickOnCanvas(event) {\n        const { squareSize, boardTopy, boardTopx } = this.state;\n        const rect = event.target.getBoundingClientRect();\n        const x = event.clientX - rect.left - boardTopx;\n        const y = event.clientY - rect.top - boardTopy;\n        //console.log(\"x: \" + x + \" y: \" + y);\n        this.selectField((x - x % squareSize) / (squareSize), (y - y % squareSize) / (squareSize));\n    }\n\n    drawMethod() {\n        const { width, height, squareSize, boardView, possibleMoves, boardTopy, boardTopx, selectedField, me, pieces, isInited } = this.state;\n\n\n        const draw = (ctx, frameCount) => {\n\n            if (boardView) {\n\n                ctx.canvas.width = squareSize * (width + 1)\n                ctx.canvas.height = squareSize * (height + 1)\n\n                //draw board\n                for (let i = 0; i < width; i++) {\n                    for (let j = 0; j < height; j++) {\n                        ctx.fillStyle = ((i + j) % 2 == 0) ? \"#D2B48C\" : \"PeachPuff\";\n                        let xOffset = boardTopx + j * squareSize;\n                        let yOffset = boardTopy + i * squareSize;\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n                }\n                if (JSON.stringify(selectedField) !== \"{}\") {\n                    // draw moves\n                    ctx.globalAlpha = 0.45;\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"lightgreen\" : \"red\";\n                    for (let k = 0; k < possibleMoves.length; k++) {\n                        let xOffset = boardTopx + possibleMoves[k].x * squareSize;\n                        let yOffset = boardTopy + possibleMoves[k].y * squareSize;\n\n                        ctx.fillRect(xOffset, yOffset, squareSize, squareSize);\n                    }\n\n                    //draw selected\n                    ctx.fillStyle = (me === boardView[selectedField.y][selectedField.x].owner) ? \"green\" : \"darkred\";\n                    ctx.fillRect(boardTopx + selectedField.x * squareSize, boardTopy + selectedField.y * squareSize, squareSize, squareSize);\n                    ctx.globalAlpha = 1;\n                }\n\n                // draw pieces\n                if (boardView[0]) {\n                    ctx.fillStyle = \"black\";\n                    ctx.font = \"20px Arial\";\n                    for (let i = 0; i < width; i++) {\n                        for (let j = 0; j < height; j++) {\n                            if (boardView[j][i].symbol !== \"\") {\n\n                                let xOffset = boardTopx + (i + 0.115) * squareSize;\n                                let yOffset = boardTopy + (j + 0.05) * squareSize;\n                                if (pieces.length !== 0) {\n                                    //  console.log(pieces);\n                                    ctx.drawImage(pieces[boardView[j][i].symbol], xOffset, yOffset);\n                                }\n                                //}\n\n\n                            }\n                        }\n                    }\n                }\n\n                // draw the border around the chessboard\n                ctx.strokeStyle = \"black\";\n                ctx.strokeRect(boardTopx, boardTopy, squareSize * width, squareSize * height)\n\n            }\n        }\n        return draw;\n\n    }\n\n    drawPiece(pieceCode, player) {\n        if (player === \"P1\") {\n            //return \"♖\";\n\n        }\n        return pieceCode;\n        //        return \"♜\";\n    }\n\n    drawGameText() {\n        const { me, turn } = this.state;\n        if (me === turn) {\n            return \"Your turn!\";\n        }\n        return \"Wait for opponents turn...\";\n    }\n\n\n    render() {\n        const { inviteLink, player1, player2, boardView, selectedField, turn, me, round, isInited } = this.state;\n        var piece = \"\";\n        if (boardView[0] && selectedField.x) {\n            piece = boardView[selectedField.y][selectedField.x];\n            //console.log(piece);\n        }\n\n\n        // TODO: aufteilen in GameData und PieceData ?\n        return (\n\n            <div>\n                {/* <img id=\"scream\" width=\"220\" height=\"277\" src=\"https://filesamples.com/samples/image/svg/sample_640%C3%97426.svg\" alt=\"The Scream\"></img> */}\n\n\n                <div>            {this.drawGameText()}</div>\n                {isInited && <Canvas draw={this.drawMethod()} onClick={this.clickOnCanvas} />}\n                {/* <div>{piece.symbol} {\" \"}{piece.owner}</div>*/}\n                <div>\n                    {inviteLink}\n                </div>\n                <div>\n                    Player1: {player1 && player1.name} {player2 && <>Player2: {player2.name}</>} {\" round:\"}{round}\n                </div>\n\n            </div >\n        )\n    }\n}\n\nexport default GameComponent"]},"metadata":{},"sourceType":"module"}