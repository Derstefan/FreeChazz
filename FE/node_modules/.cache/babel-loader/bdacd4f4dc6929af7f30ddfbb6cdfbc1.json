{"ast":null,"code":"import React, { Component } from 'react';\n\nclass PieceGeneratorComponent extends Component {\n  static nextRand() {\n    var hi = this.seed / (2147483647 / 48271);\n    var lo = this.seed % (2147483647 / 48271);\n    var test = 48271 * lo - 2147483647 % 48271 * hi;\n\n    if (test > 0) {\n      this.seed = test;\n    } else {\n      this.seed = test + 2147483647;\n    }\n\n    return this.seed * (1.0 / 2147483647);\n  } // static drawPolygon() {\n  //     var pointNumber = this.randNumOfRange(3, 5);\n  //     console.log(\"pointNumber=\" + pointNumber)\n  //     //console.log(Math.floor(this.nextRand() * 16777215).toString(16));\n  //     var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n  //     var pts = \"\";\n  //     var ptsMirror = \"\";\n  //     for (var i = 0; i < pointNumber; i++) {\n  //         var x = this.randNumOfRange(0, this.width);\n  //         var y = this.randNumOfRange(0, this.height);\n  //         pts += x + \",\" + y + \" \";\n  //         var x2 = this.width - x;\n  //         ptsMirror += x2 + \",\" + y + \" \";\n  //         //  console.log(i);\n  //     }\n  //     return <><polygon points={pts} fill={color} />\n  //         <polygon points={ptsMirror} fill={color} /></>;\n  // }\n  // static drawPiece(width, height, seed, owner) {\n  //     this.seed = seed;\n  //     this.width = width;\n  //     this.height = height;\n  //     return (\n  //         <>\n  //             <svg height={this.height} width={this.width}>\n  //                 {this.drawPolygon()}\n  //                 {this.drawPolygon()}\n  //                 {this.drawPolygon()}\n  //                 {this.drawPolygon()}\n  //                 {this.drawPolygon()}\n  //             </svg>\n  //         </>\n  //     )\n  // }\n\n\n  static drawPolygonCanvas(c2) {\n    var pointNumber = this.randNumOfRange(3, 10);\n    console.log(\"pointNumber=\" + pointNumber);\n    var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n    c2.fillStyle = color;\n    c2.beginPath();\n\n    for (var i = 0; i < pointNumber; i++) {\n      var x = this.randNumOfRange(0, this.width);\n      var y = this.randNumOfRange(0, this.height); //pts += x + \",\" + y + \" \";\n\n      if (i === 0) {\n        c2.moveTo(x, y);\n      } else {\n        c2.lineTo(x, y);\n      }\n    }\n\n    c2.closePath();\n    c2.fill();\n    c2.fillStyle = '#f00';\n    c2.beginPath();\n\n    for (var j = j; j < pointNumber; j++) {\n      var x = this.randNumOfRange(0, this.width);\n      var y = this.randNumOfRange(0, this.height);\n      var x2 = this.width - x; //  ptsMirror += x2 + \",\" + y + \" \";\n\n      if (j === 0) {\n        c2.moveTo(x2, y);\n      } else {\n        c2.lineTo(x2, y);\n      }\n    }\n\n    c2.closePath();\n    c2.fill(); // return <><polygon points={pts} fill={color} />\n    //     <polygon points={ptsMirror} fill={color} /></>;\n  }\n\n  static randNumOfRange(a, b) {\n    //return Math.round(this.nextRand() * (b - a) + a);\n    return Math.round(Math.random() * (b - a) + a);\n  }\n\n  static drawPieceCanvas(width, height, seed, owner) {\n    this.seed = seed;\n    this.width = width;\n    this.height = height;\n    var canvas2 = document.createElement('canvas');\n    canvas2.width = width;\n    canvas2.height = height;\n    var context2 = canvas2.getContext('2d');\n    this.drawPolygonCanvas(context2);\n    return canvas2;\n  }\n\n}\n\nPieceGeneratorComponent.seed = 213478;\nPieceGeneratorComponent.width = 600;\nPieceGeneratorComponent.height = 600;\nexport default PieceGeneratorComponent;","map":{"version":3,"sources":["/home/ich/MEGA/Entwicklung/FreeChess/repo/FreeChessRepo/FreeChess/FE/src/generator/piece-generator.component.jsx"],"names":["React","Component","PieceGeneratorComponent","nextRand","hi","seed","lo","test","drawPolygonCanvas","c2","pointNumber","randNumOfRange","console","log","color","Math","floor","toString","fillStyle","beginPath","i","x","width","y","height","moveTo","lineTo","closePath","fill","j","x2","a","b","round","random","drawPieceCanvas","owner","canvas2","document","createElement","context2","getContext"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nclass PieceGeneratorComponent extends Component {\n\n    static seed = 213478;\n    static width = 600;\n    static height = 600;\n\n    static nextRand() {\n        var hi = this.seed / (2147483647 / 48271);\n        var lo = this.seed % (2147483647 / 48271);\n        var test = 48271 * lo - (2147483647 % 48271) * hi;\n        if (test > 0) {\n            this.seed = test;\n        } else {\n            this.seed = test + 2147483647;\n        }\n        return this.seed * (1.0 / 2147483647);\n    }\n\n\n\n    // static drawPolygon() {\n\n    //     var pointNumber = this.randNumOfRange(3, 5);\n    //     console.log(\"pointNumber=\" + pointNumber)\n    //     //console.log(Math.floor(this.nextRand() * 16777215).toString(16));\n    //     var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n\n    //     var pts = \"\";\n    //     var ptsMirror = \"\";\n    //     for (var i = 0; i < pointNumber; i++) {\n    //         var x = this.randNumOfRange(0, this.width);\n    //         var y = this.randNumOfRange(0, this.height);\n    //         pts += x + \",\" + y + \" \";\n    //         var x2 = this.width - x;\n    //         ptsMirror += x2 + \",\" + y + \" \";\n    //         //  console.log(i);\n    //     }\n\n    //     return <><polygon points={pts} fill={color} />\n    //         <polygon points={ptsMirror} fill={color} /></>;\n    // }\n\n\n    // static drawPiece(width, height, seed, owner) {\n    //     this.seed = seed;\n    //     this.width = width;\n    //     this.height = height;\n\n    //     return (\n    //         <>\n    //             <svg height={this.height} width={this.width}>\n    //                 {this.drawPolygon()}\n    //                 {this.drawPolygon()}\n    //                 {this.drawPolygon()}\n    //                 {this.drawPolygon()}\n    //                 {this.drawPolygon()}\n    //             </svg>\n    //         </>\n    //     )\n    // }\n\n\n\n    static drawPolygonCanvas(c2) {\n\n        var pointNumber = this.randNumOfRange(3, 10);\n        console.log(\"pointNumber=\" + pointNumber)\n        var color = \"#\" + Math.floor(this.nextRand() * 16777215).toString(16);\n\n        c2.fillStyle = color;\n        c2.beginPath();\n        for (var i = 0; i < pointNumber; i++) {\n            var x = this.randNumOfRange(0, this.width);\n            var y = this.randNumOfRange(0, this.height);\n            //pts += x + \",\" + y + \" \";\n\n            if (i === 0) {\n                c2.moveTo(x, y);\n            } else {\n                c2.lineTo(x, y);\n            }\n\n\n        }\n        c2.closePath();\n        c2.fill();\n        c2.fillStyle = '#f00';\n        c2.beginPath();\n\n        for (var j = j; j < pointNumber; j++) {\n            var x = this.randNumOfRange(0, this.width);\n            var y = this.randNumOfRange(0, this.height);\n            var x2 = this.width - x;\n            //  ptsMirror += x2 + \",\" + y + \" \";\n            if (j === 0) {\n                c2.moveTo(x2, y);\n            } else {\n                c2.lineTo(x2, y);\n            }\n        }\n        c2.closePath();\n        c2.fill();\n\n\n        // return <><polygon points={pts} fill={color} />\n        //     <polygon points={ptsMirror} fill={color} /></>;\n    }\n\n    static randNumOfRange(a, b) {\n        //return Math.round(this.nextRand() * (b - a) + a);\n        return Math.round(Math.random() * (b - a) + a);\n    }\n\n\n    static drawPieceCanvas(width, height, seed, owner) {\n        this.seed = seed;\n        this.width = width;\n        this.height = height;\n\n        var canvas2 = document.createElement('canvas');\n        canvas2.width = width;\n        canvas2.height = height;\n        var context2 = canvas2.getContext('2d');\n        this.drawPolygonCanvas(context2)\n\n        return (\n            canvas2\n        )\n    }\n\n\n\n\n}\n\nexport default PieceGeneratorComponent"]},"metadata":{},"sourceType":"module"}